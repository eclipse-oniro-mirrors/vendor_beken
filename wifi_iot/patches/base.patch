diff --git a/base/global/cust_lite/LICENSE b/base/global/cust_lite/LICENSE
new file mode 100755
index 00000000..4947287f
--- /dev/null
+++ b/base/global/cust_lite/LICENSE
@@ -0,0 +1,177 @@
+
+                                 Apache License
+                           Version 2.0, January 2004
+                        http://www.apache.org/licenses/
+
+   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
+
+   1. Definitions.
+
+      "License" shall mean the terms and conditions for use, reproduction,
+      and distribution as defined by Sections 1 through 9 of this document.
+
+      "Licensor" shall mean the copyright owner or entity authorized by
+      the copyright owner that is granting the License.
+
+      "Legal Entity" shall mean the union of the acting entity and all
+      other entities that control, are controlled by, or are under common
+      control with that entity. For the purposes of this definition,
+      "control" means (i) the power, direct or indirect, to cause the
+      direction or management of such entity, whether by contract or
+      otherwise, or (ii) ownership of fifty percent (50%) or more of the
+      outstanding shares, or (iii) beneficial ownership of such entity.
+
+      "You" (or "Your") shall mean an individual or Legal Entity
+      exercising permissions granted by this License.
+
+      "Source" form shall mean the preferred form for making modifications,
+      including but not limited to software source code, documentation
+      source, and configuration files.
+
+      "Object" form shall mean any form resulting from mechanical
+      transformation or translation of a Source form, including but
+      not limited to compiled object code, generated documentation,
+      and conversions to other media types.
+
+      "Work" shall mean the work of authorship, whether in Source or
+      Object form, made available under the License, as indicated by a
+      copyright notice that is included in or attached to the work
+      (an example is provided in the Appendix below).
+
+      "Derivative Works" shall mean any work, whether in Source or Object
+      form, that is based on (or derived from) the Work and for which the
+      editorial revisions, annotations, elaborations, or other modifications
+      represent, as a whole, an original work of authorship. For the purposes
+      of this License, Derivative Works shall not include works that remain
+      separable from, or merely link (or bind by name) to the interfaces of,
+      the Work and Derivative Works thereof.
+
+      "Contribution" shall mean any work of authorship, including
+      the original version of the Work and any modifications or additions
+      to that Work or Derivative Works thereof, that is intentionally
+      submitted to Licensor for inclusion in the Work by the copyright owner
+      or by an individual or Legal Entity authorized to submit on behalf of
+      the copyright owner. For the purposes of this definition, "submitted"
+      means any form of electronic, verbal, or written communication sent
+      to the Licensor or its representatives, including but not limited to
+      communication on electronic mailing lists, source code control systems,
+      and issue tracking systems that are managed by, or on behalf of, the
+      Licensor for the purpose of discussing and improving the Work, but
+      excluding communication that is conspicuously marked or otherwise
+      designated in writing by the copyright owner as "Not a Contribution."
+
+      "Contributor" shall mean Licensor and any individual or Legal Entity
+      on behalf of whom a Contribution has been received by Licensor and
+      subsequently incorporated within the Work.
+
+   2. Grant of Copyright License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      copyright license to reproduce, prepare Derivative Works of,
+      publicly display, publicly perform, sublicense, and distribute the
+      Work and such Derivative Works in Source or Object form.
+
+   3. Grant of Patent License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      (except as stated in this section) patent license to make, have made,
+      use, offer to sell, sell, import, and otherwise transfer the Work,
+      where such license applies only to those patent claims licensable
+      by such Contributor that are necessarily infringed by their
+      Contribution(s) alone or by combination of their Contribution(s)
+      with the Work to which such Contribution(s) was submitted. If You
+      institute patent litigation against any entity (including a
+      cross-claim or counterclaim in a lawsuit) alleging that the Work
+      or a Contribution incorporated within the Work constitutes direct
+      or contributory patent infringement, then any patent licenses
+      granted to You under this License for that Work shall terminate
+      as of the date such litigation is filed.
+
+   4. Redistribution. You may reproduce and distribute copies of the
+      Work or Derivative Works thereof in any medium, with or without
+      modifications, and in Source or Object form, provided that You
+      meet the following conditions:
+
+      (a) You must give any other recipients of the Work or
+          Derivative Works a copy of this License; and
+
+      (b) You must cause any modified files to carry prominent notices
+          stating that You changed the files; and
+
+      (c) You must retain, in the Source form of any Derivative Works
+          that You distribute, all copyright, patent, trademark, and
+          attribution notices from the Source form of the Work,
+          excluding those notices that do not pertain to any part of
+          the Derivative Works; and
+
+      (d) If the Work includes a "NOTICE" text file as part of its
+          distribution, then any Derivative Works that You distribute must
+          include a readable copy of the attribution notices contained
+          within such NOTICE file, excluding those notices that do not
+          pertain to any part of the Derivative Works, in at least one
+          of the following places: within a NOTICE text file distributed
+          as part of the Derivative Works; within the Source form or
+          documentation, if provided along with the Derivative Works; or,
+          within a display generated by the Derivative Works, if and
+          wherever such third-party notices normally appear. The contents
+          of the NOTICE file are for informational purposes only and
+          do not modify the License. You may add Your own attribution
+          notices within Derivative Works that You distribute, alongside
+          or as an addendum to the NOTICE text from the Work, provided
+          that such additional attribution notices cannot be construed
+          as modifying the License.
+
+      You may add Your own copyright statement to Your modifications and
+      may provide additional or different license terms and conditions
+      for use, reproduction, or distribution of Your modifications, or
+      for any such Derivative Works as a whole, provided Your use,
+      reproduction, and distribution of the Work otherwise complies with
+      the conditions stated in this License.
+
+   5. Submission of Contributions. Unless You explicitly state otherwise,
+      any Contribution intentionally submitted for inclusion in the Work
+      by You to the Licensor shall be under the terms and conditions of
+      this License, without any additional terms or conditions.
+      Notwithstanding the above, nothing herein shall supersede or modify
+      the terms of any separate license agreement you may have executed
+      with Licensor regarding such Contributions.
+
+   6. Trademarks. This License does not grant permission to use the trade
+      names, trademarks, service marks, or product names of the Licensor,
+      except as required for reasonable and customary use in describing the
+      origin of the Work and reproducing the content of the NOTICE file.
+
+   7. Disclaimer of Warranty. Unless required by applicable law or
+      agreed to in writing, Licensor provides the Work (and each
+      Contributor provides its Contributions) on an "AS IS" BASIS,
+      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
+      implied, including, without limitation, any warranties or conditions
+      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
+      PARTICULAR PURPOSE. You are solely responsible for determining the
+      appropriateness of using or redistributing the Work and assume any
+      risks associated with Your exercise of permissions under this License.
+
+   8. Limitation of Liability. In no event and under no legal theory,
+      whether in tort (including negligence), contract, or otherwise,
+      unless required by applicable law (such as deliberate and grossly
+      negligent acts) or agreed to in writing, shall any Contributor be
+      liable to You for damages, including any direct, indirect, special,
+      incidental, or consequential damages of any character arising as a
+      result of this License or out of the use or inability to use the
+      Work (including but not limited to damages for loss of goodwill,
+      work stoppage, computer failure or malfunction, or any and all
+      other commercial damages or losses), even if such Contributor
+      has been advised of the possibility of such damages.
+
+   9. Accepting Warranty or Additional Liability. While redistributing
+      the Work or Derivative Works thereof, You may choose to offer,
+      and charge a fee for, acceptance of support, warranty, indemnity,
+      or other liability obligations and/or rights consistent with this
+      License. However, in accepting such obligations, You may act only
+      on Your own behalf and on Your sole responsibility, not on behalf
+      of any other Contributor, and only if You agree to indemnify,
+      defend, and hold each Contributor harmless for any liability
+      incurred by, or claims asserted against, such Contributor by reason
+      of your accepting any such warranty or additional liability.
+
+   END OF TERMS AND CONDITIONS
\ No newline at end of file
diff --git a/base/global/cust_lite/README.md b/base/global/cust_lite/README.md
new file mode 100755
index 00000000..123763fc
--- /dev/null
+++ b/base/global/cust_lite/README.md
@@ -0,0 +1,54 @@
+# cust<a name="EN-US_TOPIC_0000001126254525"></a>
+
+-   [Introduction](#section1881113251316)
+-   [Directory Structure](#section196561842161316)
+-   [Usage](#section1799421112165)
+-   [Constraints](#section1811111510182)
+-   [Repositories Involved](#section170262901818)
+
+## Introduction<a name="section1881113251316"></a>
+
+The customization framework, namely, cust, provides APIs for each service module to obtain the configuration directories at different levels or the configuration file paths.
+
+## Directory Structure<a name="section196561842161316"></a>
+
+The directory structure for the customization framework is as follows:
+
+```
+/base/global/
+├── cust_lite                 # Code repository for the customization framework
+│   ├── frameworks            # Core code of the customization framework
+│   │   ├── cust_lite         # Customization framework
+│   │   │   ├── src           # Implementation code
+│   │   │   └── test          # Test code
+│   ├── interfaces            # APIs of the customization framework
+│   │   └── innerkits         # APIs of the customization framework for internal subsystems
+```
+
+## Usage<a name="section1799421112165"></a>
+
+Call the APIs of the customization framework to obtain the configuration directories at different levels or the configuration file paths.
+
+```
+#include <gtest/gtest.h>
+#include "cust_utils.h"
+
+const char *testPathSuffix = "user.xml"; // Set the name of the configuration file.
+char buf[MAX_PATH_LEN];
+char *filePath = GetOneCfgFile(testPathSuffix, CUST_TYPE_CONFIG, buf, MAX_PATH_LEN); // Obtain the path of the configuration file with the highest priority.
+```
+
+## Constraints<a name="section1811111510182"></a>
+
+**Programming language**: C/C++
+
+## Repositories Involved<a name="section170262901818"></a>
+
+[Globalization subsystem](https://gitee.com/openharmony/docs/blob/master/en/readme/globalization.md)
+
+[global\_resmgr\_lite](https://gitee.com/openharmony/global_resmgr_lite/blob/master/README.md)
+
+[global\_i18n\_lite](https://gitee.com/openharmony/global_i18n_lite/blob/master/README.md)
+
+global\_cust\_lite
+
diff --git a/base/global/cust_lite/README_zh.md b/base/global/cust_lite/README_zh.md
new file mode 100755
index 00000000..d4cb5635
--- /dev/null
+++ b/base/global/cust_lite/README_zh.md
@@ -0,0 +1,54 @@
+# 定制框架组件介绍<a name="ZH-CN_TOPIC_0000001126254525"></a>
+
+-   [简介](#section1881113251316)
+-   [目录](#section196561842161316)
+-   [说明](#section1799421112165)
+-   [约束](#section1811111510182)
+-   [相关仓](#section170262901818)
+
+## 简介<a name="section1881113251316"></a>
+
+**定制框架组件**为各业务模块提供获取各配置层级的配置目录或配置文件路径的接口。
+
+## 目录<a name="section196561842161316"></a>
+
+定制框架组件源代码目录结构如下所示：
+
+```
+/base/global/
+├── cust_lite               # 定制框架代码仓
+│   ├── frameworks          # 定制框架核心代码
+│   │   ├── cust_lite       # 定制框架模块
+│   │   │   ├── src         # 实现代码
+│   │   │   └── test        # 测试代码
+│   ├── interfaces          # 定制框架接口
+│   │   └── innerkits       # 定制框架子系统间接口
+```
+
+## 说明<a name="section1799421112165"></a>
+
+调用该组件中的接口获取各配置层级的配置目录或配置文件路径。
+
+```
+#include <gtest/gtest.h>
+#include "cust_utils.h"
+
+const char *testPathSuffix = "user.xml"; //设置配置文件名称
+char buf[MAX_PATH_LEN];
+char *filePath = GetOneCfgFile(testPathSuffix, CUST_TYPE_CONFIG, buf, MAX_PATH_LEN); //获取最高优先级的配置文件路径
+```
+
+## 约束<a name="section1811111510182"></a>
+
+**语言限制**：C/C++语言
+
+## 相关仓<a name="section170262901818"></a>
+
+[全球化子系统](https://gitee.com/openharmony/docs/blob/master/zh-cn/readme/%E5%85%A8%E7%90%83%E5%8C%96%E5%AD%90%E7%B3%BB%E7%BB%9F.md)
+
+[global\_resmgr\_lite](https://gitee.com/openharmony/global_resmgr_lite/blob/master/README_zh.md)
+
+[global\_i18n\_lite](https://gitee.com/openharmony/global_i18n_lite/blob/master/README_zh.md)
+
+global\_cust\_lite
+
diff --git a/base/global/cust_lite/frameworks/cust_lite/BUILD.gn b/base/global/cust_lite/frameworks/cust_lite/BUILD.gn
new file mode 100755
index 00000000..348a424b
--- /dev/null
+++ b/base/global/cust_lite/frameworks/cust_lite/BUILD.gn
@@ -0,0 +1,28 @@
+# Copyright (c) 2020 Huawei Device Co., Ltd.
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+import("//build/lite/config/component/lite_component.gni")
+
+shared_library("cust") {
+  sources = [ "src/cust_utils.c" ]
+
+  include_dirs = [
+    "//base/global/cust_lite/interfaces/innerkits/include",
+    "//third_party/bounds_checking_function/include",
+  ]
+
+  deps = [ "//third_party/bounds_checking_function:libsec_shared" ]
+}
+
+lite_component("global_cust_lite") {
+  features = [ ":cust" ]
+}
diff --git a/base/global/cust_lite/frameworks/cust_lite/src/cust_utils.c b/base/global/cust_lite/frameworks/cust_lite/src/cust_utils.c
new file mode 100755
index 00000000..f4cc2244
--- /dev/null
+++ b/base/global/cust_lite/frameworks/cust_lite/src/cust_utils.c
@@ -0,0 +1,142 @@
+/*
+ * Copyright (c) 2020 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "cust_utils.h"
+
+#include <securec.h>
+#include <unistd.h>
+
+void FreeCfgFiles(CfgFiles *res)
+{
+    if (res == NULL) {
+        return;
+    }
+    for (size_t i = 0; i < MAX_CFG_POLICY_DIRS_CNT; i++) {
+        if (res->paths[i] != NULL) {
+            free(res->paths[i]);
+            res->paths[i] = NULL;
+        }
+    }
+    free(res);
+}
+
+void FreeCfgDirList(CfgDir *res)
+{
+    if (res == NULL) {
+        return;
+    }
+    if (res->realPolicyValue != NULL) {
+        free(res->realPolicyValue);
+        res->realPolicyValue = NULL;
+    }
+    free(res);
+}
+
+static void GetCfgDirRealPolicyValue(CfgDir *res)
+{
+    if (res == NULL) {
+        return;
+    }
+    res->realPolicyValue = strdup("/system/res:/user/data/ecota");
+}
+
+char *GetOneCfgFile(const char *pathSuffix, int type, char *buf, unsigned int bufLength)
+{
+    if (pathSuffix == NULL || buf == NULL || bufLength < MAX_PATH_LEN) {
+        return NULL;
+    }
+    *buf = '\0';
+    CfgDir *dirs = GetCfgDirListType(type);
+    if (dirs == NULL) {
+        return NULL;
+    }
+    for (size_t i = MAX_CFG_POLICY_DIRS_CNT; i > 0; i--) {
+        if (dirs->paths[i - 1] == NULL) {
+            continue;
+        }
+        if (snprintf_s(buf, bufLength, bufLength - 1, "%s/%s", dirs->paths[i - 1], pathSuffix) == -1) {
+            *buf = '\0';
+            continue;
+        }
+        if (access(buf, F_OK) == 0) {
+            break;
+        }
+        *buf = '\0';
+    }
+    FreeCfgDirList(dirs);
+    return (*buf != '\0') ? buf : NULL;
+}
+
+CfgFiles *GetCfgFiles(const char *pathSuffix, int type)
+{
+    if (pathSuffix == NULL) {
+        return NULL;
+    }
+    char buf[MAX_PATH_LEN];
+    CfgDir *dirs = GetCfgDirListType(type);
+    if (dirs == NULL) {
+        return NULL;
+    }
+    CfgFiles *files = (CfgFiles *)(malloc(sizeof(CfgFiles)));
+    if (files == NULL) {
+        FreeCfgDirList(dirs);
+        return NULL;
+    }
+    (void)memset_s(files, sizeof(CfgFiles), 0, sizeof(CfgFiles));
+    int j = 0;
+    for (size_t i = 0; i < MAX_CFG_POLICY_DIRS_CNT; i++) {
+        if (dirs->paths[i] == NULL) {
+            continue;
+        }
+        if (snprintf_s(buf, MAX_PATH_LEN, MAX_PATH_LEN - 1, "%s/%s", dirs->paths[i], pathSuffix) == -1) {
+            continue;
+        }
+        if (access(buf, F_OK) == 0) {
+            files->paths[j++] = strdup(buf);
+        }
+    }
+    FreeCfgDirList(dirs);
+    return files;
+}
+
+CfgDir *GetCfgDirListType(int type)
+{
+    CfgDir *res = (CfgDir *)(malloc(sizeof(CfgDir)));
+    if (res == NULL) {
+        return NULL;
+    }
+    (void)memset_s(res, sizeof(CfgDir), 0, sizeof(CfgDir));
+    GetCfgDirRealPolicyValue(res);
+    char *next = res->realPolicyValue;
+    if (next == NULL) {
+        free(res);
+        return NULL;
+    }
+    for (size_t i = 0; i < MAX_CFG_POLICY_DIRS_CNT; i++) {
+        res->paths[i] = next;
+        next = strchr(next, ':');
+        if (next == NULL) {
+            break;
+        }
+        *next = 0;
+        next += 1;
+    }
+    return res;
+}
+
+CfgDir *GetCfgDirList(void)
+{
+    return GetCfgDirListType(CUST_TYPE_CONFIG);
+}
diff --git a/base/global/cust_lite/frameworks/cust_lite/test/BUILD.gn b/base/global/cust_lite/frameworks/cust_lite/test/BUILD.gn
new file mode 100755
index 00000000..777074e3
--- /dev/null
+++ b/base/global/cust_lite/frameworks/cust_lite/test/BUILD.gn
@@ -0,0 +1,32 @@
+# Copyright (c) 2020 Huawei Device Co., Ltd.
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+import("//build/lite/config/component/lite_component.gni")
+import("//build/lite/config/test.gni")
+
+unittest("CustUtilsTest") {
+  output_extension = "bin"
+
+  sources = [ "unittest/lite/common/cust_utils_test.cpp" ]
+
+  include_dirs = [
+    "unittest/lite/common",
+    "//base/global/cust_lite/interfaces/innerkits/include",
+  ]
+
+  deps = [ "//base/global/cust_lite/frameworks/cust_lite:cust" ]
+}
+
+group("unittest") {
+  deps = [ ":CustUtilsTest" ]
+}
diff --git a/base/global/cust_lite/frameworks/cust_lite/test/unittest/lite/common/cust_utils_test.cpp b/base/global/cust_lite/frameworks/cust_lite/test/unittest/lite/common/cust_utils_test.cpp
new file mode 100755
index 00000000..7e59cddf
--- /dev/null
+++ b/base/global/cust_lite/frameworks/cust_lite/test/unittest/lite/common/cust_utils_test.cpp
@@ -0,0 +1,131 @@
+/*
+ * Copyright (c) 2020 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "cust_utils_test.h"
+
+#include <gtest/gtest.h>
+
+#include "cust_utils.h"
+
+using namespace testing::ext;
+
+namespace OHOS {
+class CustUtilsTest : public testing::Test {
+};
+
+bool TestGetCfgFile(const char *testPathSuffix)
+{
+    CfgFiles *cfgFiles = GetCfgFiles(testPathSuffix, CUST_TYPE_CONFIG);
+    bool flag = false;
+    for (size_t i = 0; i < MAX_CFG_POLICY_DIRS_CNT; i++) {
+        char *filePath = cfgFiles->paths[i];
+        if (filePath && *filePath != '\0') {
+            std::cout << "filePath: " << filePath << std::endl;
+            flag = true;
+        }
+    }
+    char buf[MAX_PATH_LEN];
+    char *filePath = GetOneCfgFile(testPathSuffix, CUST_TYPE_CONFIG, buf, MAX_PATH_LEN);
+    if (filePath && *filePath != '\0') {
+        std::cout << "one filePath: " << filePath << std::endl;
+        flag = flag && true;
+    }
+    return flag;
+}
+
+/**
+ * @tc.name: CustUtilsFuncTest001
+ * @tc.desc: Test GetOneCfgFile & GetCfgFiles function, none file case.
+ * @tc.type: FUNC
+ */
+HWTEST_F(CustUtilsTest, CustUtilsFuncTest001, TestSize.Level1)
+{
+    const char *testPathSuffix = "none.xml";
+    EXPECT_FALSE(TestGetCfgFile(testPathSuffix));
+}
+
+/**
+ * @tc.name: CustUtilsFuncTest002
+ * @tc.desc: Test GetOneCfgFile & GetCfgFiles function, system file case.
+ * @tc.type: FUNC
+ */
+HWTEST_F(CustUtilsTest, CustUtilsFuncTest002, TestSize.Level1)
+{
+    const char *testPathSuffix = "system.xml";
+    EXPECT_TRUE(TestGetCfgFile(testPathSuffix));
+}
+
+/**
+ * @tc.name: CustUtilsFuncTest003
+ * @tc.desc: Test GetOneCfgFile & GetCfgFiles function, user file case.
+ * @tc.type: FUNC
+ */
+HWTEST_F(CustUtilsTest, CustUtilsFuncTest003, TestSize.Level1)
+{
+    const char *testPathSuffix = "user.xml";
+    EXPECT_TRUE(TestGetCfgFile(testPathSuffix));
+}
+
+/**
+ * @tc.name: CustUtilsFuncTest004
+ * @tc.desc: Test GetOneCfgFile & GetCfgFiles function, both files case.
+ * @tc.type: FUNC
+ */
+HWTEST_F(CustUtilsTest, CustUtilsFuncTest004, TestSize.Level1)
+{
+    const char *testPathSuffix = "both.xml";
+    EXPECT_TRUE(TestGetCfgFile(testPathSuffix));
+}
+
+/**
+ * @tc.name: CustUtilsFuncTest005
+ * @tc.desc: Test struct CfgDir *GetCfgDirListType(int type) function.
+ * @tc.type: FUNC
+ */
+HWTEST_F(CustUtilsTest, CustUtilsFuncTest005, TestSize.Level1)
+{
+    CfgDir *cfgDir = GetCfgDirListType(CUST_TYPE_RFU);
+    EXPECT_TRUE(cfgDir != NULL);
+    bool flag = false;
+    for (size_t i = 0; i < MAX_CFG_POLICY_DIRS_CNT; i++) {
+        char *filePath = cfgDir->paths[i];
+        if (filePath && *filePath != '\0') {
+            std::cout << "filePath: " << filePath << std::endl;
+            flag = true;
+        }
+    }
+    EXPECT_TRUE(flag);
+}
+
+/**
+ * @tc.name: CustUtilsFuncTest006
+ * @tc.desc: Test struct CfgDir *GetCfgDirList(void) function.
+ * @tc.type: FUNC
+ */
+HWTEST_F(CustUtilsTest, CustUtilsFuncTest006, TestSize.Level1)
+{
+    CfgDir *cfgDir = GetCfgDirList();
+    EXPECT_TRUE(cfgDir != NULL);
+    bool flag = false;
+    for (size_t i = 0; i < MAX_CFG_POLICY_DIRS_CNT; i++) {
+        char *filePath = cfgDir->paths[i];
+        if (filePath && *filePath != '\0') {
+            std::cout << "filePath: " << filePath << std::endl;
+            flag = true;
+        }
+    }
+    EXPECT_TRUE(flag);
+}
+} // namespace OHOS
diff --git a/base/global/cust_lite/frameworks/cust_lite/test/unittest/lite/common/cust_utils_test.h b/base/global/cust_lite/frameworks/cust_lite/test/unittest/lite/common/cust_utils_test.h
new file mode 100755
index 00000000..f274a738
--- /dev/null
+++ b/base/global/cust_lite/frameworks/cust_lite/test/unittest/lite/common/cust_utils_test.h
@@ -0,0 +1,26 @@
+/*
+ * Copyright (c) 2020 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef GLOBAL_CUST_UTILS_TEST_H
+#define GLOBAL_CUST_UTILS_TEST_H
+
+int CustUtilsFuncTest001();
+int CustUtilsFuncTest002();
+int CustUtilsFuncTest003();
+int CustUtilsFuncTest004();
+int CustUtilsFuncTest005();
+int CustUtilsFuncTest006();
+
+#endif
diff --git a/base/global/cust_lite/interfaces/innerkits/include/cust_utils.h b/base/global/cust_lite/interfaces/innerkits/include/cust_utils.h
new file mode 100755
index 00000000..0b0981ff
--- /dev/null
+++ b/base/global/cust_lite/interfaces/innerkits/include/cust_utils.h
@@ -0,0 +1,86 @@
+/*
+ * Copyright (c) 2020 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef GLOBAL_CUST_UTILS_H
+#define GLOBAL_CUST_UTILS_H
+
+// max number of directories
+#define MAX_CFG_POLICY_DIRS_CNT 32
+
+#ifdef __cplusplus
+#if __cplusplus
+extern "C" {
+#endif
+#endif // __cplusplus
+
+// for common configs
+const unsigned int CUST_TYPE_CONFIG = 0;
+// for future use
+const unsigned int CUST_TYPE_RFU = 1;
+// max length of a filepath
+const unsigned int MAX_PATH_LEN = 128;
+
+// Config Files
+struct CfgFiles {
+    char *paths[MAX_CFG_POLICY_DIRS_CNT];
+};
+
+// Config Directories
+struct CfgDir {
+    char *paths[MAX_CFG_POLICY_DIRS_CNT];
+    char *realPolicyValue;
+};
+
+typedef struct CfgFiles CfgFiles;
+typedef struct CfgDir CfgDir;
+
+// free struct CfgFiles allocated by GetCfgFiles()
+void FreeCfgFiles(CfgFiles *res);
+
+// free struct CfgDir allocated by GetCfgDirList()
+void FreeCfgDirList(CfgDir *res);
+
+// get the highest priority config file
+// pathSuffixStr: the relative path of the config file, e.g. "xml/config.xml"
+// type: CUST_TYPE_CONFIG = 0 for common configs, CUST_TYPE_RFU = 1 for future use
+// buf: recommended buffer length is MAX_PATH_LEN
+// return: path of the highest priority config file, return '\0' when such a file is not found
+char *GetOneCfgFile(const char *pathSuffix, int type, char *buf, unsigned int bufLength);
+
+// get config files, ordered by priority from low to high
+// pathSuffixStr: the relative path of the config file, e.g. "xml/config.xml"
+// type: CUST_TYPE_CONFIG = 0 for common configs, CUST_TYPE_RFU = 1 for future use
+// return: paths of config files
+// CAUTION: please use FreeCfgFiles() to avoid memory leak.
+CfgFiles *GetCfgFiles(const char *pathSuffix, int type);
+
+// get config directories, ordered by priority from low to high
+// type: CUST_TYPE_CONFIG = 0 for common configs, CUST_TYPE_RFU = 1 for future use
+// return: paths of config directories
+// CAUTION: please use FreeCfgDirList() to avoid memory leak.
+CfgDir *GetCfgDirListType(int type);
+
+// get config directories, ordered by priority from low to high
+// return: paths of config directories
+// CAUTION: please use FreeCfgDirList() to avoid memory leak.
+CfgDir *GetCfgDirList(void);
+
+#ifdef __cplusplus
+#if __cplusplus
+}
+#endif
+#endif // __cplusplus
+
+#endif // GLOBAL_CUST_UTILS_H
diff --git a/base/global/i18n_lite/LICENSE b/base/global/i18n_lite/LICENSE
new file mode 100755
index 00000000..4947287f
--- /dev/null
+++ b/base/global/i18n_lite/LICENSE
@@ -0,0 +1,177 @@
+
+                                 Apache License
+                           Version 2.0, January 2004
+                        http://www.apache.org/licenses/
+
+   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
+
+   1. Definitions.
+
+      "License" shall mean the terms and conditions for use, reproduction,
+      and distribution as defined by Sections 1 through 9 of this document.
+
+      "Licensor" shall mean the copyright owner or entity authorized by
+      the copyright owner that is granting the License.
+
+      "Legal Entity" shall mean the union of the acting entity and all
+      other entities that control, are controlled by, or are under common
+      control with that entity. For the purposes of this definition,
+      "control" means (i) the power, direct or indirect, to cause the
+      direction or management of such entity, whether by contract or
+      otherwise, or (ii) ownership of fifty percent (50%) or more of the
+      outstanding shares, or (iii) beneficial ownership of such entity.
+
+      "You" (or "Your") shall mean an individual or Legal Entity
+      exercising permissions granted by this License.
+
+      "Source" form shall mean the preferred form for making modifications,
+      including but not limited to software source code, documentation
+      source, and configuration files.
+
+      "Object" form shall mean any form resulting from mechanical
+      transformation or translation of a Source form, including but
+      not limited to compiled object code, generated documentation,
+      and conversions to other media types.
+
+      "Work" shall mean the work of authorship, whether in Source or
+      Object form, made available under the License, as indicated by a
+      copyright notice that is included in or attached to the work
+      (an example is provided in the Appendix below).
+
+      "Derivative Works" shall mean any work, whether in Source or Object
+      form, that is based on (or derived from) the Work and for which the
+      editorial revisions, annotations, elaborations, or other modifications
+      represent, as a whole, an original work of authorship. For the purposes
+      of this License, Derivative Works shall not include works that remain
+      separable from, or merely link (or bind by name) to the interfaces of,
+      the Work and Derivative Works thereof.
+
+      "Contribution" shall mean any work of authorship, including
+      the original version of the Work and any modifications or additions
+      to that Work or Derivative Works thereof, that is intentionally
+      submitted to Licensor for inclusion in the Work by the copyright owner
+      or by an individual or Legal Entity authorized to submit on behalf of
+      the copyright owner. For the purposes of this definition, "submitted"
+      means any form of electronic, verbal, or written communication sent
+      to the Licensor or its representatives, including but not limited to
+      communication on electronic mailing lists, source code control systems,
+      and issue tracking systems that are managed by, or on behalf of, the
+      Licensor for the purpose of discussing and improving the Work, but
+      excluding communication that is conspicuously marked or otherwise
+      designated in writing by the copyright owner as "Not a Contribution."
+
+      "Contributor" shall mean Licensor and any individual or Legal Entity
+      on behalf of whom a Contribution has been received by Licensor and
+      subsequently incorporated within the Work.
+
+   2. Grant of Copyright License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      copyright license to reproduce, prepare Derivative Works of,
+      publicly display, publicly perform, sublicense, and distribute the
+      Work and such Derivative Works in Source or Object form.
+
+   3. Grant of Patent License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      (except as stated in this section) patent license to make, have made,
+      use, offer to sell, sell, import, and otherwise transfer the Work,
+      where such license applies only to those patent claims licensable
+      by such Contributor that are necessarily infringed by their
+      Contribution(s) alone or by combination of their Contribution(s)
+      with the Work to which such Contribution(s) was submitted. If You
+      institute patent litigation against any entity (including a
+      cross-claim or counterclaim in a lawsuit) alleging that the Work
+      or a Contribution incorporated within the Work constitutes direct
+      or contributory patent infringement, then any patent licenses
+      granted to You under this License for that Work shall terminate
+      as of the date such litigation is filed.
+
+   4. Redistribution. You may reproduce and distribute copies of the
+      Work or Derivative Works thereof in any medium, with or without
+      modifications, and in Source or Object form, provided that You
+      meet the following conditions:
+
+      (a) You must give any other recipients of the Work or
+          Derivative Works a copy of this License; and
+
+      (b) You must cause any modified files to carry prominent notices
+          stating that You changed the files; and
+
+      (c) You must retain, in the Source form of any Derivative Works
+          that You distribute, all copyright, patent, trademark, and
+          attribution notices from the Source form of the Work,
+          excluding those notices that do not pertain to any part of
+          the Derivative Works; and
+
+      (d) If the Work includes a "NOTICE" text file as part of its
+          distribution, then any Derivative Works that You distribute must
+          include a readable copy of the attribution notices contained
+          within such NOTICE file, excluding those notices that do not
+          pertain to any part of the Derivative Works, in at least one
+          of the following places: within a NOTICE text file distributed
+          as part of the Derivative Works; within the Source form or
+          documentation, if provided along with the Derivative Works; or,
+          within a display generated by the Derivative Works, if and
+          wherever such third-party notices normally appear. The contents
+          of the NOTICE file are for informational purposes only and
+          do not modify the License. You may add Your own attribution
+          notices within Derivative Works that You distribute, alongside
+          or as an addendum to the NOTICE text from the Work, provided
+          that such additional attribution notices cannot be construed
+          as modifying the License.
+
+      You may add Your own copyright statement to Your modifications and
+      may provide additional or different license terms and conditions
+      for use, reproduction, or distribution of Your modifications, or
+      for any such Derivative Works as a whole, provided Your use,
+      reproduction, and distribution of the Work otherwise complies with
+      the conditions stated in this License.
+
+   5. Submission of Contributions. Unless You explicitly state otherwise,
+      any Contribution intentionally submitted for inclusion in the Work
+      by You to the Licensor shall be under the terms and conditions of
+      this License, without any additional terms or conditions.
+      Notwithstanding the above, nothing herein shall supersede or modify
+      the terms of any separate license agreement you may have executed
+      with Licensor regarding such Contributions.
+
+   6. Trademarks. This License does not grant permission to use the trade
+      names, trademarks, service marks, or product names of the Licensor,
+      except as required for reasonable and customary use in describing the
+      origin of the Work and reproducing the content of the NOTICE file.
+
+   7. Disclaimer of Warranty. Unless required by applicable law or
+      agreed to in writing, Licensor provides the Work (and each
+      Contributor provides its Contributions) on an "AS IS" BASIS,
+      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
+      implied, including, without limitation, any warranties or conditions
+      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
+      PARTICULAR PURPOSE. You are solely responsible for determining the
+      appropriateness of using or redistributing the Work and assume any
+      risks associated with Your exercise of permissions under this License.
+
+   8. Limitation of Liability. In no event and under no legal theory,
+      whether in tort (including negligence), contract, or otherwise,
+      unless required by applicable law (such as deliberate and grossly
+      negligent acts) or agreed to in writing, shall any Contributor be
+      liable to You for damages, including any direct, indirect, special,
+      incidental, or consequential damages of any character arising as a
+      result of this License or out of the use or inability to use the
+      Work (including but not limited to damages for loss of goodwill,
+      work stoppage, computer failure or malfunction, or any and all
+      other commercial damages or losses), even if such Contributor
+      has been advised of the possibility of such damages.
+
+   9. Accepting Warranty or Additional Liability. While redistributing
+      the Work or Derivative Works thereof, You may choose to offer,
+      and charge a fee for, acceptance of support, warranty, indemnity,
+      or other liability obligations and/or rights consistent with this
+      License. However, in accepting such obligations, You may act only
+      on Your own behalf and on Your sole responsibility, not on behalf
+      of any other Contributor, and only if You agree to indemnify,
+      defend, and hold each Contributor harmless for any liability
+      incurred by, or claims asserted against, such Contributor by reason
+      of your accepting any such warranty or additional liability.
+
+   END OF TERMS AND CONDITIONS
\ No newline at end of file
diff --git a/base/global/i18n_lite/README.md b/base/global/i18n_lite/README.md
new file mode 100755
index 00000000..d0b61b20
--- /dev/null
+++ b/base/global/i18n_lite/README.md
@@ -0,0 +1,468 @@
+# i18n<a name="EN-US_TOPIC_0000001078056612"></a>
+
+-   [Overview](#section11660541593)
+-   [Directory Structure](#section1464106163817)
+-   [Constraints](#section568761318105)
+-   [Usage](#section894511013511)
+-   [Repositories Involved](#section15583142420413)
+-   [Appendix](#section56601824115)
+
+## Overview<a name="section11660541593"></a>
+
+The internationalization module, namely, i18n, provides i18n capabilities such as formatting the date and time, obtaining the month and week names, and formatting numbers.
+
+## Directory Structure<a name="section1464106163817"></a>
+
+The directory structure for the i18n module is as follows:
+
+```
+/base/global/
+├── i18n_lite                 # Code repository for the i18n framework
+│   ├──  frameworks           # Core code of the i18n framework
+│   │   ├── i18n              # i18n module
+│   │   │   ├── include       # Header files of external APIs
+│   │   │   ├── src           # Implementation code
+│   │   │   └── test          # Test cases
+│   ├──  interfaces           # i18n framework APIs
+│   │   ├── kits              # Application APIs
+│   │   │   ├── i18n          # C/C++ i18n APIs
+│   │   │   └── js            # C/C++ support for JavaScript APIs
+```
+
+## Constraints<a name="section568761318105"></a>
+
+**Programming language**: C/C++
+
+**Supported languages**: See the Appendix.
+
+## Usage<a name="section894511013511"></a>
+
+1. Change the date and time formats \(such as the sequence of year, month, and day, month and week names, and 12-hour or 24-hour system\) following the system settings to adapt to the cultural habits of users in different locales. For details, see the API reference. The sample code is as follows:
+
+```
+#include "date_time_format.h"
+using namespace OHOS::I18N
+
+LocaleInfo locale("zh", "Hans", "CN"); // Obtain the locale.
+DateTimeFormat formatter(AvailableDateTimeFormatPattern::HOUR_MINUTE, locale); // Initialize the example date and time and obtain the data required to format the date and time for the specified locale. The first parameter specifies the formatting pattern. For details about the supported formatting patterns, see the types.h file.
+time_t time = 3600 * 3; // Obtain the time to be formatted.
+std::string zoneInfo = "+1:00"; // Set the time zone to be UTC+0 plus 1 hour.
+std::string out; // Store the formatting result in the out field.
+Ii8nStatus status = Ii8nStatus::ISUCCESS;
+formatter.Format(time, zoneInfo, out, status); // Check the status field for the formatting result.
+
+output:  4:00
+```
+
+2.  Change the number format \(such as the numeral system, grouping, decimal point, and percent sign\) following the system settings to adapt to the cultural habits of users in different locales. For details, see the API reference. The sample code is as follows:
+
+```
+#include "number_format.h"
+using namespace OHOS::I18N
+
+LocaleInfo locale("en", "US");
+int status = 0;
+NumberFormat formatter(locale, status); // Initialize the number formatting instance and obtain the data required to format numbers for the specified locale. The value of status indicates the initialization result. If the value is 1, the initialization has failed. 
+int num = 1234
+std::string out = formatter.Format(num, status); // Check the status field for the initialization result.
+
+output: 1,234
+```
+
+3. Obtain the month and week names in the format for the specified locale. The sample code is as follows:
+
+```
+#include "date_time_format.h"
+using namespace OHOS::I18N
+
+LocaleInfo locale("en", "US"); // Obtain the locale.
+DateTimeFormat formatter(AvailableDateTimeFormatPattern::HOUR_MINUTE, locale);
+std::string month = formatter.GetMonthName(0, DateTimeDataType::FORMAT_WIDE); //: Obtain the month name in the wide format.
+
+output: January
+```
+
+4. Change the plural rule type following the application's language to adapt to the cultural habits of users.
+
+Languages vary in how they handle plurals of nouns. For example, there can be "one apple" or "two apples" in English. Singular and plural forms of nouns are generally classified into six plural rule types: zero, one, two, a few, many, and others. Supported plural rule types vary depending on languages. For example, Chinese supports only  **others**, English supports  **one**  and  **others**, and Arabic supports all the six plural rule types. The sample code is as follows:
+
+```
+#include "plural_format.h"
+using namespace OHOS::I18N
+
+LocaleInfo locale("en", "US"); // Obtain the locale.
+Ii8nStatus status = Ii8nStatus::ISUCCESS;
+PluralFormatter formatter = PluralFormatter(locale, status); // Check the status field for the i18n status of the locale.
+int out = formatter.GetPluralFormatter(1, status); // Check the status field for the plural rule type.
+
+output: 1 // Value 1 indicates plural rule type 1.
+```
+
+## Repositories Involved<a name="section15583142420413"></a>
+
+[Globalization subsystem](https://gitee.com/openharmony/docs/blob/master/en/readme/globalization.md)
+
+[global\_resmgr\_lite](https://gitee.com/openharmony/global_resmgr_lite/blob/master/README.md)
+
+global\_i18n\_lite
+
+[global\_cust\_lite](https://gitee.com/openharmony/global_cust_lite/blob/master/README.md)
+
+## Appendix<a name="section56601824115"></a>
+
+Supported languages
+
+<a name="table1155163353316"></a>
+<table><thead align="left"><tr id="row12551103373310"><th class="cellrowborder" valign="top" width="16.666666666666664%" id="mcps1.1.7.1.1"><p id="p2551233113320"><a name="p2551233113320"></a><a name="p2551233113320"></a>Code</p>
+</th>
+<th class="cellrowborder" valign="top" width="16.666666666666664%" id="mcps1.1.7.1.2"><p id="p4551033123313"><a name="p4551033123313"></a><a name="p4551033123313"></a>Name of Language</p>
+</th>
+<th class="cellrowborder" valign="top" width="16.666666666666664%" id="mcps1.1.7.1.3"><p id="p16551113323317"><a name="p16551113323317"></a><a name="p16551113323317"></a>Code</p>
+</th>
+<th class="cellrowborder" valign="top" width="16.666666666666664%" id="mcps1.1.7.1.4"><p id="p5551113317339"><a name="p5551113317339"></a><a name="p5551113317339"></a>Name of Language</p>
+</th>
+<th class="cellrowborder" valign="top" width="16.666666666666664%" id="mcps1.1.7.1.5"><p id="p9551133383310"><a name="p9551133383310"></a><a name="p9551133383310"></a>Code</p>
+</th>
+<th class="cellrowborder" valign="top" width="16.666666666666664%" id="mcps1.1.7.1.6"><p id="p25511633143312"><a name="p25511633143312"></a><a name="p25511633143312"></a>Name of Language</p>
+</th>
+</tr>
+</thead>
+<tbody><tr id="row1155119337333"><td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.1 "><p id="p1642315461918"><a name="p1642315461918"></a><a name="p1642315461918"></a>am_ET</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.2 "><p id="p842312418199"><a name="p842312418199"></a><a name="p842312418199"></a>Amharic</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.3 "><p id="p15959151711194"><a name="p15959151711194"></a><a name="p15959151711194"></a>hr_HR</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.4 "><p id="p795921716199"><a name="p795921716199"></a><a name="p795921716199"></a>Croatian</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.5 "><p id="p18915730141911"><a name="p18915730141911"></a><a name="p18915730141911"></a>or-IN</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.6 "><p id="p4915530181918"><a name="p4915530181918"></a><a name="p4915530181918"></a>Odia</p>
+</td>
+</tr>
+<tr id="row8552833113319"><td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.1 "><p id="p342314171912"><a name="p342314171912"></a><a name="p342314171912"></a>ar_EG</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.2 "><p id="p1142312413190"><a name="p1142312413190"></a><a name="p1142312413190"></a>Arabic</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.3 "><p id="p1959181771915"><a name="p1959181771915"></a><a name="p1959181771915"></a>hu_HU</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.4 "><p id="p295910172195"><a name="p295910172195"></a><a name="p295910172195"></a>Hungarian</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.5 "><p id="p1915930121910"><a name="p1915930121910"></a><a name="p1915930121910"></a>pa_IN</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.6 "><p id="p491513302195"><a name="p491513302195"></a><a name="p491513302195"></a>Punjabi, Panjabi</p>
+</td>
+</tr>
+<tr id="row155203333310"><td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.1 "><p id="p144235415191"><a name="p144235415191"></a><a name="p144235415191"></a>as_IN</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.2 "><p id="p54231410192"><a name="p54231410192"></a><a name="p54231410192"></a>Assamese</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.3 "><p id="p1295991711198"><a name="p1295991711198"></a><a name="p1295991711198"></a>in_ID</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.4 "><p id="p99591417111911"><a name="p99591417111911"></a><a name="p99591417111911"></a>Indonesian</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.5 "><p id="p791516304193"><a name="p791516304193"></a><a name="p791516304193"></a>pl_PL</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.6 "><p id="p10915230161914"><a name="p10915230161914"></a><a name="p10915230161914"></a>Polish</p>
+</td>
+</tr>
+<tr id="row15531233183310"><td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.1 "><p id="p144232481912"><a name="p144232481912"></a><a name="p144232481912"></a>az_AZ</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.2 "><p id="p842316410198"><a name="p842316410198"></a><a name="p842316410198"></a>Azerbaijani</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.3 "><p id="p13959171701919"><a name="p13959171701919"></a><a name="p13959171701919"></a>it_IT</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.4 "><p id="p1895961781916"><a name="p1895961781916"></a><a name="p1895961781916"></a>Italian</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.5 "><p id="p16915133071912"><a name="p16915133071912"></a><a name="p16915133071912"></a>pt_BR</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.6 "><p id="p5915130131912"><a name="p5915130131912"></a><a name="p5915130131912"></a>Portuguese (Brazil)</p>
+</td>
+</tr>
+<tr id="row755353313317"><td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.1 "><p id="p1042324121912"><a name="p1042324121912"></a><a name="p1042324121912"></a>be_BY</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.2 "><p id="p154245441911"><a name="p154245441911"></a><a name="p154245441911"></a>Belarusian</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.3 "><p id="p495931741915"><a name="p495931741915"></a><a name="p495931741915"></a>iw_IL</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.4 "><p id="p1495914176198"><a name="p1495914176198"></a><a name="p1495914176198"></a>Hebrew</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.5 "><p id="p7916193016198"><a name="p7916193016198"></a><a name="p7916193016198"></a>pt_PT</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.6 "><p id="p1291683021916"><a name="p1291683021916"></a><a name="p1291683021916"></a>Portuguese (Europe)</p>
+</td>
+</tr>
+<tr id="row10553113311338"><td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.1 "><p id="p242434121918"><a name="p242434121918"></a><a name="p242434121918"></a>bg_BG</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.2 "><p id="p1442410411193"><a name="p1442410411193"></a><a name="p1442410411193"></a>Bulgarian</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.3 "><p id="p10959191713197"><a name="p10959191713197"></a><a name="p10959191713197"></a>ja_JP</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.4 "><p id="p149591317131911"><a name="p149591317131911"></a><a name="p149591317131911"></a>Japanese</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.5 "><p id="p209167305198"><a name="p209167305198"></a><a name="p209167305198"></a>ro_RO</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.6 "><p id="p15916430181914"><a name="p15916430181914"></a><a name="p15916430181914"></a>Romanian; Moldavian; Moldovan</p>
+</td>
+</tr>
+<tr id="row1255311336338"><td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.1 "><p id="p442417412197"><a name="p442417412197"></a><a name="p442417412197"></a>bn_BD</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.2 "><p id="p6424144195"><a name="p6424144195"></a><a name="p6424144195"></a>Bengali</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.3 "><p id="p89597175199"><a name="p89597175199"></a><a name="p89597175199"></a>jv_ID</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.4 "><p id="p895981711191"><a name="p895981711191"></a><a name="p895981711191"></a>Javanese</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.5 "><p id="p139161130201917"><a name="p139161130201917"></a><a name="p139161130201917"></a>ru_RU</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.6 "><p id="p991615309194"><a name="p991615309194"></a><a name="p991615309194"></a>Russian</p>
+</td>
+</tr>
+<tr id="row10554103373313"><td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.1 "><p id="p19424164191912"><a name="p19424164191912"></a><a name="p19424164191912"></a>bo_CN</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.2 "><p id="p7424944194"><a name="p7424944194"></a><a name="p7424944194"></a>Tibetan</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.3 "><p id="p995991791915"><a name="p995991791915"></a><a name="p995991791915"></a>ka_GE</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.4 "><p id="p1395951761911"><a name="p1395951761911"></a><a name="p1395951761911"></a>Georgian</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.5 "><p id="p79161630131915"><a name="p79161630131915"></a><a name="p79161630131915"></a>si_LK</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.6 "><p id="p1791613016194"><a name="p1791613016194"></a><a name="p1791613016194"></a>Sinhala</p>
+</td>
+</tr>
+<tr id="row3554113383312"><td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.1 "><p id="p1642419414190"><a name="p1642419414190"></a><a name="p1642419414190"></a>bs_BA</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.2 "><p id="p1442424191913"><a name="p1442424191913"></a><a name="p1442424191913"></a>Bosnian</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.3 "><p id="p69605176198"><a name="p69605176198"></a><a name="p69605176198"></a>kk_KZ</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.4 "><p id="p1696051717196"><a name="p1696051717196"></a><a name="p1696051717196"></a>Kazakh (Cyrillic)</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.5 "><p id="p10916163010192"><a name="p10916163010192"></a><a name="p10916163010192"></a>sk_SK</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.6 "><p id="p791618306194"><a name="p791618306194"></a><a name="p791618306194"></a>Slovak</p>
+</td>
+</tr>
+<tr id="row055420336334"><td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.1 "><p id="p164243412193"><a name="p164243412193"></a><a name="p164243412193"></a>ca_ES</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.2 "><p id="p1742484101914"><a name="p1742484101914"></a><a name="p1742484101914"></a>Catalan</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.3 "><p id="p20960191717199"><a name="p20960191717199"></a><a name="p20960191717199"></a>km_KH</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.4 "><p id="p89601517121919"><a name="p89601517121919"></a><a name="p89601517121919"></a>Khmer</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.5 "><p id="p129161930151919"><a name="p129161930151919"></a><a name="p129161930151919"></a>sl_SI</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.6 "><p id="p119161130131916"><a name="p119161130131916"></a><a name="p119161130131916"></a>Slovenian</p>
+</td>
+</tr>
+<tr id="row455463316336"><td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.1 "><p id="p204245415194"><a name="p204245415194"></a><a name="p204245415194"></a>cs_CZ</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.2 "><p id="p114240481913"><a name="p114240481913"></a><a name="p114240481913"></a>Czech</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.3 "><p id="p18960181712197"><a name="p18960181712197"></a><a name="p18960181712197"></a>kn_IN</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.4 "><p id="p15960181713190"><a name="p15960181713190"></a><a name="p15960181713190"></a>Kannada</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.5 "><p id="p0916153010199"><a name="p0916153010199"></a><a name="p0916153010199"></a>sr_Latn_RS sr_RS</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.6 "><p id="p9916103014196"><a name="p9916103014196"></a><a name="p9916103014196"></a>Serbian (Latin)</p>
+</td>
+</tr>
+<tr id="row155523315331"><td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.1 "><p id="p4425134141916"><a name="p4425134141916"></a><a name="p4425134141916"></a>da_DK</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.2 "><p id="p5425194111910"><a name="p5425194111910"></a><a name="p5425194111910"></a>Danish</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.3 "><p id="p119601217171917"><a name="p119601217171917"></a><a name="p119601217171917"></a>ko_KR</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.4 "><p id="p7960191712191"><a name="p7960191712191"></a><a name="p7960191712191"></a>Korean</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.5 "><p id="p1691618306198"><a name="p1691618306198"></a><a name="p1691618306198"></a>sv_SE</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.6 "><p id="p89161630121916"><a name="p89161630121916"></a><a name="p89161630121916"></a>Swedish</p>
+</td>
+</tr>
+<tr id="row1355553314338"><td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.1 "><p id="p124251149199"><a name="p124251149199"></a><a name="p124251149199"></a>de_DE</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.2 "><p id="p3425648194"><a name="p3425648194"></a><a name="p3425648194"></a>German</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.3 "><p id="p179605177198"><a name="p179605177198"></a><a name="p179605177198"></a>lo_LA</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.4 "><p id="p296041781912"><a name="p296041781912"></a><a name="p296041781912"></a>Lao</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.5 "><p id="p1891615300198"><a name="p1891615300198"></a><a name="p1891615300198"></a>sw_TZ</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.6 "><p id="p29160307191"><a name="p29160307191"></a><a name="p29160307191"></a>Swahili</p>
+</td>
+</tr>
+<tr id="row855573323320"><td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.1 "><p id="p94259491916"><a name="p94259491916"></a><a name="p94259491916"></a>el_GR</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.2 "><p id="p1425849195"><a name="p1425849195"></a><a name="p1425849195"></a>Greek</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.3 "><p id="p7960111751911"><a name="p7960111751911"></a><a name="p7960111751911"></a>lt_LT</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.4 "><p id="p096015176192"><a name="p096015176192"></a><a name="p096015176192"></a>Lithuanian</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.5 "><p id="p159161230111912"><a name="p159161230111912"></a><a name="p159161230111912"></a>ta_IN</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.6 "><p id="p291653011917"><a name="p291653011917"></a><a name="p291653011917"></a>Tamil</p>
+</td>
+</tr>
+<tr id="row455517330330"><td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.1 "><p id="p1042594191916"><a name="p1042594191916"></a><a name="p1042594191916"></a>en_GB</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.2 "><p id="p34256401915"><a name="p34256401915"></a><a name="p34256401915"></a>English (UK)</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.3 "><p id="p1296071711193"><a name="p1296071711193"></a><a name="p1296071711193"></a>lv_LV</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.4 "><p id="p49601717101910"><a name="p49601717101910"></a><a name="p49601717101910"></a>Latvian</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.5 "><p id="p6916103081916"><a name="p6916103081916"></a><a name="p6916103081916"></a>te_IN</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.6 "><p id="p19916133015196"><a name="p19916133015196"></a><a name="p19916133015196"></a>Telugu</p>
+</td>
+</tr>
+<tr id="row7556143312334"><td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.1 "><p id="p1642504131918"><a name="p1642504131918"></a><a name="p1642504131918"></a>en_US</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.2 "><p id="p64259441920"><a name="p64259441920"></a><a name="p64259441920"></a>English (US)</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.3 "><p id="p18960161731910"><a name="p18960161731910"></a><a name="p18960161731910"></a>mai-Deva-IN</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.4 "><p id="p296051718193"><a name="p296051718193"></a><a name="p296051718193"></a>Maithili</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.5 "><p id="p391753011919"><a name="p391753011919"></a><a name="p391753011919"></a>th_TH</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.6 "><p id="p1291753016194"><a name="p1291753016194"></a><a name="p1291753016194"></a>Thai</p>
+</td>
+</tr>
+<tr id="row115564335332"><td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.1 "><p id="p1342534191910"><a name="p1342534191910"></a><a name="p1342534191910"></a>es_ES</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.2 "><p id="p1942518419199"><a name="p1942518419199"></a><a name="p1942518419199"></a>Spanish (Europe)</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.3 "><p id="p1696010177195"><a name="p1696010177195"></a><a name="p1696010177195"></a>mi-NZ</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.4 "><p id="p7960121718191"><a name="p7960121718191"></a><a name="p7960121718191"></a>Maori</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.5 "><p id="p1391718301197"><a name="p1391718301197"></a><a name="p1391718301197"></a>tl_PH</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.6 "><p id="p7917153081918"><a name="p7917153081918"></a><a name="p7917153081918"></a>Tagalog</p>
+</td>
+</tr>
+<tr id="row14556173314335"><td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.1 "><p id="p114251748198"><a name="p114251748198"></a><a name="p114251748198"></a>es_US</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.2 "><p id="p15425843198"><a name="p15425843198"></a><a name="p15425843198"></a>Spanish (Latin America)</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.3 "><p id="p139601917191914"><a name="p139601917191914"></a><a name="p139601917191914"></a>mk_MK</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.4 "><p id="p1496016178191"><a name="p1496016178191"></a><a name="p1496016178191"></a>Macedonian</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.5 "><p id="p9917530161919"><a name="p9917530161919"></a><a name="p9917530161919"></a>tr_TR</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.6 "><p id="p169171330171914"><a name="p169171330171914"></a><a name="p169171330171914"></a>Turkish</p>
+</td>
+</tr>
+<tr id="row15556333173313"><td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.1 "><p id="p14425645195"><a name="p14425645195"></a><a name="p14425645195"></a>et_EE</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.2 "><p id="p842513431911"><a name="p842513431911"></a><a name="p842513431911"></a>Estonian</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.3 "><p id="p896061791916"><a name="p896061791916"></a><a name="p896061791916"></a>ml_IN</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.4 "><p id="p1096018172190"><a name="p1096018172190"></a><a name="p1096018172190"></a>Malayalam</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.5 "><p id="p991743017195"><a name="p991743017195"></a><a name="p991743017195"></a>uk_UA</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.6 "><p id="p991710309199"><a name="p991710309199"></a><a name="p991710309199"></a>Ukrainian</p>
+</td>
+</tr>
+<tr id="row1855613353314"><td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.1 "><p id="p542654141917"><a name="p542654141917"></a><a name="p542654141917"></a>eu_ES</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.2 "><p id="p342613481912"><a name="p342613481912"></a><a name="p342613481912"></a>Basque</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.3 "><p id="p2096021715195"><a name="p2096021715195"></a><a name="p2096021715195"></a>mn_MN</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.4 "><p id="p1396031741915"><a name="p1396031741915"></a><a name="p1396031741915"></a>Mongolia</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.5 "><p id="p491773041913"><a name="p491773041913"></a><a name="p491773041913"></a>ur_PK</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.6 "><p id="p491753071916"><a name="p491753071916"></a><a name="p491753071916"></a>Urdu</p>
+</td>
+</tr>
+<tr id="row1355743319338"><td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.1 "><p id="p94261947191"><a name="p94261947191"></a><a name="p94261947191"></a>fa_IR</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.2 "><p id="p194262041193"><a name="p194262041193"></a><a name="p194262041193"></a>Persian</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.3 "><p id="p109611217131915"><a name="p109611217131915"></a><a name="p109611217131915"></a>mr_IN</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.4 "><p id="p1696141718197"><a name="p1696141718197"></a><a name="p1696141718197"></a>Marathi</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.5 "><p id="p2091783015192"><a name="p2091783015192"></a><a name="p2091783015192"></a>uz_UZ</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.6 "><p id="p209171730151917"><a name="p209171730151917"></a><a name="p209171730151917"></a>Uzbek</p>
+</td>
+</tr>
+<tr id="row555743317339"><td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.1 "><p id="p174262471919"><a name="p174262471919"></a><a name="p174262471919"></a>fi_FI</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.2 "><p id="p144269418197"><a name="p144269418197"></a><a name="p144269418197"></a>Finnish</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.3 "><p id="p1796161741910"><a name="p1796161741910"></a><a name="p1796161741910"></a>ms_MY</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.4 "><p id="p89611617161917"><a name="p89611617161917"></a><a name="p89611617161917"></a>Malay</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.5 "><p id="p9917193017194"><a name="p9917193017194"></a><a name="p9917193017194"></a>vi_VN</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.6 "><p id="p149178302196"><a name="p149178302196"></a><a name="p149178302196"></a>Vietnamese</p>
+</td>
+</tr>
+<tr id="row16557333153316"><td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.1 "><p id="p204269417197"><a name="p204269417197"></a><a name="p204269417197"></a>fr_FR</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.2 "><p id="p15426745195"><a name="p15426745195"></a><a name="p15426745195"></a>French</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.3 "><p id="p189611917121913"><a name="p189611917121913"></a><a name="p189611917121913"></a>my_MM my_ZG</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.4 "><p id="p79611117131910"><a name="p79611117131910"></a><a name="p79611117131910"></a>Burmese</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.5 "><p id="p12917193041917"><a name="p12917193041917"></a><a name="p12917193041917"></a>zh_CN</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.6 "><p id="p19917143071916"><a name="p19917143071916"></a><a name="p19917143071916"></a>Simplified Chinese</p>
+</td>
+</tr>
+<tr id="row1055743383312"><td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.1 "><p id="p1742674191920"><a name="p1742674191920"></a><a name="p1742674191920"></a>gl_ES</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.2 "><p id="p242619414192"><a name="p242619414192"></a><a name="p242619414192"></a>Galician</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.3 "><p id="p13961717121916"><a name="p13961717121916"></a><a name="p13961717121916"></a>nb_NO</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.4 "><p id="p2096111751916"><a name="p2096111751916"></a><a name="p2096111751916"></a>Norwegian</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.5 "><p id="p139171630101910"><a name="p139171630101910"></a><a name="p139171630101910"></a>zh_HK</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.6 "><p id="p3917330191918"><a name="p3917330191918"></a><a name="p3917330191918"></a>Traditional Chinese (Hong Kong, China)</p>
+</td>
+</tr>
+<tr id="row455873319339"><td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.1 "><p id="p34261948195"><a name="p34261948195"></a><a name="p34261948195"></a>gu_IN</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.2 "><p id="p1842616481918"><a name="p1842616481918"></a><a name="p1842616481918"></a>Gujarati</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.3 "><p id="p996181717197"><a name="p996181717197"></a><a name="p996181717197"></a>ne_NP</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.4 "><p id="p69611517101918"><a name="p69611517101918"></a><a name="p69611517101918"></a>Nepali</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.5 "><p id="p1491714309196"><a name="p1491714309196"></a><a name="p1491714309196"></a>zh_TW</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.6 "><p id="p14917163011918"><a name="p14917163011918"></a><a name="p14917163011918"></a>Traditional Chinese (Taiwan, China)</p>
+</td>
+</tr>
+<tr id="row9558833183312"><td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.1 "><p id="p134261645197"><a name="p134261645197"></a><a name="p134261645197"></a>hi_IN</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.2 "><p id="p74260415197"><a name="p74260415197"></a><a name="p74260415197"></a>Hindi</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.3 "><p id="p15961417181916"><a name="p15961417181916"></a><a name="p15961417181916"></a>nl_NL</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.4 "><p id="p89611317191919"><a name="p89611317191919"></a><a name="p89611317191919"></a>Dutch; Flemish</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.5 ">&nbsp;&nbsp;</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.6 ">&nbsp;&nbsp;</td>
+</tr>
+</tbody>
+</table>
+
diff --git a/base/global/i18n_lite/README_zh.md b/base/global/i18n_lite/README_zh.md
new file mode 100755
index 00000000..df9b55a1
--- /dev/null
+++ b/base/global/i18n_lite/README_zh.md
@@ -0,0 +1,466 @@
+# 国际化组件介绍<a name="ZH-CN_TOPIC_0000001078056612"></a>
+
+-   [简介](#section11660541593)
+-   [目录](#section1464106163817)
+-   [约束](#section568761318105)
+-   [说明](#section894511013511)
+-   [相关仓](#section15583142420413)
+-   [附录](#section56601824115)
+
+## 简介<a name="section11660541593"></a>
+
+**国际化组件**提供时间日期格式化、获取月份和星期的名称、数字格式化等国际化能力。
+
+## 目录<a name="section1464106163817"></a>
+
+国际化组件源代码目录结构如下所示：
+
+```
+/base/global/
+├── i18n_lite                 # 国际化框架代码仓
+│   ├──  frameworks           # 国际化框架核心代码
+│   │   ├── i18n              # 国际化模块
+│   │   │   ├── include       # 接口文件
+│   │   │   ├── src           # 实现代码
+│   │   │   └── test          # 测试用例
+│   ├──  interfaces           # 国际化框架接口
+│   │   ├── kits              # 应用接口
+│   │   │   ├── i18n          # C/C++国际化能力接口
+│   │   │   └── js            # javascript接口的C/C++支持
+```
+
+## 约束<a name="section568761318105"></a>
+
+**语言限制**：C/C++语言
+
+**支持范围限制**：支持的区域和语言见附录
+
+## 说明<a name="section894511013511"></a>
+
+1.提供时间日期格式化接口，使时间日期格式（如年月日顺序、月份和星期词汇、使用12或24小时制等）跟随系统设置满足不同区域用户的文化习惯。更详细的内容见API文档。示例如下：
+
+```
+#include "date_time_format.h"
+using namespace OHOS::I18N
+
+LocaleInfo locale("zh", "Hans", "CN");  // 获得区域
+DateTimeFormat formatter(AvailableDateTimeFormatPattern::HOUR_MINUTE, locale); // 初始化时间日期示例，并获取该区域时间格式化所需数据，第一个参数为时间日期格式化模板类型，所支持的模板类型见API文档types.h
+time_t time = 3600 * 3; // 所需要格式化的时间
+std::string zoneInfo = "+1:00"; // 设置时区，相对于UTC 0时区加一小时
+std::string out; // 时间日期格式化结果保存在out中
+Ii8nStatus status = Ii8nStatus::ISUCCESS;
+formatter.Format(time, zoneInfo, out, status); // 判断status状态
+
+output:  4:00
+```
+
+2.  提供数字格式化接口，使数字格式（如数字体系、数字分组、小数点、百分号等）跟随应用系统设置满足不同区域用户的文化习惯。更详细的内容见API文档。示例如下：
+
+```
+#include "number_format.h"
+using namespace OHOS::I18N
+
+LocaleInfo locale("en", "US");
+int status = 0;
+NumberFormat formatter(locale, status);  // 初始化数据格式化实例，并获取指定locale数字格式化所需数据；status为初始化的结果，等于1时表示初始化失败
+int num = 1234
+std::string out = formatter.Format(num, status);  // 判断status状态
+
+output: 1,234
+```
+
+3. 提供获取指定区域月份、星期不同格式名称的能力。示例如下：
+
+```
+#include "date_time_format.h"
+using namespace OHOS::I18N
+
+LocaleInfo locale("en", "US");  // 获得区域
+DateTimeFormat formatter(AvailableDateTimeFormatPattern::HOUR_MINUTE, locale);
+std::string month = formatter.GetMonthName(0, DateTimeDataType::FORMAT_WIDE); // 获取format类型的长格式
+
+output: January
+```
+
+4. 不同语言下名称跟随数字有不同的表达，如英文下会有：“one apple”、“two apples”。单复数规范总结多种语言的语法规范将名词的单数和复数形式划分为zero、one、two、few、many、other六种类型。不同语言支持不同数量的单复数类型，如中文只支持other一种，英文支持one和other两种，阿拉伯语支持全部6种类型。提供单复数接口来计算不同语言下不同数字时应该使用的名词复数类型，使“数字+名词”这种表达形式跟随应用语言满足不同语言用户的文化习惯。示例如下：
+
+```
+#include "plural_format.h"
+using namespace OHOS::I18N
+
+Locale locale("en", "US"); // 获得区域
+Ii8nStatus status = Ii8nStatus::ISUCCESS;
+PluralFormatter formatter = PluralFormatter(locale, status);  // 判断status状态
+int out = formatter.GetPluralFormatter(1, status);  // 判断status状态
+
+output: 1 // 获取单复数六条规则中的第二条规则
+```
+
+## 相关仓<a name="section15583142420413"></a>
+
+[全球化子系统](https://gitee.com/openharmony/docs/blob/master/zh-cn/readme/%E5%85%A8%E7%90%83%E5%8C%96%E5%AD%90%E7%B3%BB%E7%BB%9F.md)
+
+[global\_resmgr\_lite](https://gitee.com/openharmony/global_resmgr_lite/blob/master/README_zh.md)
+
+global\_i18n\_lite
+
+[global\_cust\_lite](https://gitee.com/openharmony/global_cust_lite/blob/master/README_zh.md)
+
+## 附录<a name="section56601824115"></a>
+
+支持语言列表
+
+<a name="table1155163353316"></a>
+<table><thead align="left"><tr id="row12551103373310"><th class="cellrowborder" valign="top" width="16.666666666666664%" id="mcps1.1.7.1.1"><p id="p2551233113320"><a name="p2551233113320"></a><a name="p2551233113320"></a>缩写</p>
+</th>
+<th class="cellrowborder" valign="top" width="16.666666666666664%" id="mcps1.1.7.1.2"><p id="p4551033123313"><a name="p4551033123313"></a><a name="p4551033123313"></a>语言</p>
+</th>
+<th class="cellrowborder" valign="top" width="16.666666666666664%" id="mcps1.1.7.1.3"><p id="p16551113323317"><a name="p16551113323317"></a><a name="p16551113323317"></a>缩写</p>
+</th>
+<th class="cellrowborder" valign="top" width="16.666666666666664%" id="mcps1.1.7.1.4"><p id="p5551113317339"><a name="p5551113317339"></a><a name="p5551113317339"></a>语言</p>
+</th>
+<th class="cellrowborder" valign="top" width="16.666666666666664%" id="mcps1.1.7.1.5"><p id="p9551133383310"><a name="p9551133383310"></a><a name="p9551133383310"></a>缩写</p>
+</th>
+<th class="cellrowborder" valign="top" width="16.666666666666664%" id="mcps1.1.7.1.6"><p id="p25511633143312"><a name="p25511633143312"></a><a name="p25511633143312"></a>语言</p>
+</th>
+</tr>
+</thead>
+<tbody><tr id="row1155119337333"><td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.1 "><p id="p1642315461918"><a name="p1642315461918"></a><a name="p1642315461918"></a>am_ET</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.2 "><p id="p842312418199"><a name="p842312418199"></a><a name="p842312418199"></a>阿姆哈拉语</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.3 "><p id="p15959151711194"><a name="p15959151711194"></a><a name="p15959151711194"></a>hr_HR</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.4 "><p id="p795921716199"><a name="p795921716199"></a><a name="p795921716199"></a>克罗地亚语</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.5 "><p id="p18915730141911"><a name="p18915730141911"></a><a name="p18915730141911"></a>or-IN</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.6 "><p id="p4915530181918"><a name="p4915530181918"></a><a name="p4915530181918"></a>欧里亚语</p>
+</td>
+</tr>
+<tr id="row8552833113319"><td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.1 "><p id="p342314171912"><a name="p342314171912"></a><a name="p342314171912"></a>ar_EG</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.2 "><p id="p1142312413190"><a name="p1142312413190"></a><a name="p1142312413190"></a>阿拉伯语</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.3 "><p id="p1959181771915"><a name="p1959181771915"></a><a name="p1959181771915"></a>hu_HU</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.4 "><p id="p295910172195"><a name="p295910172195"></a><a name="p295910172195"></a>匈牙利语</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.5 "><p id="p1915930121910"><a name="p1915930121910"></a><a name="p1915930121910"></a>pa_IN</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.6 "><p id="p491513302195"><a name="p491513302195"></a><a name="p491513302195"></a>旁遮普语</p>
+</td>
+</tr>
+<tr id="row155203333310"><td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.1 "><p id="p144235415191"><a name="p144235415191"></a><a name="p144235415191"></a>as_IN</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.2 "><p id="p54231410192"><a name="p54231410192"></a><a name="p54231410192"></a>阿萨姆语</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.3 "><p id="p1295991711198"><a name="p1295991711198"></a><a name="p1295991711198"></a>in_ID</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.4 "><p id="p99591417111911"><a name="p99591417111911"></a><a name="p99591417111911"></a>印尼语</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.5 "><p id="p791516304193"><a name="p791516304193"></a><a name="p791516304193"></a>pl_PL</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.6 "><p id="p10915230161914"><a name="p10915230161914"></a><a name="p10915230161914"></a>波兰语</p>
+</td>
+</tr>
+<tr id="row15531233183310"><td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.1 "><p id="p144232481912"><a name="p144232481912"></a><a name="p144232481912"></a>az_AZ</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.2 "><p id="p842316410198"><a name="p842316410198"></a><a name="p842316410198"></a>阿塞拜疆语</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.3 "><p id="p13959171701919"><a name="p13959171701919"></a><a name="p13959171701919"></a>it_IT</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.4 "><p id="p1895961781916"><a name="p1895961781916"></a><a name="p1895961781916"></a>意大利语</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.5 "><p id="p16915133071912"><a name="p16915133071912"></a><a name="p16915133071912"></a>pt_BR</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.6 "><p id="p5915130131912"><a name="p5915130131912"></a><a name="p5915130131912"></a>巴西葡语</p>
+</td>
+</tr>
+<tr id="row755353313317"><td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.1 "><p id="p1042324121912"><a name="p1042324121912"></a><a name="p1042324121912"></a>be_BY</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.2 "><p id="p154245441911"><a name="p154245441911"></a><a name="p154245441911"></a>白俄罗斯语</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.3 "><p id="p495931741915"><a name="p495931741915"></a><a name="p495931741915"></a>iw_IL</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.4 "><p id="p1495914176198"><a name="p1495914176198"></a><a name="p1495914176198"></a>希伯来语</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.5 "><p id="p7916193016198"><a name="p7916193016198"></a><a name="p7916193016198"></a>pt_PT</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.6 "><p id="p1291683021916"><a name="p1291683021916"></a><a name="p1291683021916"></a>欧洲葡语</p>
+</td>
+</tr>
+<tr id="row10553113311338"><td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.1 "><p id="p242434121918"><a name="p242434121918"></a><a name="p242434121918"></a>bg_BG</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.2 "><p id="p1442410411193"><a name="p1442410411193"></a><a name="p1442410411193"></a>保加利亚语</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.3 "><p id="p10959191713197"><a name="p10959191713197"></a><a name="p10959191713197"></a>ja_JP</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.4 "><p id="p149591317131911"><a name="p149591317131911"></a><a name="p149591317131911"></a>日语</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.5 "><p id="p209167305198"><a name="p209167305198"></a><a name="p209167305198"></a>ro_RO</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.6 "><p id="p15916430181914"><a name="p15916430181914"></a><a name="p15916430181914"></a>罗马尼亚语</p>
+</td>
+</tr>
+<tr id="row1255311336338"><td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.1 "><p id="p442417412197"><a name="p442417412197"></a><a name="p442417412197"></a>bn_BD</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.2 "><p id="p6424144195"><a name="p6424144195"></a><a name="p6424144195"></a>孟加拉语</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.3 "><p id="p89597175199"><a name="p89597175199"></a><a name="p89597175199"></a>jv_ID</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.4 "><p id="p895981711191"><a name="p895981711191"></a><a name="p895981711191"></a>爪哇语</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.5 "><p id="p139161130201917"><a name="p139161130201917"></a><a name="p139161130201917"></a>ru_RU</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.6 "><p id="p991615309194"><a name="p991615309194"></a><a name="p991615309194"></a>俄语</p>
+</td>
+</tr>
+<tr id="row10554103373313"><td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.1 "><p id="p19424164191912"><a name="p19424164191912"></a><a name="p19424164191912"></a>bo_CN</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.2 "><p id="p7424944194"><a name="p7424944194"></a><a name="p7424944194"></a>藏语</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.3 "><p id="p995991791915"><a name="p995991791915"></a><a name="p995991791915"></a>ka_GE</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.4 "><p id="p1395951761911"><a name="p1395951761911"></a><a name="p1395951761911"></a>格鲁吉亚语</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.5 "><p id="p79161630131915"><a name="p79161630131915"></a><a name="p79161630131915"></a>si_LK</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.6 "><p id="p1791613016194"><a name="p1791613016194"></a><a name="p1791613016194"></a>僧伽罗语</p>
+</td>
+</tr>
+<tr id="row3554113383312"><td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.1 "><p id="p1642419414190"><a name="p1642419414190"></a><a name="p1642419414190"></a>bs_BA</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.2 "><p id="p1442424191913"><a name="p1442424191913"></a><a name="p1442424191913"></a>波斯尼亚语</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.3 "><p id="p69605176198"><a name="p69605176198"></a><a name="p69605176198"></a>kk_KZ</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.4 "><p id="p1696051717196"><a name="p1696051717196"></a><a name="p1696051717196"></a>哈萨克语（西里尔文）</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.5 "><p id="p10916163010192"><a name="p10916163010192"></a><a name="p10916163010192"></a>sk_SK</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.6 "><p id="p791618306194"><a name="p791618306194"></a><a name="p791618306194"></a>斯洛伐克语</p>
+</td>
+</tr>
+<tr id="row055420336334"><td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.1 "><p id="p164243412193"><a name="p164243412193"></a><a name="p164243412193"></a>ca_ES</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.2 "><p id="p1742484101914"><a name="p1742484101914"></a><a name="p1742484101914"></a>加泰罗尼亚语</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.3 "><p id="p20960191717199"><a name="p20960191717199"></a><a name="p20960191717199"></a>km_KH</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.4 "><p id="p89601517121919"><a name="p89601517121919"></a><a name="p89601517121919"></a>高棉语</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.5 "><p id="p129161930151919"><a name="p129161930151919"></a><a name="p129161930151919"></a>sl_SI</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.6 "><p id="p119161130131916"><a name="p119161130131916"></a><a name="p119161130131916"></a>斯洛文尼亚语</p>
+</td>
+</tr>
+<tr id="row455463316336"><td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.1 "><p id="p204245415194"><a name="p204245415194"></a><a name="p204245415194"></a>cs_CZ</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.2 "><p id="p114240481913"><a name="p114240481913"></a><a name="p114240481913"></a>捷克语</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.3 "><p id="p18960181712197"><a name="p18960181712197"></a><a name="p18960181712197"></a>kn_IN</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.4 "><p id="p15960181713190"><a name="p15960181713190"></a><a name="p15960181713190"></a>卡纳达语</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.5 "><p id="p0916153010199"><a name="p0916153010199"></a><a name="p0916153010199"></a>sr_Latn_RS sr_RS</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.6 "><p id="p9916103014196"><a name="p9916103014196"></a><a name="p9916103014196"></a>塞尔维亚语（拉丁文）</p>
+</td>
+</tr>
+<tr id="row155523315331"><td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.1 "><p id="p4425134141916"><a name="p4425134141916"></a><a name="p4425134141916"></a>da_DK</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.2 "><p id="p5425194111910"><a name="p5425194111910"></a><a name="p5425194111910"></a>丹麦语</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.3 "><p id="p119601217171917"><a name="p119601217171917"></a><a name="p119601217171917"></a>ko_KR</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.4 "><p id="p7960191712191"><a name="p7960191712191"></a><a name="p7960191712191"></a>韩语</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.5 "><p id="p1691618306198"><a name="p1691618306198"></a><a name="p1691618306198"></a>sv_SE</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.6 "><p id="p89161630121916"><a name="p89161630121916"></a><a name="p89161630121916"></a>瑞典语</p>
+</td>
+</tr>
+<tr id="row1355553314338"><td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.1 "><p id="p124251149199"><a name="p124251149199"></a><a name="p124251149199"></a>de_DE</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.2 "><p id="p3425648194"><a name="p3425648194"></a><a name="p3425648194"></a>德语</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.3 "><p id="p179605177198"><a name="p179605177198"></a><a name="p179605177198"></a>lo_LA</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.4 "><p id="p296041781912"><a name="p296041781912"></a><a name="p296041781912"></a>老挝语</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.5 "><p id="p1891615300198"><a name="p1891615300198"></a><a name="p1891615300198"></a>sw_TZ</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.6 "><p id="p29160307191"><a name="p29160307191"></a><a name="p29160307191"></a>斯瓦希里语</p>
+</td>
+</tr>
+<tr id="row855573323320"><td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.1 "><p id="p94259491916"><a name="p94259491916"></a><a name="p94259491916"></a>el_GR</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.2 "><p id="p1425849195"><a name="p1425849195"></a><a name="p1425849195"></a>希腊语</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.3 "><p id="p7960111751911"><a name="p7960111751911"></a><a name="p7960111751911"></a>lt_LT</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.4 "><p id="p096015176192"><a name="p096015176192"></a><a name="p096015176192"></a>立陶宛语</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.5 "><p id="p159161230111912"><a name="p159161230111912"></a><a name="p159161230111912"></a>ta_IN</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.6 "><p id="p291653011917"><a name="p291653011917"></a><a name="p291653011917"></a>泰米尔语</p>
+</td>
+</tr>
+<tr id="row455517330330"><td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.1 "><p id="p1042594191916"><a name="p1042594191916"></a><a name="p1042594191916"></a>en_GB</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.2 "><p id="p34256401915"><a name="p34256401915"></a><a name="p34256401915"></a>英式英语</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.3 "><p id="p1296071711193"><a name="p1296071711193"></a><a name="p1296071711193"></a>lv_LV</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.4 "><p id="p49601717101910"><a name="p49601717101910"></a><a name="p49601717101910"></a>拉脱维亚语</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.5 "><p id="p6916103081916"><a name="p6916103081916"></a><a name="p6916103081916"></a>te_IN</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.6 "><p id="p19916133015196"><a name="p19916133015196"></a><a name="p19916133015196"></a>泰卢固语</p>
+</td>
+</tr>
+<tr id="row7556143312334"><td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.1 "><p id="p1642504131918"><a name="p1642504131918"></a><a name="p1642504131918"></a>en_US</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.2 "><p id="p64259441920"><a name="p64259441920"></a><a name="p64259441920"></a>美式英语</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.3 "><p id="p18960161731910"><a name="p18960161731910"></a><a name="p18960161731910"></a>mai-Deva-IN</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.4 "><p id="p296051718193"><a name="p296051718193"></a><a name="p296051718193"></a>迈蒂利语</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.5 "><p id="p391753011919"><a name="p391753011919"></a><a name="p391753011919"></a>th_TH</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.6 "><p id="p1291753016194"><a name="p1291753016194"></a><a name="p1291753016194"></a>泰语</p>
+</td>
+</tr>
+<tr id="row115564335332"><td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.1 "><p id="p1342534191910"><a name="p1342534191910"></a><a name="p1342534191910"></a>es_ES</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.2 "><p id="p1942518419199"><a name="p1942518419199"></a><a name="p1942518419199"></a>欧洲西语</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.3 "><p id="p1696010177195"><a name="p1696010177195"></a><a name="p1696010177195"></a>mi-NZ</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.4 "><p id="p7960121718191"><a name="p7960121718191"></a><a name="p7960121718191"></a>毛利语</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.5 "><p id="p1391718301197"><a name="p1391718301197"></a><a name="p1391718301197"></a>tl_PH</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.6 "><p id="p7917153081918"><a name="p7917153081918"></a><a name="p7917153081918"></a>菲律宾语</p>
+</td>
+</tr>
+<tr id="row14556173314335"><td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.1 "><p id="p114251748198"><a name="p114251748198"></a><a name="p114251748198"></a>es_US</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.2 "><p id="p15425843198"><a name="p15425843198"></a><a name="p15425843198"></a>拉美西语</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.3 "><p id="p139601917191914"><a name="p139601917191914"></a><a name="p139601917191914"></a>mk_MK</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.4 "><p id="p1496016178191"><a name="p1496016178191"></a><a name="p1496016178191"></a>马其顿语</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.5 "><p id="p9917530161919"><a name="p9917530161919"></a><a name="p9917530161919"></a>tr_TR</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.6 "><p id="p169171330171914"><a name="p169171330171914"></a><a name="p169171330171914"></a>土耳其语</p>
+</td>
+</tr>
+<tr id="row15556333173313"><td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.1 "><p id="p14425645195"><a name="p14425645195"></a><a name="p14425645195"></a>et_EE</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.2 "><p id="p842513431911"><a name="p842513431911"></a><a name="p842513431911"></a>爱沙尼亚语</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.3 "><p id="p896061791916"><a name="p896061791916"></a><a name="p896061791916"></a>ml_IN</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.4 "><p id="p1096018172190"><a name="p1096018172190"></a><a name="p1096018172190"></a>马拉雅拉姆语</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.5 "><p id="p991743017195"><a name="p991743017195"></a><a name="p991743017195"></a>uk_UA</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.6 "><p id="p991710309199"><a name="p991710309199"></a><a name="p991710309199"></a>乌克兰语</p>
+</td>
+</tr>
+<tr id="row1855613353314"><td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.1 "><p id="p542654141917"><a name="p542654141917"></a><a name="p542654141917"></a>eu_ES</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.2 "><p id="p342613481912"><a name="p342613481912"></a><a name="p342613481912"></a>巴斯克语</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.3 "><p id="p2096021715195"><a name="p2096021715195"></a><a name="p2096021715195"></a>mn_MN</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.4 "><p id="p1396031741915"><a name="p1396031741915"></a><a name="p1396031741915"></a>蒙古</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.5 "><p id="p491773041913"><a name="p491773041913"></a><a name="p491773041913"></a>ur_PK</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.6 "><p id="p491753071916"><a name="p491753071916"></a><a name="p491753071916"></a>乌尔都语</p>
+</td>
+</tr>
+<tr id="row1355743319338"><td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.1 "><p id="p94261947191"><a name="p94261947191"></a><a name="p94261947191"></a>fa_IR</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.2 "><p id="p194262041193"><a name="p194262041193"></a><a name="p194262041193"></a>波斯语</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.3 "><p id="p109611217131915"><a name="p109611217131915"></a><a name="p109611217131915"></a>mr_IN</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.4 "><p id="p1696141718197"><a name="p1696141718197"></a><a name="p1696141718197"></a>马拉地语</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.5 "><p id="p2091783015192"><a name="p2091783015192"></a><a name="p2091783015192"></a>uz_UZ</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.6 "><p id="p209171730151917"><a name="p209171730151917"></a><a name="p209171730151917"></a>乌兹别克语</p>
+</td>
+</tr>
+<tr id="row555743317339"><td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.1 "><p id="p174262471919"><a name="p174262471919"></a><a name="p174262471919"></a>fi_FI</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.2 "><p id="p144269418197"><a name="p144269418197"></a><a name="p144269418197"></a>芬兰语</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.3 "><p id="p1796161741910"><a name="p1796161741910"></a><a name="p1796161741910"></a>ms_MY</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.4 "><p id="p89611617161917"><a name="p89611617161917"></a><a name="p89611617161917"></a>马来西亚语</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.5 "><p id="p9917193017194"><a name="p9917193017194"></a><a name="p9917193017194"></a>vi_VN</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.6 "><p id="p149178302196"><a name="p149178302196"></a><a name="p149178302196"></a>越南语</p>
+</td>
+</tr>
+<tr id="row16557333153316"><td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.1 "><p id="p204269417197"><a name="p204269417197"></a><a name="p204269417197"></a>fr_FR</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.2 "><p id="p15426745195"><a name="p15426745195"></a><a name="p15426745195"></a>法语</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.3 "><p id="p189611917121913"><a name="p189611917121913"></a><a name="p189611917121913"></a>my_MM my_ZG</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.4 "><p id="p79611117131910"><a name="p79611117131910"></a><a name="p79611117131910"></a>缅甸语</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.5 "><p id="p12917193041917"><a name="p12917193041917"></a><a name="p12917193041917"></a>zh_CN</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.6 "><p id="p19917143071916"><a name="p19917143071916"></a><a name="p19917143071916"></a>简体中文</p>
+</td>
+</tr>
+<tr id="row1055743383312"><td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.1 "><p id="p1742674191920"><a name="p1742674191920"></a><a name="p1742674191920"></a>gl_ES</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.2 "><p id="p242619414192"><a name="p242619414192"></a><a name="p242619414192"></a>加利西亚语</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.3 "><p id="p13961717121916"><a name="p13961717121916"></a><a name="p13961717121916"></a>nb_NO</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.4 "><p id="p2096111751916"><a name="p2096111751916"></a><a name="p2096111751916"></a>挪威语</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.5 "><p id="p139171630101910"><a name="p139171630101910"></a><a name="p139171630101910"></a>zh_HK</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.6 "><p id="p3917330191918"><a name="p3917330191918"></a><a name="p3917330191918"></a>香港繁体中文</p>
+</td>
+</tr>
+<tr id="row455873319339"><td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.1 "><p id="p34261948195"><a name="p34261948195"></a><a name="p34261948195"></a>gu_IN</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.2 "><p id="p1842616481918"><a name="p1842616481918"></a><a name="p1842616481918"></a>古吉拉特语</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.3 "><p id="p996181717197"><a name="p996181717197"></a><a name="p996181717197"></a>ne_NP</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.4 "><p id="p69611517101918"><a name="p69611517101918"></a><a name="p69611517101918"></a>尼泊尔语</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.5 "><p id="p1491714309196"><a name="p1491714309196"></a><a name="p1491714309196"></a>zh_TW</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.6 "><p id="p14917163011918"><a name="p14917163011918"></a><a name="p14917163011918"></a>台湾繁体中文</p>
+</td>
+</tr>
+<tr id="row9558833183312"><td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.1 "><p id="p134261645197"><a name="p134261645197"></a><a name="p134261645197"></a>hi_IN</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.2 "><p id="p74260415197"><a name="p74260415197"></a><a name="p74260415197"></a>印地语</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.3 "><p id="p15961417181916"><a name="p15961417181916"></a><a name="p15961417181916"></a>nl_NL</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.4 "><p id="p89611317191919"><a name="p89611317191919"></a><a name="p89611317191919"></a>荷兰语</p>
+</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.5 ">&nbsp;&nbsp;</td>
+<td class="cellrowborder" valign="top" width="16.666666666666664%" headers="mcps1.1.7.1.6 ">&nbsp;&nbsp;</td>
+</tr>
+</tbody>
+</table>
+
diff --git a/base/global/i18n_lite/frameworks/i18n/BUILD.gn b/base/global/i18n_lite/frameworks/i18n/BUILD.gn
new file mode 100755
index 00000000..1fa72093
--- /dev/null
+++ b/base/global/i18n_lite/frameworks/i18n/BUILD.gn
@@ -0,0 +1,67 @@
+# Copyright (c) 2021 Huawei Device Co., Ltd.
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+if (defined(ohos_lite)) {
+  import("//build/lite/config/component/lite_component.gni")
+} else {
+  import("//build/ohos.gni")
+}
+
+locale_sources = [
+  "src/data_resource.cpp",
+  "src/date_time_data.cpp",
+  "src/date_time_format.cpp",
+  "src/date_time_format_impl.cpp",
+  "src/locale_info.cpp",
+  "src/number_data.cpp",
+  "src/number_format.cpp",
+  "src/number_format_impl.cpp",
+  "src/plural_format.cpp",
+  "src/plural_format_impl.cpp",
+  "src/plural_rules.cpp",
+  "src/str_util.cpp",
+]
+
+config("locale_config") {
+  include_dirs = [
+    "//base/global/i18n_lite/interfaces/kits/i18n/include",
+    "//base/global/i18n_lite/frameworks/i18n/include",
+    "//third_party/bounds_checking_function/include",
+  ]
+}
+
+copy("global_dat") {
+  sources = [ "i18n.dat" ]
+  outputs = [ "$root_out_dir/data/i18n.dat" ]
+}
+
+if (defined(ohos_lite)) {
+  shared_library("global_i18n") {
+    sources = locale_sources
+    configs += [ ":locale_config" ]
+    deps = [
+      ":global_dat",
+      "//third_party/bounds_checking_function:libsec_shared",
+    ]
+  }
+
+  lite_component("locale_lite") {
+    features = [ ":global_i18n" ]
+  }
+} else {
+  ohos_static_library("global_i18n_simulator") {
+    sources = locale_sources
+    configs += [ ":locale_config" ]
+    deps = [ ":global_dat" ]
+  }
+}
diff --git a/base/global/i18n_lite/frameworks/i18n/i18n.dat b/base/global/i18n_lite/frameworks/i18n/i18n.dat
new file mode 100755
index 0000000000000000000000000000000000000000..ca29b9879d4ea1df1460fd8b79a45fe35e80dc8e
GIT binary patch
literal 65777
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
QFkcF0A3dhTm?9+o1QJp>%K!iX

literal 0
HcmV?d00001

diff --git a/base/global/i18n_lite/frameworks/i18n/include/data_resource.h b/base/global/i18n_lite/frameworks/i18n/include/data_resource.h
new file mode 100755
index 00000000..79e3c0d9
--- /dev/null
+++ b/base/global/i18n_lite/frameworks/i18n/include/data_resource.h
@@ -0,0 +1,159 @@
+/*
+ * Copyright (c) 2021 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+
+#ifndef DATA_RESOURCE_IMPL_H
+#define DATA_RESOURCE_IMPL_H
+
+#include <sys/stat.h>
+#include <sys/types.h>
+#include <unistd.h>
+#include "locale_info.h"
+#include "fcntl.h"
+#include "types.h"
+
+#define GLOBAL_RESOURCE_HEADER_SIZE 16
+#define GLOBAL_RESOURCE_HEADER_LEFT 4
+#define GLOBAL_RESOURCE_HEADER_SKIP 12
+#define GLOBAL_RESOURCE_INDEX_OFFSET 2
+#define GLOBAL_RESOURCE_MASK_OFFSET 4
+#define GLOBAL_LOCALE_MASK_ITEM_SIZE 8
+#define GLOBAL_RESOURCE_CONFIG_SIZE 6
+#define GregorianFormatAbbMonthNamesIndex 0
+#define GregorianFormatAbbDayNamesIndex 1
+#define GregorianTimePatternsIndex 2
+#define GregorianDatePatternsIndex 3
+#define GregorianAmPmsIndex 4
+#define PluralIndex 5
+#define NumberFormatIndex 6
+#define NumberDigitIndex 7
+#define TimeSeparatorIndex 8
+#define DefaultHourIndex 9
+#define GregorianStandaloneAbbMonthNamesIndex 10
+#define GregorianStandaloneAbbDayNamesIndex 11
+#define GregorianFormatWideMonthNamesIndex 12
+#define GregorianHourMinuteSecondPatternsIndex 13
+#define GregorianFullMediumShortPatternsIndex 14
+#define GregorianFormatWideDayNamesIndex 15
+#define GregorianStandaloneWideDayNamesIndex 16
+#define GregorianStandaloneWideMonthNamesIndex 17
+#define RESOURCE_COUNT 18
+#define MONTH_SEP '_'
+#define DAY_SEP '_'
+#define PATTERN_SEP '_'
+#define AMPM_SEP '_'
+#define NUM_PATTERN_SIZE 5
+#define NUM_PAT_INDEX 0
+#define NUM_PERCENT_PAT_INDEX 1
+#define NUM_DEC_SIGN_INDEX 2
+#define NUM_GROUP_SIGN_INDEX 3
+#define NUM_PERCENT_SIGN_INDEX 4
+#define NUM_PATTERN_SEP '_'
+#define NUM_DIGIT_SEP ';'
+#define PLURAL_SEP '_'
+#define NUM_DIGIT_SIZE 10
+#define RULES_NUM 6
+#define RESOURCE_INDEX 0
+#define FALLBACK_RESOURCE_INDEX 1
+#define DEFAULT_RESOURCE_INDEX 2
+#define SHIFT_ONE_BYTE 8
+#define SHIFT_TWO_BYTE 16
+#define SHIFT_THREE_BYTE 24
+#define MAX_LOCALE_ITEM_SIZE 500
+
+namespace OHOS {
+namespace I18N {
+#ifdef I18N_PRODUCT
+static const char *gDataResourcePath = "system/i18n/i18n.dat";
+#else
+static const char *gDataResourcePath = "/storage/data/i18n.dat";
+#endif
+enum LocaleDataType {
+    RESOURCE,
+    FALLBACK_RESOURCE,
+    DEFAULT_RESOURCE
+};
+
+enum DataResourceType {
+    GREGORIAN_FORMAT_ABBR_MONTH, // 0
+    GREGORIAN_FORMAT_ABBR_DAY, // 1
+    GREGORIAN_TIME_PATTERNS, // 2
+    GREGORIAN_DATE_PATTERNS, // 3
+    GREGORIAN_AM_PMS, // 4
+    PLURAL, // 5
+    NUMBER_FORMAT, // 6
+    NUMBER_DIGIT, // 7
+    TIME_SEPARATOR, // 8
+    DEFAULT_HOUR, // 9
+    GREGORIAN_STANDALONE_ABBR_MONTH, // 10
+    GREGORIAN_STANDALONE_ABBR_DAY, // 11
+    GREGORIAN_FORMAT_WIDE_MONTH, // 12
+    GREGORIAN_HOUR_MINUTE_SECOND_PATTERN, // 13
+    GREGORIAN_FULL_MEDIUM_SHORT_PATTERN, // 14
+    GREGORIAN_FORMAT_WIDE_DAY, // 15
+    GREGORIAN_STANDALONE_WIDE_DAY, // 16
+    GREGORIAN_STANDALONE_WIDE_MONTH // 17
+};
+
+class DataResource {
+public:
+    explicit DataResource(const LocaleInfo *localeInfo);
+    bool Init();
+    std::string GetString(DataResourceType type) const;
+    virtual ~DataResource();
+
+private:
+    static uint32_t GetFallbackMask(const LocaleInfo &src);
+    bool ReadHeader(int32_t infile);
+    bool PrepareData(int32_t infile);
+    int32_t BinarySearchLocale(const uint32_t mask, unsigned char *locales);
+    bool GetStringFromStringPool(char *configs, const uint32_t configsSize, int32_t infile, LocaleDataType type);
+    uint32_t ConvertUint(unsigned char *src);
+    uint32_t ConvertUChar(unsigned char *src);
+    std::string GetString2(DataResourceType type) const;
+    std::string GetString(uint32_t index) const;
+    std::string BinarySearchString(uint32_t *indexArray, uint32_t length,
+        uint32_t target, std::string *stringArray) const;
+    LocaleInfo *GetFallbackLocaleInfo(const LocaleInfo &src);
+    void GetFallbackAndDefaultLocaleIndex(int32_t &fallbackLocaleIndex, int32_t &defaultLocaleIndex,
+        char *locales);
+    void GetFallbackAndDefaultInfo(const int32_t &fallbackLocaleIndex, const int32_t &defaultLocaleIndex,
+        uint32_t &fallbackConfigOffset, uint32_t &defaultConfigOffset, char *locales);
+    bool Retrieve(char *configs, const uint32_t configsSize, int32_t infile, const uint32_t originalCount,
+        LocaleDataType type);
+    bool PrepareLocaleData(int32_t infile, uint32_t configOffset, uint32_t count, LocaleDataType type);
+    bool FullLoaded();
+    void GetType(std::string* &adjustResource, uint32_t* &adjustResourceIndex, uint32_t &count, LocaleDataType type);
+    uint32_t GetFinalCount(char *configs, uint32_t configSize, LocaleDataType type);
+    uint32_t localeMask = 0;
+    uint32_t fallbackMask = 0;
+    uint32_t defaultMask = 0;
+    uint32_t localesCount = 0;
+    uint32_t stringPoolOffset = 0;
+    uint32_t *resourceIndex = nullptr;
+    uint32_t *defaultResourceIndex = nullptr;
+    std::string *resource = nullptr;
+    uint32_t resourceCount = 0;
+    uint32_t fallbackResourceCount = 0;
+    uint32_t defaultResourceCount = 0;
+    LocaleDataType currentType = LocaleDataType::DEFAULT_RESOURCE;
+    uint32_t *fallbackResourceIndex = nullptr;
+    std::string *fallbackResource = nullptr;
+    std::string *defaultResource = nullptr;
+    uint32_t loaded[RESOURCE_COUNT] = { 0 };
+};
+} // I18N
+} // OHOS
+#endif
\ No newline at end of file
diff --git a/base/global/i18n_lite/frameworks/i18n/include/date_time_data.h b/base/global/i18n_lite/frameworks/i18n/include/date_time_data.h
new file mode 100755
index 00000000..d0af70a5
--- /dev/null
+++ b/base/global/i18n_lite/frameworks/i18n/include/date_time_data.h
@@ -0,0 +1,96 @@
+/*
+ * Copyright (c) 2021 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+
+#ifndef DATE_TIME_DATA_H
+#define DATE_TIME_DATA_H
+
+#include <string>
+#include "locale_info.h"
+#include "types.h"
+
+#define MONTH_SIZE 12
+#define DAY_SIZE 7
+#define AM_SIZE 2
+#define TIME_PATTERN_SIZE 2
+#define REGULAR_PATTERN_SIZE 10
+#define SEP_HOUR_SIZE 2
+#define HOUR_MINUTE_SECOND_PATTERN_SIZE 2
+#define FULL_MEDIUM_SHORT_PATTERN_SIZE 3
+#define FULL_DATE_INDEX 0
+#define MEDIUM_DATE_INDEX 1
+#define SHORT_DATE_INDEX 2
+
+namespace OHOS {
+namespace I18N {
+enum PatternType {
+    REGULAR_PATTERN,
+    HOUR_MINUTE_SECOND_PATTERN,
+    FULL_MEDIUM_SHORT_PATTERN
+};
+
+class DateTimeData {
+public:
+    DateTimeData(const std::string &amPmMarkers, const char *sepAndHour, const int size);
+    ~DateTimeData() = default;
+    std::string GetMonthName(int32_t index, DateTimeDataType type = DateTimeDataType::FORMAT_ABBR);
+    std::string GetDayName(int32_t index, DateTimeDataType type = DateTimeDataType::FORMAT_ABBR);
+    std::string GetAmPmMarker(int32_t index, DateTimeDataType type);
+    std::string GetPattern(int32_t index, PatternType type = PatternType::REGULAR_PATTERN);
+    char GetTimeSeparator(void) const;
+    char GetDefaultHour(void) const;
+    void SetMonthNamesData(const std::string &formatAbbreviatedMonthNames, const std::string &formatWideMonthNames,
+        const std::string &standaloneAbbreviatedMonthNames, const std::string &standaloneWideMonthNames)
+    {
+        this->formatAbbreviatedMonthNames = formatAbbreviatedMonthNames;
+        this->formatWideMonthNames = formatWideMonthNames;
+        this->standaloneAbbreviatedMonthNames = standaloneAbbreviatedMonthNames;
+        this->standaloneWideMonthNames = standaloneWideMonthNames;
+    }
+    void SetDayNamesData(const std::string &formatAbbreviatedDayNames, const std::string &formatWideDayNames,
+        const std::string &standaloneAbbreviatedDayNames, const std::string &standaloneWideDayNames)
+    {
+        this->formatAbbreviatedDayNames = formatAbbreviatedDayNames;
+        this->formatWideDayNames = formatWideDayNames;
+        this->standaloneAbbreviatedDayNames = standaloneAbbreviatedDayNames;
+        this->standaloneWideDayNames = standaloneWideDayNames;
+    }
+    void SetPatternsData(const std::string &patterns, const std::string &hourMinuteSecondPatterns,
+        const std::string &fullMediumShortPatterns)
+    {
+        this->patterns = patterns;
+        this->hourMinuteSecondPatterns = hourMinuteSecondPatterns;
+        this->fullMediumShortPatterns = fullMediumShortPatterns;
+    }
+private:
+    std::string Parse(const std::string &str, int32_t count);
+    std::string formatAbbreviatedMonthNames;
+    std::string formatWideMonthNames;
+    std::string standaloneAbbreviatedMonthNames;
+    std::string standaloneWideMonthNames;
+    std::string formatAbbreviatedDayNames;
+    std::string formatWideDayNames;
+    std::string standaloneAbbreviatedDayNames;
+    std::string standaloneWideDayNames;
+    std::string patterns;
+    std::string amPmMarkers;
+    std::string hourMinuteSecondPatterns;
+    std::string fullMediumShortPatterns;
+    char timeSeparator = ':';
+    char defaultHour = 'H';
+};
+}
+}
+#endif
diff --git a/base/global/i18n_lite/frameworks/i18n/include/date_time_format_impl.h b/base/global/i18n_lite/frameworks/i18n/include/date_time_format_impl.h
new file mode 100755
index 00000000..474eb15c
--- /dev/null
+++ b/base/global/i18n_lite/frameworks/i18n/include/date_time_format_impl.h
@@ -0,0 +1,99 @@
+/*
+ * Copyright (c) 2021 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+
+#ifndef DATE_TIME_FORMAT_IMPL_H
+#define DATE_TIME_FORMAT_IMPL_H
+
+#include <ctype.h>
+#include <string>
+#include "types.h"
+#include "time.h"
+#include "locale_info.h"
+#include "number_format_impl.h"
+#include "data_resource.h"
+#include "date_time_data.h"
+#include "str_util.h"
+
+#define HOUR12_MINUTE_SECOND_INDEX  0
+#define HOUR24_MINUTE_SECOND_INDEX 1
+#define HOUR12_MINUTE_INDEX 0
+#define HOUR24_MINUTE_INDEX 1
+#define ABBR_MONTH_WEEKDAY_DAY_INDEX 2
+#define ABBR_MONTH_DAY_INDEX 3
+#define YEAR_ABBR_MONTH_ABBR_WEEKDAY_DAY_INDEX 4
+#define YEAR_WIDE_MONTH_ABBR_WEEKDAY_DAY_INDEX 5
+#define YEAR_SHORT_MONTH_WIDE_WEEKDAY_DAY_INDEX 6
+#define YEAR_SHORT_MONTH_ABBR_WEEKDAY_DAY_INDEX 7
+#define YEAR_ABBR_MONTH_WIDE_WEEKDAY_DAY_INDEX 8
+#define YEAR_WIDE_MONTH_DAY_INDEX 9
+#define YEAR_START 1900
+#define LENGTH_HOUR 12
+#define MAX_COUNT 10
+#define SECONDS_IN_HOUR 3600
+#define SECONDS_IN_MINUTE 60
+#define DECIMAL_COUNT 10
+#define ABB_COUNT 3
+#define WIDE_COUNT 4
+#define SHORT_YEAR_FORMAT_COUNT 2
+#define ONE_HUNDRED_YEAR 100
+#define QUOTE '\''
+
+namespace OHOS {
+namespace I18N {
+class DateTimeFormatImpl {
+public:
+    DateTimeFormatImpl(AvailableDateTimeFormatPattern requestpattern, const LocaleInfo &locale);
+    virtual ~DateTimeFormatImpl();
+    bool Init(const DataResource &resource);
+    void Format(const time_t &cal, const std::string &zoneInfo, std::string &apependTo, I18nStatus &status) const;
+    void ApplyPattern(const AvailableDateTimeFormatPattern &pattern);
+    LocaleInfo GetLocale();
+    std::string GetWeekName(const int32_t &index, DateTimeDataType type) const;
+    std::string GetMonthName(const int32_t &index, DateTimeDataType type) const;
+    std::string GetAmPmMarker(const int32_t &index, DateTimeDataType type = DateTimeDataType::STANDALONE_ABBR) const;
+    std::string GetFPattern()
+    {
+        return fPattern;
+    }
+    void SetNumberFormatter(NumberFormatImpl *numberFormat)
+    {
+        this->numberFormat = numberFormat;
+    }
+private:
+    void FreeResource();
+    void ZeroPadding(std::string &appendTo, uint32_t minValue, uint32_t maxValue, int32_t value) const;
+    void Process(const tm &time, std::string &append, char pre, uint32_t count,  I18nStatus &status) const;
+    void ProcessTime(const tm &time, std::string &append, char pre, uint32_t count, I18nStatus &status) const;
+    void ProcessWeekDayYear(const tm &time, std::string &appendTo, char pre,
+        uint32_t count,  I18nStatus &status) const;
+    bool IsTimeChar(char ch) const;
+    int32_t ParseZoneInfo(const std::string &zoneInfo) const;
+    std::string FormatNumber(int32_t value) const;
+    std::string FormatYear(int32_t value) const;
+    std::string GetZero() const;
+    uint32_t GetLength(int32_t value) const;
+    std::string GetStringFromPattern(const AvailableDateTimeFormatPattern &requestpattern) const;
+    std::string GetStringFromPattern2(const AvailableDateTimeFormatPattern &requestPattern) const;
+    std::string AddSeconds(const std::string &hmPattern) const;
+    AvailableDateTimeFormatPattern requestPattern;
+    DateTimeData *data = nullptr;
+    NumberFormatImpl *numberFormat = nullptr;
+    std::string fPattern = "";
+    LocaleInfo fLocale;
+};
+}
+}
+#endif
diff --git a/base/global/i18n_lite/frameworks/i18n/include/number_data.h b/base/global/i18n_lite/frameworks/i18n/include/number_data.h
new file mode 100755
index 00000000..a61277dc
--- /dev/null
+++ b/base/global/i18n_lite/frameworks/i18n/include/number_data.h
@@ -0,0 +1,103 @@
+/*
+ * Copyright (c) 2021 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+
+#ifndef NUMBER_DATA_H
+#define NUMBER_DATA_H
+
+#define NUMBER_SIGN {                                                    \
+        "0", "1", "2", "3", "4", "5", "6", "7", "8", "9" \
+    }
+#define ARABIC_NOBREAK_ONE_MINUS 2
+#define ARABIC_NOBREAK_TWO_MINUS 3
+#define PERCENT_SIGN_INDEX 2
+#define SIGNS_SIZE 3
+#define PERCENT_INFO_SIZE 3
+
+#include "types.h"
+#include "data_resource.h"
+
+namespace OHOS {
+namespace I18N {
+struct StyleData {
+    NumberFormatType type = DECIMAL;
+    int decLen = 0;
+    int decZeroLen = 0;
+    bool suffixZero = false;
+    int intLen = 0;
+    bool preZero = false;
+    char *numFormat = nullptr; // number format style
+    char *entireFormat = nullptr;
+    bool isTwoGroup = false;
+    StyleData() = default;
+    ~StyleData();
+    StyleData(const StyleData &data);
+    StyleData &operator = (const StyleData &data);
+};
+
+class NumberData {
+public:
+    static const char NUMBER_DECIMAL = '.';
+    static const char NUMBER_GROUPSIGN = ',';
+    static const char NUMBER_PERCENT = '%';
+    static const int NUMBER_GROUP = 3;
+    static const int TWO_GROUP = 2;
+    static constexpr int NUM_SIZE = 10;
+    static constexpr int INFO_SIZE = 3;
+    char *pattern = nullptr;
+    char *percentPattern = nullptr;
+    std::string nativeNums[NUM_SIZE] = {}; // used to store 0-9 letters in current language
+    char *decimal = nullptr;
+    char *group = nullptr;
+    char *percent = nullptr;
+    bool isNative = false;
+    StyleData style;
+    StyleData percentStyle;
+    friend class NumberFormat;
+    NumberData();
+    NumberData(const char *pat, const char *percentPat, std::string decSign, std::string groupSign,
+        std::string perSign);
+    virtual ~NumberData();
+    void SetNumSystem(std::string *numSym, const int numSize);
+    bool SetMinDecimalLength(int length);
+    bool SetMaxDecimalLength(int length);
+
+private:
+    void Init(const char *pat, int patLen, const char *percentPat, int perPatLen);
+    void InitSign(const std::string *signs, const int signLength);
+    void ParsePattern(const char *pattern, const int len, StyleData &styleData);
+    void ParseStartPerPattern(const char *pattern, const int len, StyleData &styleData) const;
+    void ParseOtherPerPattern(const char *pattern, const int len, StyleData &styleData,
+        const int info[], const int infoSize) const;
+    void CalculateIntLength(int &intEndPos, const char *pattern, const int len, StyleData &styleData, bool isDec);
+    bool IsSuccess();
+    void SetFail();
+    bool isSucc = true;
+    bool isPercent = false;
+    int maxDecimalLength = -1;
+    const char *NUMBER_FORMAT = "%%.%df";
+    const int NUMBER_FORMAT_LENGTH = 5;
+    const int ARABIC_NOBREAK_ONE = -96;
+    const int ARABIC_NOBREAK_TWO = -62;
+};
+
+enum EPercentLocation {
+    UNKOWN = 0,
+    LEFT = 1,
+    RIGHT = 2
+};
+}
+}
+#endif
\ No newline at end of file
diff --git a/base/global/i18n_lite/frameworks/i18n/include/number_format_impl.h b/base/global/i18n_lite/frameworks/i18n/include/number_format_impl.h
new file mode 100755
index 00000000..06db064d
--- /dev/null
+++ b/base/global/i18n_lite/frameworks/i18n/include/number_format_impl.h
@@ -0,0 +1,59 @@
+/*
+ * Copyright (c) 2021 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+
+#ifndef NUMBERFORMAT_IMPL_H
+#define NUMBERFORMAT_IMPL_H
+
+#include "types.h"
+#include "securec.h"
+#include "locale_info.h"
+#include "data_resource.h"
+#include "number_data.h"
+
+namespace OHOS {
+namespace I18N {
+class NumberFormatImpl {
+public:
+    NumberFormatImpl(LocaleInfo &locale, int &status);
+    virtual ~NumberFormatImpl();
+    std::string Format(double num, NumberFormatType type, int &status) const;
+    std::string Format(int num, int &status) const;
+    std::string FormatNoGroup(double num, NumberFormatType type, int &status) const;
+    std::string FormatNoGroup(int num, int &status) const;
+    bool Init(const DataResource &resource);
+    bool SetMaxDecimalLength(int length);
+    bool SetMinDecimalLength(int length);
+private:
+    NumberData *defaultData = nullptr;
+    LocaleInfo mLocale;
+    int maxDecimalLength = -1;
+    int minDecimalLength = -1;
+    void CheckStatus(const errno_t rc, int &status) const;
+    int DelMoreZero(const StyleData &style, int decLen, char *&result, int lastLen) const;
+    std::string InnerFormat(double num, StyleData &style, bool hasDec, bool isShowGroup, int &status) const;
+    std::string ConvertSignAndNum(const char *content, int len, NumberData *data, StyleData &style) const;
+    int ConvertNum(std::string &strContent, char currentChar, const NumberData *data, int index, int off) const;
+    int DelZero(char *target, int len, int delNum, bool onlyZero) const;
+    void AddGroup(char *targetAndSource[], const int len[], const char *decimal, bool hasDec, int decLen) const;
+    int CountGroupNum(int len, int decLen, bool isTwoGrouped) const;
+    char *FillMinDecimal(char *target, int len, int addSize, bool isDec) const;
+    bool DealWithPercent(char *buff, char *&result, int &status, StyleData &style, int &lastLen) const;
+    static constexpr int NUMBER_MAX = 50;
+    static constexpr int NO_SET = -1;
+};
+}
+}
+#endif
\ No newline at end of file
diff --git a/base/global/i18n_lite/frameworks/i18n/include/plural_format_impl.h b/base/global/i18n_lite/frameworks/i18n/include/plural_format_impl.h
new file mode 100755
index 00000000..47ce1228
--- /dev/null
+++ b/base/global/i18n_lite/frameworks/i18n/include/plural_format_impl.h
@@ -0,0 +1,55 @@
+/*
+ * Copyright (c) 2021 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef PLURALFORMAT_IMPL_H
+#define PLURALFORMAT_IMPL_H
+
+#include "data_resource.h"
+#include "locale_info.h"
+#include "plural_rules.h"
+#include "types.h"
+
+namespace OHOS {
+namespace I18N {
+class PluralFormatImpl {
+public:
+    PluralFormatImpl(LocaleInfo &locale, I18nStatus &status);
+    virtual ~PluralFormatImpl();
+    int GetPluralRuleIndex(int number, I18nStatus status) const;
+    bool Init(const DataResource &resource);
+
+private:
+    PluralRules *mPluralRules = nullptr;
+    LocaleInfo mLocale;
+    PluralRules *GetPluralData(I18nStatus status) const;
+    bool ParseRule(const std::string &rule, const int ruleSize, const int number) const;
+    bool ParseFormula(const std::string &rule, const int ruleSize, int &index, const int number) const;
+    bool CompareResult(const std::string &rule, const int ruleSize, int &index, const int number) const;
+    bool CompareNotEqualResult(const std::string &rule, const int ruleSize, int &index, const int number) const;
+    int ParseNumber(const std::string &rule, const int ruleSize, int &index) const;
+    const int SYMBOL_LENGTH = 1;
+    const int SKIP_SYMBOL_LENGTH = 2;
+    const char EQUAL = '=';
+    const char NOT_EQUAL = '!';
+    const char MOD = '%';
+    const char AND = 'a';
+    const char OR = 'o';
+    const char TO = '<';
+    const char COMMA = ',';
+};
+}
+}
+
+#endif
\ No newline at end of file
diff --git a/base/global/i18n_lite/frameworks/i18n/include/plural_rules.h b/base/global/i18n_lite/frameworks/i18n/include/plural_rules.h
new file mode 100755
index 00000000..0cdae028
--- /dev/null
+++ b/base/global/i18n_lite/frameworks/i18n/include/plural_rules.h
@@ -0,0 +1,44 @@
+/*
+ * Copyright (c) 2021 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef PLURALRULE_H
+#define PLURALRULE_H
+
+#include "types.h"
+#include "locale_info.h"
+
+namespace OHOS {
+namespace I18N {
+class PluralRules {
+public:
+    PluralRules(std::string *rules, const int rulesLength, const int *rulesSize, const int sizesLength);
+    virtual ~PluralRules();
+    std::string mZeroRule = "";
+    int mZeroRuleSize = 0;
+    std::string mOneRule = "";
+    int mOneRuleSize = 0;
+    std::string mTwoRule = "";
+    int mTwoRuleSize = 0;
+    std::string mFewRule = "";
+    int mFewRuleSize = 0;
+    std::string mManyRule = "";
+    int mManyRuleSize = 0;
+    std::string mOtherRule = "";
+    int mOtherRuleSize = 0;
+};
+}
+}
+
+#endif
\ No newline at end of file
diff --git a/base/global/i18n_lite/frameworks/i18n/include/str_util.h b/base/global/i18n_lite/frameworks/i18n/include/str_util.h
new file mode 100755
index 00000000..b8216b60
--- /dev/null
+++ b/base/global/i18n_lite/frameworks/i18n/include/str_util.h
@@ -0,0 +1,41 @@
+/*
+ * Copyright (c) 2021 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+
+#ifndef STR_UTIL_H
+#define STR_UTIL_H
+#include <string>
+#include "types.h"
+
+namespace OHOS {
+namespace I18N {
+std::string Replace(std::string &content, const int index, const char *str);
+
+int ReplaceAndCountOff(std::string &content, const int index, const char *sign, const int off);
+
+void ArrayCopy(std::string *target, const int targetSize, const std::string *source, const int sourceSize);
+
+char *NewArrayAndCopy(const char *source, const int len);
+
+bool CleanCharArray(char *target, const int len);
+
+int LenCharArray(const char *target);
+
+void Split(const std::string &src, std::string *dst, const int32_t size, const char &sep);
+
+bool CompareLocaleItem(const char *src, const char* dst);
+}
+}
+#endif
\ No newline at end of file
diff --git a/base/global/i18n_lite/frameworks/i18n/src/data_resource.cpp b/base/global/i18n_lite/frameworks/i18n/src/data_resource.cpp
new file mode 100755
index 00000000..c788a9e2
--- /dev/null
+++ b/base/global/i18n_lite/frameworks/i18n/src/data_resource.cpp
@@ -0,0 +1,559 @@
+/*
+ * Copyright (c) 2021 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "data_resource.h"
+#include <cstring>
+#include "securec.h"
+#include "str_util.h"
+
+using namespace OHOS::I18N;
+using namespace std;
+
+DataResource::DataResource(const LocaleInfo *localeInfo)
+{
+    uint32_t enMask = LocaleInfo("en", "US").GetMask();
+    if (localeInfo == nullptr) {
+        localeMask = enMask;
+    } else {
+        localeMask = localeInfo->GetMask();
+        if (localeInfo->IsDefaultLocale()) {
+            fallbackMask = 0;
+        } else {
+            fallbackMask = GetFallbackMask(*localeInfo);
+        }
+        if ((fallbackMask != 0) && (fallbackMask != enMask)) {
+            defaultMask = enMask;
+        }
+    }
+    for (int i = 0; i < RESOURCE_COUNT; ++i) {
+        loaded[i] = RESOURCE_COUNT;
+    }
+}
+
+DataResource::~DataResource()
+{
+    if (resourceIndex) {
+        delete[] resourceIndex;
+        resourceIndex = nullptr;
+    }
+    if (resource) {
+        delete[] resource;
+        resource = nullptr;
+    }
+    if (fallbackResourceIndex) {
+        delete[] fallbackResourceIndex;
+        fallbackResourceIndex = nullptr;
+    }
+    if (fallbackResource) {
+        delete[] fallbackResource;
+        fallbackResource = nullptr;
+    }
+    if (defaultResourceIndex) {
+        delete[] defaultResourceIndex;
+        defaultResourceIndex = nullptr;
+    }
+    if (defaultResource) {
+        delete[] defaultResource;
+        defaultResource = nullptr;
+    }
+}
+
+string DataResource::GetString(DataResourceType type) const
+{
+    switch (type) {
+        case DataResourceType::DEFAULT_HOUR: {
+            return GetString(DefaultHourIndex);
+        }
+        case DataResourceType::GREGORIAN_AM_PMS: {
+            return GetString(GregorianAmPmsIndex);
+        }
+        case DataResourceType::GREGORIAN_DATE_PATTERNS: {
+            return GetString(GregorianDatePatternsIndex);
+        }
+        case DataResourceType::GREGORIAN_FORMAT_ABBR_MONTH: {
+            return GetString(GregorianFormatAbbMonthNamesIndex);
+        }
+        case DataResourceType::GREGORIAN_FORMAT_ABBR_DAY: {
+            return GetString(GregorianFormatAbbDayNamesIndex);
+        }
+        case DataResourceType::GREGORIAN_FORMAT_WIDE_MONTH: {
+            return GetString(GregorianFormatWideMonthNamesIndex);
+        }
+        case DataResourceType::GREGORIAN_STANDALONE_ABBR_MONTH: {
+            return GetString(GregorianStandaloneAbbMonthNamesIndex);
+        }
+        case DataResourceType::GREGORIAN_STANDALONE_ABBR_DAY: {
+            return GetString(GregorianStandaloneAbbDayNamesIndex);
+        }
+        case DataResourceType::GREGORIAN_TIME_PATTERNS: {
+            return GetString(GregorianTimePatternsIndex);
+        }
+        case DataResourceType::NUMBER_FORMAT: {
+            return GetString(NumberFormatIndex);
+        }
+        case DataResourceType::NUMBER_DIGIT: {
+            return GetString(NumberDigitIndex);
+        }
+        case DataResourceType::PLURAL: {
+            return GetString(PluralIndex);
+        }
+        case DataResourceType::TIME_SEPARATOR: {
+            return GetString(TimeSeparatorIndex);
+        }
+        default: {
+            return GetString2(type);
+        }
+    }
+}
+
+string DataResource::GetString2(DataResourceType type) const
+{
+    switch (type) {
+        case DataResourceType::GREGORIAN_FULL_MEDIUM_SHORT_PATTERN: {
+            return GetString(GregorianFullMediumShortPatternsIndex);
+        }
+        case DataResourceType::GREGORIAN_FORMAT_WIDE_DAY: {
+            return GetString(GregorianFormatWideDayNamesIndex);
+        }
+        case DataResourceType::GREGORIAN_HOUR_MINUTE_SECOND_PATTERN: {
+            return GetString(GregorianHourMinuteSecondPatternsIndex);
+        }
+        case DataResourceType::GREGORIAN_STANDALONE_WIDE_DAY: {
+            return GetString(GregorianStandaloneWideDayNamesIndex);
+        }
+        case DataResourceType::GREGORIAN_STANDALONE_WIDE_MONTH: {
+            return GetString(GregorianStandaloneWideMonthNamesIndex);
+        }
+        default: {
+            return "";
+        }
+    }
+}
+
+string DataResource::GetString(uint32_t index) const
+{
+    string temp("");
+    if (index >= RESOURCE_COUNT) {
+        return "";
+    }
+    uint32_t targetType = loaded[index];
+    if (targetType == RESOURCE_COUNT) {
+        return "";
+    }
+    switch (targetType) {
+        case LocaleDataType::RESOURCE: {
+            return BinarySearchString(resourceIndex, resourceCount, index, resource);
+        }
+        case LocaleDataType::FALLBACK_RESOURCE: {
+            return BinarySearchString(fallbackResourceIndex, fallbackResourceCount, index, fallbackResource);
+        }
+        default: {
+            return BinarySearchString(defaultResourceIndex, defaultResourceCount, index, defaultResource);
+        }
+    }
+}
+
+string DataResource::BinarySearchString(uint32_t *indexArray, uint32_t length, uint32_t target,
+    string *stringArray) const
+{
+    if ((indexArray == nullptr) || (stringArray == nullptr)) {
+        return "";
+    }
+    uint32_t low = 0;
+    uint32_t high = length - 1;
+    while (low <= high) {
+        uint32_t mid = low + ((high - low) >> 1);
+        uint32_t temp = indexArray[mid];
+        if (temp == target) {
+            return stringArray[mid];
+        } else if (temp < target) {
+            low = mid + 1;
+        } else {
+            high = mid - 1;
+        }
+    }
+    return "";
+}
+
+bool DataResource::Init(void)
+{
+    int32_t infile = open(gDataResourcePath, O_RDONLY);
+    if (infile < 0) {
+        return false;
+    }
+    bool ret = ReadHeader(infile);
+    if (!ret) {
+        close(infile);
+        return false;
+    }
+    if ((localesCount < 1) || (localesCount > MAX_LOCALE_ITEM_SIZE)) {
+        close(infile);
+        return false;
+    }
+    PrepareData(infile);
+    close(infile);
+    return true;
+}
+
+bool DataResource::ReadHeader(int32_t infile)
+{
+    int32_t seekSize = lseek(infile, GLOBAL_RESOURCE_HEADER_SKIP, SEEK_SET);
+    if (seekSize < 0) {
+        return false;
+    }
+    char cache[GLOBAL_RESOURCE_HEADER_LEFT] = {0};
+    int32_t readSize = read(infile, cache, GLOBAL_RESOURCE_HEADER_LEFT);
+    if (readSize != GLOBAL_RESOURCE_HEADER_LEFT) {
+        return false;
+    }
+    localesCount = ((static_cast<unsigned char>(cache[0]) << SHIFT_ONE_BYTE) | (static_cast<unsigned char>(cache[1])));
+    stringPoolOffset = ((static_cast<unsigned char>(cache[GLOBAL_RESOURCE_INDEX_OFFSET]) << SHIFT_ONE_BYTE) |
+        (static_cast<unsigned char>(cache[GLOBAL_RESOURCE_INDEX_OFFSET + 1])));
+    return true;
+}
+
+bool DataResource::PrepareData(int32_t infile)
+{
+    uint32_t localeSize = localesCount * GLOBAL_LOCALE_MASK_ITEM_SIZE;
+    char *locales = new(nothrow) char[localeSize];
+    if (locales == nullptr) {
+        return false;
+    }
+    int32_t readSize = read(infile, locales, localeSize);
+    if (readSize < 0 || localeSize != static_cast<uint32_t>(readSize)) {
+        delete[] locales;
+        locales = nullptr;
+        return false;
+    }
+    int32_t localeIndex = BinarySearchLocale(localeMask, reinterpret_cast<unsigned char*>(locales));
+    int32_t fallbackLocaleIndex = -1;
+    int32_t defaultLocaleIndex = -1;
+    GetFallbackAndDefaultLocaleIndex(fallbackLocaleIndex, defaultLocaleIndex, locales);
+    uint32_t configOffset = 0;
+    if (localeIndex >= 0) {
+        configOffset = ConvertUChar(reinterpret_cast<unsigned char*>(locales + GLOBAL_LOCALE_MASK_ITEM_SIZE *
+            localeIndex + GLOBAL_RESOURCE_MASK_OFFSET));
+        resourceCount = ConvertUChar(reinterpret_cast<unsigned char*>(locales + GLOBAL_LOCALE_MASK_ITEM_SIZE *
+            localeIndex + GLOBAL_RESOURCE_MASK_OFFSET + GLOBAL_RESOURCE_INDEX_OFFSET));
+    }
+    uint32_t fallbackConfigOffset = 0;
+    uint32_t defaultConfigOffset = 0;
+    GetFallbackAndDefaultInfo(fallbackLocaleIndex, defaultLocaleIndex, fallbackConfigOffset, defaultConfigOffset,
+        locales);
+    delete[] locales;
+    locales = nullptr;
+    bool ret = true;
+    if ((localeIndex >= 0) && (resourceCount > 0) &&
+        (resourceCount <= DataResourceType::GREGORIAN_STANDALONE_WIDE_MONTH + 1)) {
+        ret = PrepareLocaleData(infile, configOffset, resourceCount, LocaleDataType::RESOURCE);
+    }
+    if ((fallbackLocaleIndex >= 0) && !FullLoaded() && ret && (fallbackResourceCount > 0) &&
+        (fallbackResourceCount <= DataResourceType::GREGORIAN_STANDALONE_WIDE_MONTH + 1)) {
+        ret = PrepareLocaleData(infile, fallbackConfigOffset, fallbackResourceCount,
+            LocaleDataType::FALLBACK_RESOURCE);
+    }
+    if ((defaultLocaleIndex >= 0) && !FullLoaded() && ret && (defaultResourceCount > 0) &&
+        (defaultResourceCount <= DataResourceType::GREGORIAN_STANDALONE_WIDE_MONTH + 1)) {
+        ret = PrepareLocaleData(infile, defaultConfigOffset, defaultResourceCount, LocaleDataType::DEFAULT_RESOURCE);
+    }
+    return ret;
+}
+
+void DataResource::GetFallbackAndDefaultLocaleIndex(int32_t &fallbackLocaleIndex, int32_t &defaultLocaleIndex,
+    char* locales)
+{
+    if (fallbackMask != 0) {
+        fallbackLocaleIndex = BinarySearchLocale(fallbackMask, reinterpret_cast<unsigned char*>(locales));
+    }
+    if (defaultMask != 0) {
+        defaultLocaleIndex = BinarySearchLocale(defaultMask, reinterpret_cast<unsigned char*>(locales));
+    }
+}
+
+void DataResource::GetFallbackAndDefaultInfo(const int32_t &fallbackLocaleIndex, const int32_t &defaultLocaleIndex,
+    uint32_t &fallbackConfigOffset, uint32_t &defaultConfigOffset, char* locales)
+{
+    if (fallbackLocaleIndex != -1) {
+        fallbackConfigOffset = ConvertUChar(reinterpret_cast<unsigned char*>(locales + GLOBAL_LOCALE_MASK_ITEM_SIZE *
+            fallbackLocaleIndex + GLOBAL_RESOURCE_MASK_OFFSET));
+        fallbackResourceCount = ConvertUChar(reinterpret_cast<unsigned char*>(locales + GLOBAL_LOCALE_MASK_ITEM_SIZE *
+            fallbackLocaleIndex + GLOBAL_RESOURCE_MASK_OFFSET + GLOBAL_RESOURCE_INDEX_OFFSET));
+    }
+    if (defaultLocaleIndex != -1) {
+        defaultConfigOffset = ConvertUChar(reinterpret_cast<unsigned char*>(locales + GLOBAL_LOCALE_MASK_ITEM_SIZE *
+            defaultLocaleIndex + GLOBAL_RESOURCE_MASK_OFFSET));
+        defaultResourceCount = ConvertUChar(reinterpret_cast<unsigned char*>(locales + GLOBAL_LOCALE_MASK_ITEM_SIZE *
+            defaultLocaleIndex + GLOBAL_RESOURCE_MASK_OFFSET + GLOBAL_RESOURCE_INDEX_OFFSET));
+    }
+}
+
+bool DataResource::PrepareLocaleData(int32_t infile, uint32_t configOffset, uint32_t count, LocaleDataType type)
+{
+    currentType = type;
+    if (count < 1 || count > DataResourceType::GREGORIAN_STANDALONE_WIDE_MONTH + 1) {
+        return false;
+    }
+    uint32_t resourceSize = count * GLOBAL_RESOURCE_CONFIG_SIZE;
+    char *configs = new(nothrow) char[resourceSize];
+    if (configs == nullptr) {
+        return false;
+    }
+    int32_t seekSize = lseek(infile, configOffset, SEEK_SET);
+    if (configOffset != static_cast<uint32_t>(seekSize)) {
+        delete[] configs;
+        configs = nullptr;
+        return false;
+    }
+    int32_t readSize = read(infile, configs, resourceSize);
+    if (readSize != resourceSize) {
+        delete[] configs;
+        return false;
+    }
+    bool ret = GetStringFromStringPool(configs, resourceSize, infile, type);
+    delete[] configs;
+    return ret;
+}
+
+uint32_t DataResource::GetFinalCount(char *configs, uint32_t configSize, LocaleDataType type)
+{
+    uint32_t count = 0;
+    switch (type) {
+        case LocaleDataType::RESOURCE: {
+            count = resourceCount;
+            break;
+        }
+        case LocaleDataType::FALLBACK_RESOURCE: {
+            count = fallbackResourceCount;
+            break;
+        }
+        default: {
+            count = defaultResourceCount;
+        }
+    }
+    uint32_t finalCount = 0;
+    for (uint32_t i = 0; i < count; ++i) {
+        uint32_t index = ConvertUChar(reinterpret_cast<unsigned char*>(configs + i * GLOBAL_RESOURCE_CONFIG_SIZE));
+        if (index >= RESOURCE_COUNT) {
+            return 0;
+        }
+        if (loaded[index] != RESOURCE_COUNT) {
+            continue;
+        }
+        ++finalCount;
+    }
+    return finalCount;
+}
+
+bool DataResource::GetStringFromStringPool(char *configs, const uint32_t configsSize, int32_t infile,
+    LocaleDataType type)
+{
+    uint32_t finalCount = GetFinalCount(configs, configsSize, type);
+    if (finalCount == 0) {
+        return true;
+    }
+    uint32_t originalCount = 0;
+    switch (type) {
+        case LocaleDataType::RESOURCE: {
+            originalCount = resourceCount;
+            resourceCount = finalCount;
+            resourceIndex = new(nothrow) uint32_t[finalCount];
+            if (resourceIndex == nullptr) {
+                return false;
+            }
+            resource = new(nothrow) string[finalCount];
+            if (resource == nullptr) {
+                return false;
+            }
+            break;
+        }
+        case LocaleDataType::FALLBACK_RESOURCE: {
+            originalCount = fallbackResourceCount;
+            fallbackResourceCount = finalCount;
+            fallbackResourceIndex = new(nothrow) uint32_t[finalCount];
+            if (fallbackResourceIndex == nullptr) {
+                return false;
+            }
+            fallbackResource = new(nothrow) string[finalCount];
+            if (fallbackResource == nullptr) {
+                return false;
+            }
+            break;
+        }
+        default: {
+            originalCount = defaultResourceCount;
+            defaultResourceCount = finalCount;
+            defaultResourceIndex = new(nothrow) uint32_t[finalCount];
+            if (defaultResourceIndex == nullptr) {
+                return false;
+            }
+            defaultResource = new(nothrow) string[finalCount];
+            if (defaultResource == nullptr) {
+                return false;
+            }
+            break;
+        }
+    }
+    return Retrieve(configs, configsSize, infile, originalCount, type);
+}
+
+void DataResource::GetType(string* &adjustResource, uint32_t* &adjustResourceIndex, uint32_t &count,
+    LocaleDataType type)
+{
+    switch (type) {
+        case LocaleDataType::RESOURCE: {
+            adjustResource = resource;
+            adjustResourceIndex = resourceIndex;
+            count = resourceCount;
+            break;
+        }
+        case LocaleDataType::FALLBACK_RESOURCE: {
+            adjustResource = fallbackResource;
+            adjustResourceIndex = fallbackResourceIndex;
+            count = fallbackResourceCount;
+            break;
+        }
+        default: {
+            adjustResource = defaultResource;
+            adjustResourceIndex = defaultResourceIndex;
+            count = defaultResourceCount;
+            break;
+        }
+    }
+}
+
+bool DataResource::Retrieve(char *configs, uint32_t configsSize, int32_t infile, const uint32_t orginalCount,
+    LocaleDataType type)
+{
+    uint32_t count = 0;
+    string *adjustResource = nullptr;
+    uint32_t *adjustResourceIndex = nullptr;
+    GetType(adjustResource, adjustResourceIndex, count, type);
+    uint32_t currentIndex = 0;
+    for (uint32_t i = 0; i < orginalCount; ++i) {
+        uint32_t index = ConvertUChar(reinterpret_cast<unsigned char*>(configs + i * GLOBAL_RESOURCE_CONFIG_SIZE));
+        if (loaded[index] != RESOURCE_COUNT) {
+            continue;
+        }
+
+        uint32_t offset = ConvertUChar(reinterpret_cast<unsigned char*>(configs + i *
+            GLOBAL_RESOURCE_CONFIG_SIZE + GLOBAL_RESOURCE_INDEX_OFFSET));
+        uint32_t length = ConvertUChar(reinterpret_cast<unsigned char*>(configs + i *
+            GLOBAL_RESOURCE_CONFIG_SIZE + GLOBAL_RESOURCE_MASK_OFFSET));
+        int32_t seekSize = lseek(infile, stringPoolOffset + offset, SEEK_SET);
+        if ((length == 0) || (seekSize != stringPoolOffset + offset)) {
+            continue;
+        }
+        char *temp = new(nothrow) char[length];
+        if (temp == nullptr) {
+            return false;
+        }
+        int32_t readSize = read(infile, temp, length);
+        if ((readSize< 0) || (static_cast<uint32_t>(readSize) != length)) {
+            delete[] temp;
+            return false;
+        }
+
+        adjustResource[currentIndex] = string(temp, length);
+        adjustResourceIndex[currentIndex] = index;
+        delete[] temp;
+        switch (currentType) {
+            case LocaleDataType::RESOURCE: {
+                loaded[index] = RESOURCE_INDEX;
+                break;
+            }
+            case LocaleDataType::FALLBACK_RESOURCE: {
+                loaded[index] = FALLBACK_RESOURCE_INDEX;
+                break;
+            }
+            default: {
+                loaded[index] = DEFAULT_RESOURCE_INDEX;
+            }
+        }
+        ++currentIndex;
+    }
+    return true;
+}
+
+int32_t DataResource::BinarySearchLocale(const uint32_t mask, unsigned char *locales)
+{
+    if (locales == nullptr) {
+        return -1;
+    }
+    uint32_t low = 0;
+    uint32_t high = localesCount - 1;
+    while (low <= high) {
+        uint32_t mid = low + ((high - low) >> 1);
+        uint32_t midMask = ConvertUint(locales + mid * GLOBAL_LOCALE_MASK_ITEM_SIZE);
+        if (midMask == mask) {
+            return static_cast<int32_t>(mid);
+        } else if (midMask < mask) {
+            low = mid + 1;
+        } else {
+            high = mid - 1;
+        }
+    }
+    return -1;
+}
+
+uint32_t DataResource::ConvertUint(unsigned char *src)
+{
+    if (src == nullptr) {
+        return 0;
+    }
+    uint32_t ret = 0;
+    ret |= (src[0] << SHIFT_THREE_BYTE); // first byte
+    ret |= (src[1] << SHIFT_TWO_BYTE); // second byte
+    ret |= (src[2] << SHIFT_ONE_BYTE); // third byte
+    ret |= src[3]; // forth byte
+    return ret;
+}
+
+uint32_t DataResource::ConvertUChar(unsigned char *src)
+{
+    if (src == nullptr) {
+        return 0;
+    }
+    uint32_t ret = 0;
+    ret |= (src[0] << SHIFT_ONE_BYTE);
+    ret |= src[1];
+    return ret;
+}
+
+bool DataResource::FullLoaded()
+{
+    for (uint32_t i = 0; i < RESOURCE_COUNT; ++i) {
+        if (loaded[i] == RESOURCE_COUNT) {
+            return false;
+        }
+    }
+    return true;
+}
+
+uint32_t DataResource::GetFallbackMask(const LocaleInfo &src)
+{
+    const char *language = src.GetLanguage();
+    const char *script = src.GetScript();
+    const char *region = src.GetRegion();
+    if ((language == "en") && (script == nullptr)) {
+        return LocaleInfo("en", "", "US").GetMask();
+    }
+    if (region == nullptr) {
+        return LocaleInfo("en", "US").GetMask();
+    }
+    if (script == nullptr) {
+        return LocaleInfo(language, "", "").GetMask();
+    }
+    return LocaleInfo(language, script, "").GetMask();
+}
diff --git a/base/global/i18n_lite/frameworks/i18n/src/date_time_data.cpp b/base/global/i18n_lite/frameworks/i18n/src/date_time_data.cpp
new file mode 100755
index 00000000..12eb3ee1
--- /dev/null
+++ b/base/global/i18n_lite/frameworks/i18n/src/date_time_data.cpp
@@ -0,0 +1,146 @@
+/*
+ * Copyright (c) 2021 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "date_time_data.h"
+
+using namespace OHOS::I18N;
+
+using namespace std;
+
+DateTimeData::DateTimeData(const string &amPmMarkers, const char *sepAndHour, const int size)
+{
+    this->amPmMarkers = amPmMarkers;
+    // size must >= 2, The first 2 element of sepAndHour need to be extracted, the first element
+    // is the time separator and the second is the default hour.
+    if (sepAndHour && size >= 2) {
+        timeSeparator = sepAndHour[0];
+        defaultHour = sepAndHour[1];
+    }
+}
+
+/**
+ * split str with "_"
+ */
+string DateTimeData::Parse(const string &str, int32_t count)
+{
+    if (str.empty()) {
+        return "";
+    }
+    int length = str.size();
+    int tempCount = 0;
+    int ind = 0;
+    while ((ind < length) && (tempCount < count)) {
+        if (str.at(ind) == '_') {
+            ++tempCount;
+        }
+        ++ind;
+    }
+    int last = ind;
+    --ind;
+    while (last < length) {
+        if (str.at(last) == '_') {
+            break;
+        }
+        ++last;
+    }
+    if (last - ind - 1 <= 0) {
+        return "";
+    }
+    return str.substr(ind + 1, last - ind - 1);
+}
+
+string DateTimeData::GetMonthName(int32_t index, DateTimeDataType type)
+{
+    if ((index < 0) || (index >= MONTH_SIZE)) {
+        return "";
+    }
+    switch (type) {
+        case DateTimeDataType::FORMAT_ABBR: {
+            return Parse(formatAbbreviatedMonthNames, index);
+        }
+        case DateTimeDataType::FORMAT_WIDE: {
+            return Parse(formatWideMonthNames, index);
+        }
+        case DateTimeDataType::STANDALONE_ABBR: {
+            return Parse(standaloneAbbreviatedMonthNames, index);
+        }
+        default: {
+            return Parse(standaloneWideMonthNames, index);
+        }
+    }
+}
+
+string DateTimeData::GetDayName(int32_t index, DateTimeDataType type)
+{
+    if ((index < 0) || (index >= DAY_SIZE)) {
+        return "";
+    }
+    switch (type) {
+        case DateTimeDataType::FORMAT_ABBR: {
+            return Parse(formatAbbreviatedDayNames, index);
+        }
+        case DateTimeDataType::FORMAT_WIDE: {
+            return Parse(formatWideDayNames, index);
+        }
+        case DateTimeDataType::STANDALONE_ABBR: {
+            return Parse(standaloneAbbreviatedDayNames, index);
+        }
+        default: {
+            return Parse(standaloneWideDayNames, index);
+        }
+    }
+}
+
+string DateTimeData::GetAmPmMarker(int32_t index, DateTimeDataType type)
+{
+    if ((index < 0) || (index >= AM_SIZE)) {
+        return "";
+    }
+    return (amPmMarkers != "") ? Parse(amPmMarkers, index) : "";
+}
+
+char DateTimeData::GetTimeSeparator(void) const
+{
+    return timeSeparator;
+}
+
+char DateTimeData::GetDefaultHour(void) const
+{
+    return defaultHour;
+}
+
+std::string DateTimeData::GetPattern(int32_t index, PatternType type)
+{
+    switch (type) {
+        case PatternType::HOUR_MINUTE_SECOND_PATTERN: {
+            if ((index < 0) || (index >= HOUR_MINUTE_SECOND_PATTERN_SIZE)) {
+                return "";
+            }
+            return Parse(hourMinuteSecondPatterns, index);
+        }
+        case PatternType::REGULAR_PATTERN: {
+            if ((index < 0) || (index >= REGULAR_PATTERN_SIZE)) {
+                return "";
+            }
+            return Parse(patterns, index);
+        }
+        default: {
+            if ((index < 0) || (index >= FULL_MEDIUM_SHORT_PATTERN_SIZE)) {
+                return "";
+            }
+            return Parse(fullMediumShortPatterns, index);
+        }
+    }
+}
\ No newline at end of file
diff --git a/base/global/i18n_lite/frameworks/i18n/src/date_time_format.cpp b/base/global/i18n_lite/frameworks/i18n/src/date_time_format.cpp
new file mode 100755
index 00000000..412b89f0
--- /dev/null
+++ b/base/global/i18n_lite/frameworks/i18n/src/date_time_format.cpp
@@ -0,0 +1,145 @@
+/*
+ * Copyright (c) 2021 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "date_time_format.h"
+#include "data_resource.h"
+#include "date_time_format_impl.h"
+#include "number_format_impl.h"
+
+using namespace OHOS::I18N;
+using namespace std;
+
+/**
+ * construct a DateTimeFormat object with request pattern and locale.
+ * now we only support patterns defined in AvailableDateTimeFormatPatterns.
+ * locale, locale information to retrive datetime resource form icu data.
+ */
+DateTimeFormat::DateTimeFormat(AvailableDateTimeFormatPattern requestPattern, const LocaleInfo &locale)
+{
+    this->locale = locale;
+    this->requestPattern = requestPattern;
+}
+
+DateTimeFormat::~DateTimeFormat()
+{
+    if (impl != nullptr) {
+        delete impl;
+        impl = nullptr;
+    }
+}
+
+bool DateTimeFormat::Init()
+{
+    if (impl != nullptr) {
+        delete impl;
+        impl = nullptr;
+    }
+    impl = new(nothrow) DateTimeFormatImpl(requestPattern, locale);
+    if (impl == nullptr) {
+        return false;
+    }
+    DataResource resource(&locale);
+    bool isSuccess = resource.Init();
+    if (!isSuccess) {
+        return false;
+    }
+    isSuccess = impl->Init(resource);
+    if (!isSuccess) {
+        return false;
+    }
+    int status = I18nStatus::ISUCCESS;
+    NumberFormatImpl *numberFormatter = new(nothrow) NumberFormatImpl(locale, status);
+    if (numberFormatter == nullptr) {
+        delete impl;
+        impl = nullptr;
+        return false;
+    }
+    if (status != I18nStatus::ISUCCESS) {
+        delete numberFormatter;
+        numberFormatter = nullptr;
+        delete impl;
+        impl = nullptr;
+        return false;
+    }
+    isSuccess = numberFormatter->Init(resource);
+    if (!isSuccess) {
+        delete numberFormatter;
+        numberFormatter = nullptr;
+        delete impl;
+        impl = nullptr;
+        return false;
+    }
+    impl->SetNumberFormatter(numberFormatter);
+    return true;
+}
+
+/**
+ * parse a time (represent by the seconds elapsed from UTC 1970, January 1 00:00:00) to its text format.
+ * cal, seconds from from UTC 1970, January 1 00:00:00
+ * zoneInfoOffest, string representation of offsett such as "+01:45"
+ * appendTo, output of this method.
+ */
+void DateTimeFormat::Format(const time_t &cal, const string &zoneInfo, string &appendTo, I18nStatus &status)
+{
+    if (impl == nullptr) {
+        bool isSuccess = Init();
+        if (!isSuccess) {
+            return;
+        }
+    }
+    impl->Format(cal, zoneInfo, appendTo, status);
+}
+
+void DateTimeFormat::ApplyPattern(const AvailableDateTimeFormatPattern &requestPattern)
+{
+    if (this->requestPattern == requestPattern) {
+        return;
+    }
+    this->requestPattern = requestPattern;
+    Init();
+}
+
+std::string DateTimeFormat::GetWeekName(const int32_t &index, DateTimeDataType type)
+{
+    if (impl == nullptr) {
+        bool isSuccess = Init();
+        if (!isSuccess) {
+            return "";
+        }
+    }
+    return impl->GetWeekName(index, type);
+}
+
+std::string DateTimeFormat::GetMonthName(const int32_t &index, DateTimeDataType type)
+{
+    if (impl == nullptr) {
+        bool isSuccess = Init();
+        if (!isSuccess) {
+            return "";
+        }
+    }
+    return impl->GetMonthName(index, type);
+}
+
+std::string DateTimeFormat::GetAmPmMarker(const int32_t &index, DateTimeDataType type)
+{
+    if (impl == nullptr) {
+        bool isSuccess = Init();
+        if (!isSuccess) {
+            return "";
+        }
+    }
+    return impl->GetAmPmMarker(index, type);
+}
\ No newline at end of file
diff --git a/base/global/i18n_lite/frameworks/i18n/src/date_time_format_impl.cpp b/base/global/i18n_lite/frameworks/i18n/src/date_time_format_impl.cpp
new file mode 100755
index 00000000..9ef5e332
--- /dev/null
+++ b/base/global/i18n_lite/frameworks/i18n/src/date_time_format_impl.cpp
@@ -0,0 +1,524 @@
+/*
+ * Copyright (c) 2021 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "date_time_format_impl.h"
+#include "date_time_data.h"
+
+using namespace OHOS::I18N;
+using namespace std;
+
+/**
+ * construct a DateTimeFormat object with request pattern and locale.
+ * now we only support patterns defined in AvailableDateTimeFormatPatterns.
+ * locale, locale information to retrive datetime resource form icu data.
+ */
+DateTimeFormatImpl::DateTimeFormatImpl(AvailableDateTimeFormatPattern requestPattern, const LocaleInfo &locale)
+{
+    fLocale = locale;
+    this->requestPattern = requestPattern;
+}
+
+std::string DateTimeFormatImpl::GetWeekName(const int32_t &index, DateTimeDataType type) const
+{
+    return (data == nullptr) ? "" : data->GetDayName(index, type);
+}
+
+std::string DateTimeFormatImpl::GetMonthName(const int32_t &index, DateTimeDataType type) const
+{
+    return (data == nullptr) ? "" : data->GetMonthName(index, type);
+}
+
+std::string DateTimeFormatImpl::GetAmPmMarker(const int32_t &index, DateTimeDataType type) const
+{
+    return (data == nullptr) ? "" : data->GetAmPmMarker(index, type);
+}
+
+string DateTimeFormatImpl::GetStringFromPattern(const AvailableDateTimeFormatPattern &requestPattern) const
+{
+    if (!data) {
+        return "";
+    }
+    switch (requestPattern) {
+        case HOUR12_MINUTE_SECOND: {
+            string hourMinuteSecond = data->GetPattern(0, PatternType::HOUR_MINUTE_SECOND_PATTERN);
+            if (hourMinuteSecond != "") {
+                return hourMinuteSecond;
+            }
+            string hmPattern = data->GetPattern(HOUR12_MINUTE_INDEX, PatternType::REGULAR_PATTERN);
+            return AddSeconds(hmPattern);
+        }
+        case HOUR24_MINUTE_SECOND: {
+            string hourMinuteSecond = data->GetPattern(1, PatternType::HOUR_MINUTE_SECOND_PATTERN);
+            if (hourMinuteSecond != "") {
+                return hourMinuteSecond;
+            }
+            string hmPattern = data->GetPattern(HOUR24_MINUTE_INDEX, PatternType::REGULAR_PATTERN);
+            return AddSeconds(hmPattern);
+        }
+        case HOUR_MINUTE_SECOND: {
+            char defaultHour = data->GetDefaultHour();
+            if (defaultHour == 'h') {
+                string hourMinuteSecond = data->GetPattern(0, PatternType::HOUR_MINUTE_SECOND_PATTERN);
+                if (hourMinuteSecond != "") {
+                    return hourMinuteSecond;
+                }
+                string hmPattern = data->GetPattern(HOUR12_MINUTE_SECOND_INDEX, PatternType::REGULAR_PATTERN);
+                return AddSeconds(hmPattern);
+            }
+            string hourMinuteSecond = data->GetPattern(1, PatternType::HOUR_MINUTE_SECOND_PATTERN);
+            if (hourMinuteSecond != "") {
+                return hourMinuteSecond;
+            }
+            string hmPattern = data->GetPattern(HOUR24_MINUTE_SECOND_INDEX, PatternType::REGULAR_PATTERN);
+            return AddSeconds(hmPattern);
+        }
+        case ABBR_MONTH_DAY: {
+            return data->GetPattern(ABBR_MONTH_DAY_INDEX, PatternType::REGULAR_PATTERN);
+        }
+        case HOUR12_MINUTE: {
+            return data->GetPattern(HOUR12_MINUTE_INDEX, PatternType::REGULAR_PATTERN);
+        }
+        default: {
+            return GetStringFromPattern2(requestPattern);
+        }
+    }
+}
+
+string DateTimeFormatImpl::GetStringFromPattern2(const AvailableDateTimeFormatPattern &requestPattern) const
+{
+    switch (requestPattern) {
+        case HOUR24_MINUTE: {
+            return data->GetPattern(HOUR24_MINUTE_INDEX, PatternType::REGULAR_PATTERN);
+        }
+        case HOUR_MINUTE: {
+            char defaultHour = data->GetDefaultHour();
+            if (defaultHour == 'h') {
+                return data->GetPattern(HOUR12_MINUTE_INDEX, PatternType::REGULAR_PATTERN);
+            }
+            return data->GetPattern(HOUR24_MINUTE_INDEX, PatternType::REGULAR_PATTERN);
+        }
+        case ABBR_MONTH_WEEKDAY_DAY: {
+            return data->GetPattern(ABBR_MONTH_WEEKDAY_DAY_INDEX, PatternType::REGULAR_PATTERN);
+        }
+        case FULL: {
+            return data->GetPattern(FULL_DATE_INDEX, PatternType::FULL_MEDIUM_SHORT_PATTERN);
+        }
+        case MEDIUM: {
+            return data->GetPattern(MEDIUM_DATE_INDEX, PatternType::FULL_MEDIUM_SHORT_PATTERN);
+        }
+        case SHORT: {
+            return data->GetPattern(SHORT_DATE_INDEX, PatternType::FULL_MEDIUM_SHORT_PATTERN);
+        }
+        case YEAR_ABBR_MONTH_ABBR_WEEKDAY_DAY: {
+            return data->GetPattern(YEAR_ABBR_MONTH_ABBR_WEEKDAY_DAY_INDEX, PatternType::REGULAR_PATTERN);
+        }
+        case YEAR_WIDE_MONTH_ABBR_WEEKDAY_DAY: {
+            return data->GetPattern(YEAR_WIDE_MONTH_ABBR_WEEKDAY_DAY_INDEX, PatternType::REGULAR_PATTERN);
+        }
+        case YEAR_SHORT_MONTH_WIDE_WEEKDAY_DAY: {
+            return data->GetPattern(YEAR_SHORT_MONTH_WIDE_WEEKDAY_DAY_INDEX, PatternType::REGULAR_PATTERN);
+        }
+        case YEAR_SHORT_MONTH_ABBR_WEEKDAY_DAY: {
+            return data->GetPattern(YEAR_SHORT_MONTH_ABBR_WEEKDAY_DAY_INDEX, PatternType::REGULAR_PATTERN);
+        }
+        case YEAR_ABBR_MONTH_WIDE_WEEKDAY_DAY: {
+            return data->GetPattern(YEAR_ABBR_MONTH_WIDE_WEEKDAY_DAY_INDEX, PatternType::REGULAR_PATTERN);
+        }
+        case YEAR_WIDE_MONTH_DAY: {
+            return data->GetPattern(YEAR_WIDE_MONTH_DAY_INDEX, PatternType::REGULAR_PATTERN);
+        }
+        default: {
+            return "";
+        }
+    }
+}
+
+string DateTimeFormatImpl::AddSeconds(const string &hmPattern) const
+{
+    uint32_t size = hmPattern.size();
+    if (size == 0 || data == nullptr) {
+        return "";
+    }
+    int32_t i = hmPattern.size() - 1;
+    string out;
+    out.reserve(DECIMAL_COUNT); // allocate ten more bytes
+    while (i >= 0) {
+        if (hmPattern[i] == 'm') {
+            break;
+        }
+        --i;
+    }
+    out.append(hmPattern.substr(0, i + 1));
+    out.append(1, data->GetTimeSeparator());
+    out.append("ss");
+    out.append(hmPattern.substr(i + 1, hmPattern.size() - i - 1));
+    return out;
+}
+
+DateTimeFormatImpl::~DateTimeFormatImpl()
+{
+    FreeResource();
+}
+
+bool DateTimeFormatImpl::Init(const DataResource &resource)
+{
+    std::string formatAbbreviatedMonthNames = resource.GetString(DataResourceType::GREGORIAN_FORMAT_ABBR_MONTH);
+    std::string formatWideMonthNames = resource.GetString(DataResourceType::GREGORIAN_FORMAT_WIDE_MONTH);
+    std::string standaloneAbbreviatedMonthNames =
+        resource.GetString(DataResourceType::GREGORIAN_STANDALONE_ABBR_MONTH);
+    std::string standaloneWideMonthNames = resource.GetString(DataResourceType::GREGORIAN_STANDALONE_WIDE_MONTH);
+    std::string formatAbbreviatedDayNames = resource.GetString(DataResourceType::GREGORIAN_FORMAT_ABBR_DAY);
+    std::string formatWideDayNames = resource.GetString(DataResourceType::GREGORIAN_FORMAT_WIDE_DAY);
+    std::string standaloneAbbreviatedDayNames = resource.GetString(DataResourceType::GREGORIAN_STANDALONE_ABBR_DAY);
+    std::string standaloneWideDayNames = resource.GetString(DataResourceType::GREGORIAN_STANDALONE_WIDE_DAY);
+    std::string amPmMarkers = resource.GetString(DataResourceType::GREGORIAN_AM_PMS);
+    std::string patterns = resource.GetString(DataResourceType::GREGORIAN_TIME_PATTERNS) + "_" +
+        resource.GetString(DataResourceType::GREGORIAN_DATE_PATTERNS);
+    std::string timeSeparator = resource.GetString(DataResourceType::TIME_SEPARATOR);
+    std::string defaultHour = resource.GetString(DataResourceType::DEFAULT_HOUR);
+    std::string hourMinuteSecondPatterns = resource.GetString(DataResourceType::GREGORIAN_HOUR_MINUTE_SECOND_PATTERN);
+    std::string fullMediumShortPatterns = resource.GetString(DataResourceType::GREGORIAN_FULL_MEDIUM_SHORT_PATTERN);
+    char sepAndHour[SEP_HOUR_SIZE];
+    if ((timeSeparator.size() < 1) || (defaultHour.size() < 1)) {
+        return false;
+    }
+    sepAndHour[0] = timeSeparator[0];
+    sepAndHour[1] = defaultHour[0];
+    data = new(nothrow) DateTimeData(amPmMarkers, sepAndHour, 2); // 2 is length of sepAndHour
+    if (data == nullptr) {
+        return false;
+    }
+    data->SetMonthNamesData(formatAbbreviatedMonthNames, formatWideMonthNames,
+        standaloneAbbreviatedMonthNames, standaloneWideMonthNames);
+    data->SetDayNamesData(formatAbbreviatedDayNames, formatWideDayNames,
+        standaloneAbbreviatedDayNames, standaloneWideDayNames);
+    data->SetPatternsData(patterns, hourMinuteSecondPatterns, fullMediumShortPatterns);
+    fPattern = GetStringFromPattern(requestPattern);
+    return true;
+}
+
+void DateTimeFormatImpl::FreeResource()
+{
+    if (data != nullptr) {
+        delete data;
+        data = nullptr;
+    }
+    if (numberFormat != nullptr) {
+        delete numberFormat;
+        numberFormat = nullptr;
+    }
+}
+
+void DateTimeFormatImpl::ApplyPattern(const AvailableDateTimeFormatPattern &requestPattern)
+{
+    fPattern = GetStringFromPattern(requestPattern);
+}
+
+LocaleInfo DateTimeFormatImpl::GetLocale()
+{
+    return fLocale;
+}
+
+/**
+ * parse a time (represent by the seconds elapsed from UTC 1970, January 1 00:00:00) to its text format.
+ * cal, seconds from from UTC 1970, January 1 00:00:00
+ * zoneInfoOffest, string representation of offsett such as "+01:45"
+ * appendTo, output of this method.
+ */
+void DateTimeFormatImpl::Format(const time_t &cal, const string &zoneInfo, string &appendTo, I18nStatus &status) const
+{
+    bool inQuote = false;
+    char pre = '\0';
+    uint32_t count = 0;
+    const time_t adjust = cal + ParseZoneInfo(zoneInfo);
+    struct tm tmStruct = {0};
+    tm *tmPtr = &tmStruct;
+    gmtime_r(&adjust, tmPtr);
+
+    const tm time = *tmPtr;
+    for (size_t i = 0; i < fPattern.size(); ++i) {
+        char current = fPattern.at(i);
+        if ((current != pre) && (count != 0)) {
+            Process(time, appendTo, pre, count, status);
+            count = 0;
+        }
+        if (current == QUOTE) {
+            if ((i + 1 < fPattern.size()) && fPattern[i + 1] == QUOTE) {
+                appendTo.append(1, QUOTE);
+                ++i;
+            } else {
+                inQuote = !inQuote;
+            }
+        } else if (!inQuote && (((current >= 'a') && (current <= 'z')) || ((current >= 'A') && (current <= 'Z')))) {
+            pre = current;
+            ++count;
+        } else {
+            appendTo.append(1, current);
+        }
+    }
+
+    if (count != 0) {
+        Process(time, appendTo, pre, count, status);
+    }
+}
+
+/**
+ * parse zoneInfo string such as “+1:45” to 1 hour 45 minutes = 3600 * 1 + 45 * 60 seconds
+ */
+int32_t DateTimeFormatImpl::ParseZoneInfo(const string &zoneInfo) const
+{
+    int32_t ret = 0;
+    uint32_t size = zoneInfo.size();
+    if (size == 0) {
+        return ret;
+    }
+    bool sign = true;
+    uint32_t index = 0;
+    if (zoneInfo[index] == '+') {
+        ++index;
+    } else if (zoneInfo[index] == '-') {
+        ++index;
+        sign = false;
+    }
+
+    uint32_t hour = 0;
+    uint32_t minute = 0;
+    bool isHour = true;
+    uint32_t temp = 0;
+    while (index < size) {
+        char cur = zoneInfo[index];
+        if (isdigit(cur)) {
+            temp *= DECIMAL_COUNT; // convert string to its decimal format
+            temp += (cur - '0');
+            ++index;
+        } else if (cur == ':' && isHour) {
+            hour = temp;
+            temp = 0;
+            ++index;
+            isHour = false;
+        } else {
+            return 0;
+        }
+    }
+    if (!isHour && (temp != 0)) {
+        minute = temp;
+    }
+    ret = SECONDS_IN_HOUR * hour + minute * SECONDS_IN_MINUTE;
+
+    if (!sign) {
+        return -ret;
+    }
+    return ret;
+}
+
+/**
+ * convert a UTC seconds to its string format
+ */
+void DateTimeFormatImpl::Process(const tm &time, string &appendTo, char pre, uint32_t count, I18nStatus &status) const
+{
+    if ((status != I18nStatus::ISUCCESS) || !data) {
+        return;
+    }
+    if (IsTimeChar(pre)) {
+        ProcessTime(time, appendTo, pre, count, status);
+        return;
+    }
+    switch (pre) {
+        case 'L': {
+            int32_t standaloneMonth = time.tm_mon;
+            if (count == WIDE_COUNT) {
+                appendTo.append(data->GetMonthName(standaloneMonth, DateTimeDataType::STANDALONE_WIDE));
+            } else if (count == ABB_COUNT) {
+                appendTo.append(data->GetMonthName(standaloneMonth, DateTimeDataType::STANDALONE_ABBR));
+            } else {
+                ZeroPadding(appendTo, count, MAX_COUNT, standaloneMonth + 1);
+            }
+            break;
+        }
+        case 'M': {
+            int32_t month = time.tm_mon;
+            if (count == WIDE_COUNT) {
+                appendTo.append(data->GetMonthName(month, DateTimeDataType::FORMAT_WIDE));
+            } else if (count == ABB_COUNT) {
+                appendTo.append(data->GetMonthName(month, DateTimeDataType::FORMAT_ABBR));
+            } else {
+                ZeroPadding(appendTo, count, MAX_COUNT, month + 1);
+            }
+            break;
+        }
+        default: {
+            ProcessWeekDayYear(time, appendTo, pre, count, status);
+        }
+    }
+}
+
+void DateTimeFormatImpl::ProcessWeekDayYear(const tm &time, string &appendTo, char pre,
+    uint32_t count, I18nStatus &status) const
+{
+    switch (pre) {
+        case 'c': {
+            int32_t standaloneWeekDay = time.tm_wday;
+            if (count == WIDE_COUNT) {
+                appendTo.append(data->GetDayName(standaloneWeekDay, DateTimeDataType::STANDALONE_WIDE));
+            } else if (count == ABB_COUNT) {
+                appendTo.append(data->GetDayName(standaloneWeekDay, DateTimeDataType::STANDALONE_ABBR));
+            } else {
+                ZeroPadding(appendTo, count, MAX_COUNT, standaloneWeekDay);
+            }
+            break;
+        }
+        // case 'c':
+        case 'e':
+        case 'E': {
+            int32_t weekDay = time.tm_wday;
+            if (count == WIDE_COUNT) {
+                appendTo.append(data->GetDayName(weekDay, DateTimeDataType::FORMAT_WIDE));
+            } else if (count == ABB_COUNT) {
+                appendTo.append(data->GetDayName(weekDay, DateTimeDataType::FORMAT_ABBR));
+            } else {
+                ZeroPadding(appendTo, count, MAX_COUNT, weekDay);
+            }
+            break;
+        }
+        case 'd': {
+            int32_t day = time.tm_mday;
+            ZeroPadding(appendTo, count, MAX_COUNT, day);
+            break;
+        }
+        case 'y': {
+            int32_t year = time.tm_year + YEAR_START;
+            if (count == SHORT_YEAR_FORMAT_COUNT) {
+                int adjustYear = year - (year / ONE_HUNDRED_YEAR) * ONE_HUNDRED_YEAR;
+                ZeroPadding(appendTo, count, MAX_COUNT, adjustYear);
+            } else {
+                appendTo.append(FormatYear(year));
+            }
+            break;
+        }
+        default: {
+            return;
+        }
+    }
+}
+
+bool DateTimeFormatImpl::IsTimeChar(char ch) const
+{
+    string timeCharacters = "ahHkKms:";
+    return (timeCharacters.find(ch) != string::npos) ? true : false;
+}
+
+void DateTimeFormatImpl::ProcessTime(const tm &time, string &appendTo, char pre,
+    uint32_t count, I18nStatus &status) const
+{
+    switch (pre) {
+        case 'a': {
+            int32_t index = (time.tm_hour < LENGTH_HOUR) ? 0 : 1;
+            string amText = data->GetAmPmMarker(index, DateTimeDataType::FORMAT_ABBR);
+            appendTo.append(amText);
+            break;
+        }
+        // deal with hour.
+        // input is in the range of 0, 23. And final representation is in the range of 1, 12
+        case 'h': {
+            int32_t hour = (time.tm_hour == 0) ? LENGTH_HOUR : time.tm_hour;
+            int32_t index = (hour > LENGTH_HOUR) ? (hour - LENGTH_HOUR) : hour;
+            ZeroPadding(appendTo, count, MAX_COUNT, index);
+            break;
+        }
+        case 'H': {
+            int32_t hour = time.tm_hour;
+            ZeroPadding(appendTo, count, MAX_COUNT, hour);
+            break;
+        }
+        case 'K': {
+            int32_t hour = time.tm_hour;
+            int32_t index = (hour >= LENGTH_HOUR) ? (hour - LENGTH_HOUR) : hour;
+            ZeroPadding(appendTo, count, MAX_COUNT, index);
+            break;
+        }
+        case 'k': {
+            int32_t hour = time.tm_hour + 1;
+            ZeroPadding(appendTo, count, MAX_COUNT, hour);
+            break;
+        }
+        case 'm': {
+            int32_t minute = time.tm_min;
+            ZeroPadding(appendTo, count, MAX_COUNT, minute);
+            break;
+        }
+        case 's': {
+            int32_t second = time.tm_sec;
+            ZeroPadding(appendTo, count, MAX_COUNT, second);
+            break;
+        }
+        case ':': {
+            appendTo.append(1, data->GetTimeSeparator());
+        }
+        default:
+            return;
+    }
+}
+
+/**
+ * Padding numbers with 0, minValue is the requested minimal length of the output number
+ */
+void DateTimeFormatImpl::ZeroPadding(string &appendTo, uint32_t minValue, uint32_t maxValue, int32_t value) const
+{
+    // value should >= 0
+    if (value < 0) {
+        return;
+    }
+    uint32_t adjustValue = (minValue < maxValue) ? minValue : maxValue;
+    uint32_t count = GetLength(value);
+    string temp = "";
+    while (count < adjustValue) {
+        temp += GetZero();
+        ++count;
+    }
+    string tempOut = FormatNumber(value);
+    temp += FormatNumber(value);
+    appendTo.append(temp);
+}
+
+string DateTimeFormatImpl::FormatNumber(int32_t value) const
+{
+    int status = 0;
+    return numberFormat ? numberFormat->Format(value, status) : to_string(value);
+}
+
+string DateTimeFormatImpl::GetZero() const
+{
+    int status = 0;
+    return numberFormat ? numberFormat->Format(0, status) : "0";
+}
+
+uint32_t DateTimeFormatImpl::GetLength(int32_t value) const
+{
+    if (value < DECIMAL_COUNT) {
+        return 1;
+    }
+    uint32_t count = 0;
+    uint32_t temp = value;
+    while (temp) {
+        ++count;
+        temp = temp / DECIMAL_COUNT;
+    }
+    return count;
+}
+string DateTimeFormatImpl::FormatYear(int32_t value) const
+{
+    int status = 0;
+    return numberFormat ? numberFormat->FormatNoGroup(value, status) : to_string(value);
+}
diff --git a/base/global/i18n_lite/frameworks/i18n/src/locale_info.cpp b/base/global/i18n_lite/frameworks/i18n/src/locale_info.cpp
new file mode 100755
index 00000000..2a6b6cab
--- /dev/null
+++ b/base/global/i18n_lite/frameworks/i18n/src/locale_info.cpp
@@ -0,0 +1,272 @@
+/*
+ * Copyright (c) 2021 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "locale_info.h"
+#include "securec.h"
+#include "str_util.h"
+#include "types.h"
+
+using namespace OHOS::I18N;
+
+void LocaleInfo::Init(const char *newLang, const char *newScript, const char *newRegion, int &status)
+{
+    id = nullptr;
+    status = IERROR;
+    if (newLang == nullptr) {
+        return;
+    }
+    int langLength = LenCharArray(newLang);
+    if ((langLength > LANG_MAX_LENGTH) || (langLength < LANG_MIN_LENGTH)) { // language consists of two or three letters
+        return;
+    }
+    int idLength = langLength;
+    language = NewArrayAndCopy(newLang, langLength);
+    int scriptLength = 0;
+    std::string idStr(newLang);
+
+    // script consists of four letters
+    if (newScript != nullptr) {
+        if ((scriptLength = LenCharArray(newScript)) == SCRIPT_LENGTH) {
+            script = NewArrayAndCopy(newScript, scriptLength);
+            idLength = idLength + scriptLength + 1;
+        }
+        if (scriptLength != 0) {
+            idStr = idStr + "-" + newScript;
+        }
+    }
+    int regionLength = 0;
+    if (newRegion != nullptr) {
+        if ((regionLength = LenCharArray(newRegion)) == REGION_LENGTH) {
+            region = NewArrayAndCopy(newRegion, regionLength);
+            idLength = idLength + regionLength + 1;
+        }
+        if (regionLength != 0) {
+            idStr = idStr + "-" + newRegion;
+        }
+    }
+
+    id = NewArrayAndCopy(idStr.data(), idLength);
+    status = ISUCCESS;
+}
+
+LocaleInfo::LocaleInfo(const char *newLang, const char *newScript, const char *newRegion)
+{
+    int status = ISUCCESS;
+    Init(newLang, newScript, newRegion, status);
+    if (status != ISUCCESS) {
+        SetFail();
+    }
+}
+
+bool LocaleInfo::IsDefaultLocale() const
+{
+    if ((GetLanguage() == nullptr) || (GetRegion() == nullptr)) {
+        return false;
+    }
+    return ((strcmp(GetLanguage(), "en") == 0) && (strcmp(GetRegion(), "US") == 0));
+}
+
+LocaleInfo::LocaleInfo(const char *newLang, const char *newRegion)
+{
+    int status = ISUCCESS;
+    Init(newLang, nullptr, newRegion, status);
+    if (status != ISUCCESS) {
+        SetFail();
+    }
+}
+
+LocaleInfo::LocaleInfo()
+{
+    id = nullptr;
+    SetFail();
+}
+
+LocaleInfo::LocaleInfo(const LocaleInfo &o)
+{
+    int status = ISUCCESS;
+    Init(o.language, o.script, o.region, status);
+    if (status != ISUCCESS) {
+        SetFail();
+    }
+}
+
+LocaleInfo::~LocaleInfo()
+{
+    if (language != nullptr) {
+        delete[] language;
+        language = nullptr;
+    }
+    if (script != nullptr) {
+        delete[] script;
+        script = nullptr;
+    }
+    if (region != nullptr) {
+        delete[] region;
+        region = nullptr;
+    }
+    if (id != nullptr) {
+        delete[] id;
+        id = nullptr;
+    }
+}
+
+bool LocaleInfo::operator == (const LocaleInfo &other) const
+{
+    bool ret = CompareLocaleItem(language, other.language);
+    if (!ret) {
+        return false;
+    }
+    ret = CompareLocaleItem(script, other.script);
+    if (!ret) {
+        return false;
+    }
+    ret = CompareLocaleItem(region, other.region);
+    return ret;
+}
+
+LocaleInfo &LocaleInfo::operator = (const LocaleInfo &o)
+{
+    if (&o == this) {
+        return *this;
+    }
+    if ((language != nullptr) && (LenCharArray(language) > 0)) {
+        delete[] language;
+        language = nullptr;
+    }
+    if ((script != nullptr) && (LenCharArray(script) > 0)) {
+        delete[] script;
+        script = nullptr;
+    }
+    if ((region != nullptr) && (LenCharArray(region) > 0)) {
+        delete[] region;
+        region = nullptr;
+    }
+    if ((id != nullptr) && (LenCharArray(id) > 0)) {
+        delete[] id;
+        id = nullptr;
+    }
+    if (o.language != nullptr) {
+        language = NewArrayAndCopy(o.language, strlen(o.language));
+    }
+    if (o.script != nullptr) {
+        script = NewArrayAndCopy(o.script, strlen(o.script));
+    }
+    if (o.region != nullptr) {
+        region = NewArrayAndCopy(o.region, strlen(o.region));
+    }
+    if (o.id != nullptr) {
+        id = NewArrayAndCopy(o.id, LenCharArray(o.id));
+    }
+    return *this;
+}
+
+const char *LocaleInfo::GetLanguage() const
+{
+    return language;
+}
+
+const char *LocaleInfo::GetScript() const
+{
+    return script;
+}
+
+const char *LocaleInfo::GetRegion() const
+{
+    return region;
+}
+
+const char *LocaleInfo::GetId() const
+{
+    const char *rid = id;
+    return rid;
+}
+
+bool LocaleInfo::IsSuccess()
+{
+    bool r = isSucc;
+    isSucc = true;
+    return r;
+}
+
+void LocaleInfo::SetFail()
+{
+    isSucc = false;
+}
+
+bool LocaleInfo::ChangeLanguageCode(char *lang, const int32_t dstSize, const char *src, const int32_t srcSize) const
+{
+    if (srcSize > LANG_MIN_LENGTH) { // three letter language only support fil and mai
+        if ((language[0] == 'f') && (language[1] == 'i') && (language[LANG_MIN_LENGTH] == 'l')) {
+            lang[0] = 't';
+            lang[1] = 'l';
+        } else if ((language[0] == 'm') && (language[1] == 'a') && (language[LANG_MIN_LENGTH] == 'i')) {
+            lang[0] = 'm';
+            lang[1] = 'd';
+        }
+    } else {
+        errno_t rc = strcpy_s(lang, dstSize, language);
+        if (rc != EOK) {
+            return false;
+        }
+    }
+    if ((srcSize == LANG_MIN_LENGTH) && (language[0] == 'h') && (language[1] == 'e')) {
+        lang[0] = 'i';
+        lang[1] = 'w';
+    } else if ((srcSize == LANG_MIN_LENGTH) && (language[0] == 'i') && (language[1] == 'd')) {
+        lang[0] = 'i';
+        lang[1] = 'n';
+    }
+    return true;
+}
+
+uint32_t LocaleInfo::GetMask() const
+{
+    if (language == nullptr) {
+        return 0;
+    }
+    char lang[LANG_MAX_LENGTH];
+    bool isRight = ChangeLanguageCode(lang, LANG_MAX_LENGTH, language, LenCharArray(language));
+    if (!isRight) {
+        return 0;
+    }
+    // use 7bit to represent an English letter,
+    // 32--- language ---18--- script ---14--- region ---0
+    uint32_t tempLangFirst = (lang[0] - CHAR_OFF);
+    uint32_t tempLangSecond = (lang[1] - CHAR_OFF);
+    uint32_t mask = (tempLangFirst << LANG_FIRST_BEGIN) | (tempLangSecond << LANG_SECOND_BEGIN);
+    if ((script != nullptr) && (LenCharArray(script) > 0)) {
+        if (strcmp(script, "Hans") == 0) {
+            mask = mask | (HANS << SCRIPT_BEGIN);
+        } else if (strcmp(script, "Hant") == 0) {
+            mask = mask | (HANT << SCRIPT_BEGIN);
+        } else if (strcmp(script, "Latn") == 0) {
+            mask = mask | (LATN << SCRIPT_BEGIN);
+        } else if (strcmp(script, "Qaag") == 0) {
+            mask = mask | (QAAG << SCRIPT_BEGIN);
+        } else if (strcmp(script, "Cyrl") == 0) {
+            mask = mask | (CYRL << SCRIPT_BEGIN);
+        } else if (strcmp(script, "Deva") == 0) {
+            mask = mask | (DEVA << SCRIPT_BEGIN);
+        } else if (strcmp(script, "Guru") == 0) {
+            mask = mask | (GURU << SCRIPT_BEGIN);
+        }
+    }
+    if ((region != nullptr) && (LenCharArray(region) > 1)) {
+        uint32_t tempRegion = (region[0] - CHAR_OFF);
+        uint32_t tempRegionSecond = (region[1] - CHAR_OFF);
+        mask = mask | (tempRegion << REGION_FIRST_LETTER) | (tempRegionSecond);
+    }
+    return mask;
+}
\ No newline at end of file
diff --git a/base/global/i18n_lite/frameworks/i18n/src/number_data.cpp b/base/global/i18n_lite/frameworks/i18n/src/number_data.cpp
new file mode 100755
index 00000000..41b7ca29
--- /dev/null
+++ b/base/global/i18n_lite/frameworks/i18n/src/number_data.cpp
@@ -0,0 +1,380 @@
+/*
+ * Copyright (c) 2021 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "number_data.h"
+#include "securec.h"
+#include "str_util.h"
+
+using namespace OHOS::I18N;
+
+StyleData::StyleData(const StyleData &data)
+{
+    decLen = data.decLen;
+    decZeroLen = data.decZeroLen;
+    suffixZero = data.suffixZero;
+    intLen = data.intLen;
+    preZero = data.preZero;
+    if (data.numFormat != nullptr) {
+        int len = LenCharArray(data.numFormat);
+        numFormat = NewArrayAndCopy(data.numFormat, len);
+    }
+    if (data.entireFormat != nullptr) {
+        int len = LenCharArray(data.entireFormat);
+        entireFormat = NewArrayAndCopy(data.entireFormat, len);
+    }
+}
+
+StyleData::~StyleData()
+{
+    if (numFormat != nullptr) {
+        delete[] numFormat;
+        numFormat = nullptr;
+    }
+    if (entireFormat != nullptr) {
+        delete[] entireFormat;
+        entireFormat = nullptr;
+    }
+}
+
+StyleData &StyleData::operator=(const StyleData &data)
+{
+    decLen = data.decLen;
+    decZeroLen = data.decZeroLen;
+    suffixZero = data.suffixZero;
+    intLen = data.intLen;
+    preZero = data.preZero;
+    if (data.numFormat != nullptr) {
+        int len = LenCharArray(data.numFormat);
+        numFormat = NewArrayAndCopy(data.numFormat, len);
+    }
+    if (data.entireFormat != nullptr) {
+        int len = LenCharArray(data.entireFormat);
+        entireFormat = NewArrayAndCopy(data.entireFormat, len);
+    }
+    return *this;
+}
+
+void NumberData::SetNumSystem(std::string *numSym, const int numSize)
+{
+    if (numSym == nullptr || numSize <= 0) {
+        return;
+    }
+    ArrayCopy(nativeNums, NUM_SIZE, numSym, numSize);
+    if (!(numSym[0]).empty() && ((numSym[0]).at(0) != '0')) {
+        isNative = true;
+    }
+}
+
+void NumberData::Init(const char *pat, int patLen, const char *percentPat, int perPatLen)
+{
+    if (pat == nullptr || patLen <= 0 || percentPat == nullptr || perPatLen <= 0) {
+        return;
+    }
+    pattern = NewArrayAndCopy(pat, patLen);
+    percentPattern = NewArrayAndCopy(percentPat, perPatLen);
+    percentStyle.type = PERCENT;
+    if (pattern != nullptr) {
+        ParsePattern(pattern, patLen, style);
+    }
+    if (percentPattern != nullptr) {
+        ParsePattern(percentPattern, perPatLen, percentStyle);
+    }
+}
+
+void NumberData::InitSign(const std::string *signs, int size)
+{
+    if (signs == nullptr || size < PERCENT_SIGN_INDEX) {
+        return;
+    }
+    std::string decSign = signs[0]; // use array to store num data, first is decimal sign
+    std::string groupSign = signs[1]; // use array to store num data, second is group sign
+    std::string perSign = signs[PERCENT_SIGN_INDEX]; // use array to store num data, third is percent sign
+    const char *td = decSign.c_str();
+    decimal = NewArrayAndCopy(td, LenCharArray(td));
+    const char *tdg = groupSign.c_str();
+    group = NewArrayAndCopy(tdg, LenCharArray(tdg));
+    const char *tdp = perSign.c_str();
+    percent = NewArrayAndCopy(tdp, LenCharArray(tdp));
+}
+
+void NumberData::ParsePattern(const char *pattern, const int len, StyleData &styleData)
+{
+    if (pattern == nullptr || len <= 0) {
+        return;
+    }
+    bool isDec = false;
+    int decLen = 0;
+    int decZeroLen = 0;
+    if (strcmp(pattern, "#,##,##0.###") == 0) {
+        styleData.isTwoGroup = true;
+    }
+    for (int i = 0; i < len; i++) { // calculate the format after decimal sign
+        char temp = pattern[i];
+        if (temp == '.') {
+            isDec = true;
+            continue;
+        }
+        if (isDec) {
+            if (temp == '#') {
+                decLen++;
+            } else if (temp == '0') {
+                decLen++;
+                decZeroLen++;
+                styleData.suffixZero = true;
+            }
+        }
+    }
+    if (!isPercent && (maxDecimalLength != -1)) {
+        styleData.decLen = maxDecimalLength;
+        decLen = maxDecimalLength;
+    } else {
+        styleData.decLen = decLen;
+    }
+    styleData.decZeroLen = decZeroLen;
+    int intEndPos = len - decLen; // cal how many must zero before decimal
+    CalculateIntLength(intEndPos, pattern, len, styleData, isDec);
+    char *format = new(std::nothrow) char[NUMBER_FORMAT_LENGTH];
+    if (format == nullptr) {
+        SetFail();
+        return;
+    }
+    if (snprintf_s(format, NUMBER_FORMAT_LENGTH, NUMBER_FORMAT_LENGTH - 1, NUMBER_FORMAT, decLen) == -1) {
+        SetFail();
+        delete[] format;
+        format = nullptr;
+        return;
+    }
+    styleData.numFormat = format;
+    if (styleData.type == PERCENT) { // parse percent
+        ParseStartPerPattern(pattern, len, styleData);
+    }
+}
+
+void NumberData::CalculateIntLength(int &intEndPos, const char *pattern, const int len,
+    StyleData &styleData, bool isDec)
+{
+    if (pattern == nullptr || len <= 0) {
+        return;
+    }
+    (void) len;
+    if (isDec) {
+        intEndPos--;
+    }
+    int intLen = 0;
+    for (; intEndPos > 0; intEndPos--) {
+        char temp = pattern[intEndPos - 1];
+        if (temp == '0') {
+            styleData.preZero = true;
+            intLen++;
+        }
+    }
+    styleData.intLen = intLen;
+}
+
+void NumberData::ParseStartPerPattern(const char *pattern, const int len, StyleData &styleData) const
+{
+    if (pattern == nullptr || len <= 0) {
+        return;
+    }
+
+    // parse the percent sign and position
+    int perSignPos = UNKOWN; // 0 : no percent 1:left 2:right;
+    int hasSpace = 0;
+    int space = 0; // 0 = 0020 1 = c2a0
+    if (pattern[0] == '%') {
+        perSignPos = LEFT;
+        if ((len >= 2) && pattern[1] == ' ') { // length >= 2 guarantees that we can safely get second byte
+            hasSpace = 1;
+        }
+
+        // length >= 3 guarantees that we can safely get third byte
+        if ((len >= 3) && (static_cast<int>(pattern[2]) == ARABIC_NOBREAK_ONE) &&
+            (static_cast<int>(pattern[1]) == ARABIC_NOBREAK_TWO)) {
+            // the last two char is no break space (c2a0)
+            hasSpace = 1;
+            space = 1;
+        }
+    } else if (pattern[len - 1] == '%') {
+        perSignPos = RIGHT; // percent in right
+        if ((len >= 2) && (pattern[len - 2] == ' ')) { // the last but one is space
+            hasSpace = 1;
+        }
+
+        // length >= 3 guarantees that we can safely get third byte
+        if ((len >= 3) &&
+            (static_cast<signed char>(pattern[len - 2]) == ARABIC_NOBREAK_ONE) && // the reciprocal second
+            (static_cast<signed char>(pattern[len - 3]) == ARABIC_NOBREAK_TWO)) { // the reciprocal third
+            // the last two chars is no break space (c2a0)
+            hasSpace = 1;
+            space = 1;
+        }
+    }
+    int info[INFO_SIZE] = { perSignPos, hasSpace, space };
+    ParseOtherPerPattern(pattern, len, styleData, info, PERCENT_INFO_SIZE);
+}
+
+void NumberData::ParseOtherPerPattern(const char *pattern, const int len,
+    StyleData &styleData, const int *info, const int infoSize) const
+{
+    if (pattern == nullptr || len < 2 || infoSize < 3) {
+        return;
+    }
+    int perSignPos = info[0]; // use array to store percent sign and space data, first is percent sign postion
+    int hasSpace = info[1]; // use array to store percent sign and space data, second is hash space or not
+    int space = info[2]; // use array to store percent sign and space data, second is space type
+    if (perSignPos > 0) {
+        std::string type;
+        if (perSignPos == 1) {
+            type = "%%%s";
+            if ((hasSpace > 0) && (space == 0)) {
+                type = "%% %s";
+            } else if ((hasSpace > 0) && (space == 1)) {
+                unsigned char typeChars[] = { 0x25, 0x25, 0xC2, 0xA0, 0x25, 0x73, 0x0 }; // %%\uc2a0%s
+                type = reinterpret_cast<char const *>(typeChars);
+            } else {
+                // do nothing
+            }
+        } else {
+            type = "%s%%";
+            if ((hasSpace > 0) && (space == 0)) {
+                type = "%s %%";
+            } else if ((hasSpace > 0) && (space == 1)) {
+                unsigned char typeChars[] = { 0x25, 0x73, 0xC2, 0xA0, 0x25, 0x25, 0x0 }; // %s\uc2a0%%
+                type = reinterpret_cast<char const *>(typeChars);
+            } else {
+                // do nothing
+            }
+        }
+        int typeLen = LenCharArray(type.data());
+        styleData.entireFormat = NewArrayAndCopy(type.data(), typeLen);
+    }
+}
+
+bool NumberData::SetMinDecimalLength(int length)
+{
+    if (length < style.decLen) {
+        return true;
+    }
+    style.decLen = length;
+
+    // calculate number format
+    char *format = new(std::nothrow) char[NUMBER_FORMAT_LENGTH];
+    if (format == nullptr) {
+        SetFail();
+        return false;
+    }
+    int re = sprintf_s(format, NUMBER_FORMAT_LENGTH, NUMBER_FORMAT, length);
+    if (re == -1) {
+        SetFail();
+        delete[] format;
+        format = nullptr;
+        return false;
+    }
+    if (style.numFormat != nullptr) {
+        delete[] style.numFormat;
+    }
+    style.numFormat = format;
+    return true;
+}
+
+NumberData::NumberData(const char *pat, const char *percentPat, std::string decSign,
+    std::string groupSign, std::string perSign)
+{
+    if (pat != nullptr || percentPat != nullptr) {
+        std::string nums[NUM_SIZE] = NUMBER_SIGN;
+        SetNumSystem(nums, NUM_SIZE);
+        std::string signs[3] = { decSign, groupSign, perSign }; // use string array contain number data
+        Init(pat, LenCharArray(pat), percentPat, LenCharArray(percentPat));
+        InitSign(signs, SIGNS_SIZE);
+    }
+}
+
+NumberData::NumberData()
+{
+    isNative = false;
+    std::string ns[NUM_SIZE] = NUMBER_SIGN;
+    std::string signs[3] = { ".", ",", "%" }; // use string array contain number data
+    const char *enNumberPattern = "#,##0.###";
+    const char *percentPattern = "#,##0%";
+    Init(const_cast<char *>(enNumberPattern), LenCharArray(enNumberPattern), const_cast<char *>(percentPattern),
+        LenCharArray(percentPattern));
+    InitSign(signs, SIGNS_SIZE);
+}
+
+NumberData::~NumberData()
+{
+    if (pattern != nullptr) {
+        delete[] pattern;
+        pattern = nullptr;
+    }
+    if (percentPattern != nullptr) {
+        delete[] percentPattern;
+        percentPattern = nullptr;
+    }
+    if (style.numFormat != nullptr) {
+        delete[] style.numFormat;
+        style.numFormat = nullptr;
+    }
+    if (percentStyle.numFormat != nullptr) {
+        delete[] percentStyle.numFormat;
+        percentStyle.numFormat = nullptr;
+    }
+    if (style.entireFormat != nullptr) {
+        delete[] style.entireFormat;
+        style.entireFormat = nullptr;
+    }
+    if (percentStyle.entireFormat != nullptr) {
+        delete[] percentStyle.entireFormat;
+        percentStyle.entireFormat = nullptr;
+    }
+    if (group != nullptr) {
+        delete[] group;
+        group = nullptr;
+    }
+    if (percent != nullptr) {
+        delete[] percent;
+        percent = nullptr;
+    }
+    if (decimal != nullptr) {
+        delete[] decimal;
+        decimal = nullptr;
+    }
+}
+
+bool NumberData::IsSuccess()
+{
+    bool r = isSucc;
+    isSucc = true;
+    return r;
+}
+
+void NumberData::SetFail()
+{
+    isSucc = false;
+}
+
+bool NumberData::SetMaxDecimalLength(int length)
+{
+    if (length < 0) {
+        maxDecimalLength = -1;
+        return true;
+    }
+    maxDecimalLength = length;
+    if (pattern != nullptr) {
+        isPercent = false;
+        ParsePattern(pattern, strlen(pattern), style);
+    }
+    return true;
+}
diff --git a/base/global/i18n_lite/frameworks/i18n/src/number_format.cpp b/base/global/i18n_lite/frameworks/i18n/src/number_format.cpp
new file mode 100755
index 00000000..39ea91d7
--- /dev/null
+++ b/base/global/i18n_lite/frameworks/i18n/src/number_format.cpp
@@ -0,0 +1,118 @@
+/*
+ * Copyright (c) 2021 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "number_format.h"
+#include "number_format_impl.h"
+
+using namespace OHOS::I18N;
+
+NumberFormat::NumberFormat(LocaleInfo &locale, int &status)
+{
+    if (locale.GetId() == nullptr) {
+        status = IERROR;
+        return;
+    }
+    mLocale = locale;
+}
+
+bool NumberFormat::Init()
+{
+    int status = I18nStatus::ISUCCESS;
+    if (impl != nullptr) {
+        delete impl;
+    }
+    impl = new NumberFormatImpl(mLocale, status);
+    if (impl == nullptr) {
+        return false;
+    }
+    if (status != I18nStatus::ISUCCESS) {
+        return false;
+    }
+    DataResource resource(&mLocale);
+    bool isSuccess = resource.Init();
+    if (!isSuccess) {
+        return false;
+    }
+    return impl->Init(resource);
+}
+
+
+NumberFormat::~NumberFormat()
+{
+    if (impl != nullptr) {
+        delete impl;
+        impl = nullptr;
+    }
+}
+
+
+std::string NumberFormat::Format(double num, NumberFormatType type, int &status)
+{
+    if (!ReInitImpl()) {
+        return "";
+    }
+    return impl->Format(num, type, status);
+}
+
+std::string NumberFormat::Format(int num, int &status)
+{
+    if (!ReInitImpl()) {
+        return "";
+    }
+    return impl->Format(num, status);
+}
+
+std::string NumberFormat::FormatNoGroup(double num, NumberFormatType type, int &status)
+{
+    if (!ReInitImpl()) {
+        return "";
+    }
+    return impl->FormatNoGroup(num, type, status);
+}
+
+std::string NumberFormat::FormatNoGroup(int num, int &status)
+{
+    if (!ReInitImpl()) {
+        return "";
+    }
+    return impl->FormatNoGroup(num, status);
+}
+
+bool NumberFormat::SetMaxDecimalLength(int length)
+{
+    if (!ReInitImpl()) {
+        return false;
+    }
+    return impl->SetMaxDecimalLength(length);
+}
+
+bool NumberFormat::SetMinDecimalLength(int length)
+{
+    if (!ReInitImpl()) {
+        return false;
+    }
+    return impl->SetMinDecimalLength(length);
+}
+
+bool NumberFormat::ReInitImpl()
+{
+    if (impl == nullptr) {
+        bool isSuccess = Init();
+        if (!isSuccess) {
+            return false;
+        }
+    }
+    return true;
+}
\ No newline at end of file
diff --git a/base/global/i18n_lite/frameworks/i18n/src/number_format_impl.cpp b/base/global/i18n_lite/frameworks/i18n/src/number_format_impl.cpp
new file mode 100755
index 00000000..ffa60a1c
--- /dev/null
+++ b/base/global/i18n_lite/frameworks/i18n/src/number_format_impl.cpp
@@ -0,0 +1,397 @@
+/*
+ * Copyright (c) 2021 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "number_format_impl.h"
+#include "number_data.h"
+#include "str_util.h"
+
+using namespace OHOS::I18N;
+
+std::string NumberFormatImpl::ConvertSignAndNum(const char *content, int len, NumberData *data, StyleData &style) const
+{
+    std::string strContent = content;
+    int off = 0;
+    for (int i = 0; i < len; i++) {
+        switch (content[i]) {
+            case NumberData::NUMBER_DECIMAL:
+                off = ReplaceAndCountOff(strContent, i + off, data->decimal, off);
+                break;
+            case NumberData::NUMBER_GROUPSIGN:
+                off = ReplaceAndCountOff(strContent, i + off, data->group, off);
+                break;
+            case NumberData::NUMBER_PERCENT:
+                off = ReplaceAndCountOff(strContent, i + off, data->percent, off);
+                break;
+            default:
+                break;
+        }
+        if (defaultData->isNative) {
+            off = ConvertNum(strContent, content[i], data, i, off);
+        }
+    }
+    return strContent;
+}
+
+int NumberFormatImpl::ConvertNum(std::string &strContent, char currentChar,
+    const NumberData *data, int index, int off) const
+{
+    std::string numStr = "0123456789";
+    int charPos = numStr.find(currentChar);
+    return (charPos != std::string::npos) ?
+        ReplaceAndCountOff(strContent, index + off, data->nativeNums[charPos].c_str(), off) : off;
+}
+
+NumberFormatImpl::NumberFormatImpl(LocaleInfo &locale, int &status)
+{
+    if (locale.GetId() == nullptr) {
+        status = IERROR;
+        return;
+    }
+    mLocale = locale;
+}
+
+bool NumberFormatImpl::Init(const DataResource &resource)
+{
+    std::string unprocessedNumberFormat = resource.GetString(DataResourceType::NUMBER_FORMAT);
+    std::string split[NUM_PATTERN_SIZE];
+    Split(unprocessedNumberFormat, split, NUM_PATTERN_SIZE, NUM_PATTERN_SEP);
+    std::string decSign = split[NUM_DEC_SIGN_INDEX];
+    std::string groupSign = split[NUM_GROUP_SIGN_INDEX];
+    std::string perSign = split[NUM_PERCENT_SIGN_INDEX];
+    std::string origin = split[NUM_PERCENT_PAT_INDEX];
+    const char *pat = split[NUM_PAT_INDEX].c_str();
+    int size = origin.size();
+    std::string adjust = origin;
+    // strip "0x80 0xe2 0x8f" these three bytes in pat
+    if (size >= 3 && (static_cast<unsigned char>(origin.at(size - 1)) == 0x8f) &&
+        (static_cast<unsigned char>(origin.at(size - 2)) == 0x80) &&
+        (static_cast<unsigned char>(origin.at(size - 3)) == 0xe2)) {
+        adjust = std::string(origin, 0, size - 3);
+    }
+    const char *percentPat = adjust.c_str();
+    defaultData = new(std::nothrow) NumberData(pat, percentPat, decSign, groupSign, perSign);
+    if (defaultData == nullptr) {
+        return false;
+    }
+    std::string unprocessedNumberDigit = resource.GetString(DataResourceType::NUMBER_DIGIT);
+    if (unprocessedNumberDigit != "") {
+        std::string splitDigit[NUM_DIGIT_SIZE];
+        Split(unprocessedNumberDigit, splitDigit, NUM_DIGIT_SIZE, NUM_DIGIT_SEP);
+        defaultData->SetNumSystem(splitDigit, NUM_DIGIT_SIZE);
+    }
+    return true;
+}
+
+
+NumberFormatImpl::~NumberFormatImpl()
+{
+    if (defaultData != nullptr) {
+        delete defaultData;
+        defaultData = nullptr;
+    }
+}
+
+std::string NumberFormatImpl::InnerFormat(double num, StyleData &style, bool hasDec, bool isShowGroup,
+    int &status) const
+{
+    errno_t rc = EOK;
+    char buff[NUMBER_MAX] = { 0 };
+
+    // convert decimal to char and format
+    int len = static_cast<int>(sprintf_s(buff, NUMBER_MAX, style.numFormat, num));
+    if (len < 0) {
+        status = IERROR;
+        return "";
+    }
+
+    char *content = buff;
+    char *decimalNum = strchr(content, NumberData::NUMBER_DECIMAL);
+    int decLen = (decimalNum == nullptr) ? 0 : LenCharArray(decimalNum);
+    int lastLen = isShowGroup ? (len + CountGroupNum(len, decLen, style.isTwoGroup)) : len;
+    char *result = new(std::nothrow) char[lastLen + 1];
+    if (result == nullptr) {
+        status = IERROR;
+        return "";
+    }
+    result[lastLen] = '\0';
+    if (isShowGroup) {
+        char *resultAndContent[] = { result, content };
+        int lengths[] = { lastLen, len, style.isTwoGroup};
+        AddGroup(resultAndContent, lengths, decimalNum, hasDec, decLen);
+    } else {
+        rc = strcpy_s(result, lastLen + 1, content);
+        CheckStatus(rc, status);
+    }
+    // del more zero
+    lastLen = DelMoreZero(style, decLen, result, lastLen);
+    // if percent
+    if (!DealWithPercent(buff, result, status, style, lastLen)) {
+        delete[] result;
+        return "";
+    }
+
+    // if have native number to convert
+    std::string outStr = ConvertSignAndNum(result, lastLen, defaultData, style);
+    delete[] result;
+    result = nullptr;
+    return outStr;
+}
+
+bool NumberFormatImpl::DealWithPercent(char *buff, char *&result, int &status, StyleData &style, int &lastLen) const
+{
+    if (style.entireFormat != nullptr) {
+        bool cleanRet = CleanCharArray(buff, NUMBER_MAX);
+        if (!cleanRet) {
+            return false;
+        }
+        int len = static_cast<int>(sprintf_s(buff, NUMBER_MAX, style.entireFormat, result));
+        if (len < 0) {
+            status = IERROR;
+            delete[] result;
+            result = nullptr;
+            return false;
+        }
+        char *perResult = new char[len + 1];
+        errno_t rc = strcpy_s(perResult, len + 1, buff);
+        CheckStatus(rc, status);
+        if (status == IERROR) {
+            delete[] perResult;
+            return false;
+        }
+        perResult[len] = '\0';
+        lastLen = len;
+        delete[] result;
+        result = perResult;
+        perResult = nullptr;
+    }
+    return true;
+}
+
+
+int NumberFormatImpl::DelMoreZero(const StyleData &style, int decLen, char *&result, int lastLen) const
+{
+    int num = 0;
+    if (style.decZeroLen < decLen - 1) {
+        int delNum = decLen - 1 - style.decZeroLen;
+        num = DelZero(result, lastLen, delNum, true);
+    }
+    // delete more char
+    if ((maxDecimalLength != NO_SET) && (maxDecimalLength < decLen - 1 - num)) {
+        int delNum = decLen - 1 - num - maxDecimalLength;
+        num = num + DelZero(result, lastLen - num, delNum, false);
+    }
+    // fill zero to min
+    if ((minDecimalLength != NO_SET) && (minDecimalLength > decLen - 1 - num)) {
+        if (decLen - 1 - num < 0) {
+            int add = minDecimalLength + 1;
+            result = FillMinDecimal(result, lastLen - num, add, false);
+            num = num - add;
+        } else {
+            int add = minDecimalLength - decLen + num + 1;
+            result = FillMinDecimal(result, lastLen - num, add, true);
+            num = num - add;
+        }
+    }
+
+    return lastLen - num;
+}
+
+void NumberFormatImpl::CheckStatus(const errno_t rc, int &status) const
+{
+    if (rc != EOK) {
+        status = IERROR;
+    }
+}
+
+int NumberFormatImpl::CountGroupNum(int len, int decLen, bool isTwoGrouped) const
+{
+    int intLen = len - decLen;
+    int groupNum = 0;
+    if (!isTwoGrouped) {
+        groupNum = static_cast<int>(intLen / NumberData::NUMBER_GROUP);
+        int mod = intLen % NumberData::NUMBER_GROUP;
+        if (mod == 0) {
+            --groupNum;
+        }
+        return groupNum;
+    } else {
+        if (intLen <= NumberData::NUMBER_GROUP) {
+            return 0;
+        }
+        groupNum = 1;
+        intLen -= NumberData::NUMBER_GROUP;
+        groupNum += static_cast<int>(intLen / NumberData::TWO_GROUP);
+        int mod = intLen % NumberData::TWO_GROUP;
+        if (mod == 0) {
+            --groupNum;
+        }
+        return groupNum;
+    }
+}
+
+void NumberFormatImpl::AddGroup(char *targetAndSource[], const int len[], const char *decimal,
+    bool hasDec, int decLen) const
+{
+    // The len array must have at least 3 elements and the targetAndSource array
+    // must have at least 2 elements.
+    if ((targetAndSource == nullptr) || (len == nullptr)) {
+        return;
+    }
+    char *target = targetAndSource[0]; // use array to store target and source string, first is target string
+    int targetLen = len[0]; // use array to store target length and source length, first is target legnth
+    char *source = targetAndSource[1]; // use array to store target and source string, second is source string
+    int sourceLen = len[1]; // use array to store target length and source length, second is source legnth
+    int isTwoGroup = len[2];
+    int intLen = sourceLen - decLen;
+    int addIndex = 0;
+    for (int i = 0; (i < intLen) && (addIndex < targetLen); i++, addIndex++) {
+        int index = intLen - i;
+        // ADD GROUP SIGN
+        if (isTwoGroup == 0) {
+            if ((index % NumberData::NUMBER_GROUP == 0) && (i != 0)) {
+                target[addIndex] = ',';
+                addIndex++;
+            }
+            target[addIndex] = source[i];
+        } else {
+            if ((index == NumberData::NUMBER_GROUP) && (i != 0)) {
+                target[addIndex] = ',';
+                addIndex++;
+                target[addIndex] = source[i];
+            } else if ((index > NumberData::NUMBER_GROUP) &&
+                ((index - NumberData::NUMBER_GROUP) % NumberData::TWO_GROUP == 0) && (i != 0)) {
+                target[addIndex] = ',';
+                addIndex++;
+                target[addIndex] = source[i];
+            } else {
+                target[addIndex] = source[i];
+            }
+        }
+    }
+    if (decLen > 0) {
+        target[addIndex] = hasDec ? '.' : '\0';
+        for (int i = 1; (i < decLen) && (addIndex < targetLen); i++) {
+            target[addIndex + i] = hasDec ? decimal[i] : '\0';
+        }
+    }
+}
+
+int NumberFormatImpl::DelZero(char *target, int len, int delNum, bool onlyZero) const
+{
+    int num = 0;
+    for (int i = len - 1; (i > len - delNum - 1) && (i >= 0); i--) {
+        if ((target[i] != '0') && onlyZero) {
+            break;
+        }
+        target[i] = '\0';
+        num++;
+        if ((i - 1 > 0) && (target[i - 1] == '.')) {
+            target[i - 1] = '\0';
+            num++;
+            break;
+        }
+    }
+    return num;
+}
+
+std::string NumberFormatImpl::Format(double num, NumberFormatType type, int &status) const
+{
+    if (defaultData == nullptr) {
+        status = IERROR;
+        return "";
+    }
+    if (type == PERCENT) { // percent,the decimal needs to be multiplied by 100.
+        return InnerFormat(num * 100, defaultData->percentStyle, true, true, status);
+    } else {
+        return InnerFormat(num, defaultData->style, true, true, status);
+    }
+}
+
+std::string NumberFormatImpl::Format(int num, int &status) const
+{
+    if (defaultData == nullptr) {
+        status = IERROR;
+        return "";
+    }
+    return InnerFormat(num, defaultData->style, false, true, status);
+}
+
+std::string NumberFormatImpl::FormatNoGroup(double num, NumberFormatType type, int &status) const
+{
+    if (defaultData == nullptr) {
+        status = IERROR;
+        return "";
+    }
+    if (type == PERCENT) { // percent,the decimal needs to be multiplied by 100.
+        return InnerFormat(num * 100, defaultData->percentStyle, true, false, status);
+    } else {
+        return InnerFormat(num, defaultData->style, true, false, status);
+    }
+}
+
+std::string NumberFormatImpl::FormatNoGroup(int num, int &status) const
+{
+    if (defaultData == nullptr) {
+        status = IERROR;
+        return "";
+    }
+    return InnerFormat(num, defaultData->style, false, false, status);
+}
+
+bool NumberFormatImpl::SetMaxDecimalLength(int length)
+{
+    if (length < 0) {
+        maxDecimalLength = -1;
+        return true;
+    }
+    maxDecimalLength = length;
+    if (defaultData != nullptr) {
+        defaultData->SetMaxDecimalLength(length);
+    }
+    return true;
+}
+
+bool NumberFormatImpl::SetMinDecimalLength(int length)
+{
+    if (length < 0) {
+        minDecimalLength = -1;
+    } else {
+        minDecimalLength = length;
+    }
+    if (defaultData != nullptr) {
+        return defaultData->SetMinDecimalLength(length);
+    }
+    return false;
+}
+
+char *NumberFormatImpl::FillMinDecimal(char *target, int len, int addSize, bool isDec) const
+{
+    char *content = NewArrayAndCopy(target, len + addSize);
+    if (content == nullptr) {
+        return nullptr;
+    }
+    for (int i = 0; i < addSize; i++) {
+        if ((!isDec) && (i == 0)) {
+            content[len + i] = '.';
+            continue;
+        }
+        content[len + i] = '0';
+    }
+    if (target != nullptr) {
+        delete [] target;
+        target = nullptr;
+    }
+    return content;
+}
\ No newline at end of file
diff --git a/base/global/i18n_lite/frameworks/i18n/src/plural_format.cpp b/base/global/i18n_lite/frameworks/i18n/src/plural_format.cpp
new file mode 100755
index 00000000..6cf1a914
--- /dev/null
+++ b/base/global/i18n_lite/frameworks/i18n/src/plural_format.cpp
@@ -0,0 +1,68 @@
+/*
+ * Copyright (c) 2021 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "plural_format.h"
+#include "plural_format_impl.h"
+
+using namespace OHOS::I18N;
+
+PluralFormat::PluralFormat(LocaleInfo &locale, I18nStatus &status)
+{
+    if (locale.GetId() == nullptr) {
+        status = IERROR;
+        return;
+    }
+    mLocale = locale;
+}
+
+PluralFormat::~PluralFormat()
+{
+    if (impl != nullptr) {
+        delete impl;
+        impl = nullptr;
+    }
+}
+
+bool PluralFormat::Init()
+{
+    if (impl != nullptr) {
+        delete impl;
+    }
+    I18nStatus status = I18nStatus::ISUCCESS;
+    impl = new PluralFormatImpl(mLocale, status);
+    if (impl == nullptr) {
+        return false;
+    }
+    if (status != I18nStatus::ISUCCESS) {
+        return false;
+    }
+    DataResource resource(&mLocale);
+    bool isSuccess = resource.Init();
+    if (!isSuccess) {
+        return false;
+    }
+    return impl->Init(resource);
+}
+
+int PluralFormat::GetPluralRuleIndex(int number, I18nStatus status)
+{
+    if (impl == nullptr) {
+        bool isSuccess = Init();
+        if (!isSuccess) {
+            return -1;
+        }
+    }
+    return impl->GetPluralRuleIndex(number, status);
+}
\ No newline at end of file
diff --git a/base/global/i18n_lite/frameworks/i18n/src/plural_format_impl.cpp b/base/global/i18n_lite/frameworks/i18n/src/plural_format_impl.cpp
new file mode 100755
index 00000000..d3c438f5
--- /dev/null
+++ b/base/global/i18n_lite/frameworks/i18n/src/plural_format_impl.cpp
@@ -0,0 +1,238 @@
+/*
+ * Copyright (c) 2021 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "plural_format_impl.h"
+#include "str_util.h"
+
+using namespace OHOS::I18N;
+
+PluralFormatImpl::PluralFormatImpl(LocaleInfo &locale, I18nStatus &status)
+{
+    if (locale.GetId() == nullptr) {
+        status = IERROR;
+        return;
+    }
+    mLocale = locale;
+}
+
+PluralFormatImpl::~PluralFormatImpl()
+{
+    if (mPluralRules != nullptr) {
+        delete mPluralRules;
+        mPluralRules = nullptr;
+    }
+}
+
+bool PluralFormatImpl::Init(const DataResource &resource)
+{
+    std::string unprocessedPluralData = resource.GetString(DataResourceType::PLURAL);
+    std::string rules[RULES_NUM];
+    Split(unprocessedPluralData, rules, RULES_NUM, PLURAL_SEP);
+    int zeroRuleSize = rules[PluralRuleType::ZERO].size();
+    int oneRuleSize = rules[PluralRuleType::ONE].size();
+    int twoRuleSize = rules[PluralRuleType::TWO].size();
+    int fewRuleSize = rules[PluralRuleType::FEW].size();
+    int manyRuleSize = rules[PluralRuleType::MANY].size();
+    int otherRuleSize = rules[PluralRuleType::OTHER].size();
+    int ruleSizes[RULES_NUM] = { zeroRuleSize, oneRuleSize, twoRuleSize, fewRuleSize, manyRuleSize, otherRuleSize };
+    mPluralRules = new PluralRules(rules, RULES_NUM, ruleSizes, RULES_NUM);
+    if (mPluralRules == nullptr) {
+        return false;
+    }
+    return true;
+}
+
+PluralRules *PluralFormatImpl::GetPluralData(I18nStatus status) const
+{
+    if (status == IERROR) {
+        return nullptr;
+    }
+    return mPluralRules;
+}
+
+int PluralFormatImpl::GetPluralRuleIndex(int number, I18nStatus status) const
+{
+    if (status == IERROR) {
+        return -1;
+    }
+    if (GetPluralData(status) == nullptr) {
+        return PluralRuleType::OTHER;
+    }
+    if ((mPluralRules->mZeroRuleSize > 0) && ParseRule(mPluralRules->mZeroRule, mPluralRules->mZeroRuleSize, number)) {
+        return PluralRuleType::ZERO;
+    } else if ((mPluralRules->mOneRuleSize > 0) &&
+        ParseRule(mPluralRules->mOneRule, mPluralRules->mOneRuleSize, number)) {
+        return PluralRuleType::ONE;
+    } else if ((mPluralRules->mTwoRuleSize > 0) &&
+        ParseRule(mPluralRules->mTwoRule, mPluralRules->mTwoRuleSize, number)) {
+        return PluralRuleType::TWO;
+    } else if ((mPluralRules->mFewRuleSize > 0) &&
+        ParseRule(mPluralRules->mFewRule, mPluralRules->mFewRuleSize, number)) {
+        return PluralRuleType::FEW;
+    } else if ((mPluralRules->mManyRuleSize > 0) &&
+        ParseRule(mPluralRules->mManyRule, mPluralRules->mManyRuleSize, number)) {
+        return PluralRuleType::MANY;
+    } else {
+        return PluralRuleType::OTHER;
+    }
+}
+
+bool PluralFormatImpl::ParseRule(const std::string &rule, const int ruleSize, const int number) const
+{
+    bool tempResult = true;
+    for (int i = 0; i < ruleSize; i++) {
+        bool curResult = ParseFormula(rule, ruleSize, i, number);
+        int nextSymbolIndex = i + SYMBOL_LENGTH;
+        if (curResult && tempResult) {
+            // If next symbol is or and current result and temp result are true, the final result should be true.
+            if ((nextSymbolIndex < ruleSize) && (rule[nextSymbolIndex] == OR)) {
+                return true;
+            // If next symbol is and and current result and temp result are true, set the temp result to true and
+            // skip to next formula.
+            } else if ((nextSymbolIndex < ruleSize) && (rule[nextSymbolIndex] == AND)) {
+                i += SKIP_SYMBOL_LENGTH;
+                tempResult = true;
+            // If there is no symbol after this formula and current result and temp result are true,
+            // the final result should be true.
+            } else if (nextSymbolIndex >= ruleSize) {
+                return true;
+            } else {
+                // do nothing
+            }
+        } else {
+            // If next symbol is or and current result or temp result is false, skip to next formula.
+            if ((nextSymbolIndex < ruleSize) && (rule[nextSymbolIndex] == OR)) {
+                i += SKIP_SYMBOL_LENGTH;
+                tempResult = true;
+            // If next symbol is and and current result or temp result is false, skip to next formula and
+            // set temp result to false.
+            } else if ((nextSymbolIndex < ruleSize) && (rule[nextSymbolIndex] == AND)) {
+                i += SKIP_SYMBOL_LENGTH;
+                tempResult = false;
+            } else if (nextSymbolIndex >= ruleSize) {
+                if (!ParseFormula(rule, ruleSize, i, number)) {
+                    tempResult = false;
+                }
+            } else {
+                // do nothing
+            }
+        }
+    }
+    return tempResult;
+}
+
+bool PluralFormatImpl::ParseFormula(const std::string &rule, const int ruleSize, int &index, const int number) const
+{
+    int currentNumber = number;
+    if ((index < ruleSize) && (rule[index] == MOD)) {
+        // Skip the module symbol and obtain the divisor number.
+        index += SKIP_SYMBOL_LENGTH;
+        int divisor = ParseNumber(rule, ruleSize, index);
+        if (divisor == 0) {
+            divisor = 1;
+        }
+        currentNumber = number % divisor;
+        index++;
+    }
+    // Compare the result with the equation
+    if (CompareResult(rule, ruleSize, index, currentNumber)) {
+        return true;
+    }
+    return false;
+}
+
+bool PluralFormatImpl::CompareResult(const std::string &rule, const int ruleSize, int &index, const int number) const
+{
+    if (!((index < ruleSize) && (rule[index] == EQUAL))) {
+        return CompareNotEqualResult(rule, ruleSize, index, number);
+    }
+
+    index += SKIP_SYMBOL_LENGTH;
+    int num = ParseNumber(rule, ruleSize, index);
+    bool temp = false;
+
+    // Obtain all numbers in the formula
+    while ((index < ruleSize) && ((rule[index] == COMMA) || (rule[index] == TO))) {
+        if (rule[index] == TO) {
+            // If the symbol is "to", it indicates a number range.
+            int rangeStart = num;
+            index++;
+            int rangeEnd = ParseNumber(rule, ruleSize, index);
+            if ((number >= rangeStart) && (number <= rangeEnd)) {
+                temp = true;
+            }
+        } else {
+            // Compare the input number with each number in the equation.
+            if (number == num) {
+                temp = true;
+            }
+            index++;
+            num = ParseNumber(rule, ruleSize, index);
+        }
+    }
+    if (number == num) {
+        temp = true;
+    }
+    return temp;
+}
+
+bool PluralFormatImpl::CompareNotEqualResult(const std::string &rule, const int ruleSize, int &index,
+    const int number) const
+{
+    if (!((index < ruleSize) && (rule[index] == NOT_EQUAL))) {
+        return false;
+    }
+
+    index += SKIP_SYMBOL_LENGTH;
+    int num = ParseNumber(rule, ruleSize, index);
+    bool temp = true;
+
+    // Obtain all numbers in the formula
+    while ((index < ruleSize) && ((rule[index] == COMMA) || (rule[index] == TO))) {
+        if (rule[index] == TO) {
+            // If the symbol is "to", it indicates a number range.
+            index++;
+            int rangeStart = num;
+            int rangeEnd = ParseNumber(rule, ruleSize, index);
+            if ((number >= rangeStart) && (number <= rangeEnd)) {
+                temp = false;
+            }
+        } else {
+            // Compare the input number with each number in the equation.
+            if (number == num) {
+                temp = false;
+            }
+            index++;
+            num = ParseNumber(rule, ruleSize, index);
+        }
+    }
+    if (number == num) {
+        temp = false;
+    }
+    return temp;
+}
+
+int PluralFormatImpl::ParseNumber(const std::string &rule, const int ruleSize, int &index) const
+{
+    int num = 0;
+
+    // Parse number in the formula.
+    while ((index < ruleSize) && (rule[index] != ' ') && (rule[index] != TO) && (rule[index] != COMMA)) {
+        num *= 10; // Calculate decimal value of the number.
+        num += rule[index] - '0';
+        index++;
+    }
+    return num;
+}
\ No newline at end of file
diff --git a/base/global/i18n_lite/frameworks/i18n/src/plural_rules.cpp b/base/global/i18n_lite/frameworks/i18n/src/plural_rules.cpp
new file mode 100755
index 00000000..fb942385
--- /dev/null
+++ b/base/global/i18n_lite/frameworks/i18n/src/plural_rules.cpp
@@ -0,0 +1,39 @@
+/*
+ * Copyright (c) 2021 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "plural_rules.h"
+
+using namespace OHOS::I18N;
+
+PluralRules::PluralRules(std::string *rules, const int rulesLength, const int *ruleSize, const int sizesLength)
+{
+    if ((rules != nullptr) && (ruleSize != nullptr) &&
+        (rulesLength > PluralRuleType::OTHER) && (sizesLength > PluralRuleType::OTHER)) {
+        mZeroRule = rules[PluralRuleType::ZERO];
+        mZeroRuleSize = ruleSize[PluralRuleType::ZERO];
+        mOneRule = rules[PluralRuleType::ONE];
+        mOneRuleSize = ruleSize[PluralRuleType::ONE];
+        mTwoRule = rules[PluralRuleType::TWO];
+        mTwoRuleSize = ruleSize[PluralRuleType::TWO];
+        mFewRule = rules[PluralRuleType::FEW];
+        mFewRuleSize = ruleSize[PluralRuleType::FEW];
+        mManyRule = rules[PluralRuleType::MANY];
+        mManyRuleSize = ruleSize[PluralRuleType::MANY];
+        mOtherRule = rules[PluralRuleType::OTHER];
+        mOtherRuleSize = ruleSize[PluralRuleType::OTHER];
+    }
+}
+
+PluralRules::~PluralRules() {}
\ No newline at end of file
diff --git a/base/global/i18n_lite/frameworks/i18n/src/str_util.cpp b/base/global/i18n_lite/frameworks/i18n/src/str_util.cpp
new file mode 100755
index 00000000..1e2c8e11
--- /dev/null
+++ b/base/global/i18n_lite/frameworks/i18n/src/str_util.cpp
@@ -0,0 +1,128 @@
+/*
+ * Copyright (c) 2021 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "str_util.h"
+#include "securec.h"
+#include "types.h"
+
+namespace OHOS {
+namespace I18N {
+std::string Replace(std::string &content, const int index, const char *str)
+{
+    if ((index < 0) || (static_cast<unsigned int>(index) > strlen(content.data()))) {
+        return content;
+    }
+    return content.replace(index, 1, str);
+}
+
+int ReplaceAndCountOff(std::string &content, const int index, const char *sign, const int off)
+{
+    int signLen = strlen(sign);
+    if ((index < 0) || (static_cast<unsigned int>(index) > strlen(content.data()))) {
+        return off;
+    }
+    content = content.replace(index, 1, sign);
+    int newOff = off + signLen - 1;
+    return newOff;
+}
+
+void ArrayCopy(std::string *target, const int targetSize, const std::string *source, const int sourceSize)
+{
+    if (target == nullptr || source == nullptr || (sourceSize > targetSize)) {
+        return;
+    }
+    for (int i = 0; i < sourceSize; i++) {
+        target[i] = source[i];
+    }
+}
+
+char *NewArrayAndCopy(const char *source, const int len)
+{
+    if ((source == nullptr) || (len < 0)) {
+        return nullptr;
+    }
+    char *out = new(std::nothrow) char[len + 1];
+    if (out == nullptr) {
+        return nullptr;
+    }
+    errno_t rc = strcpy_s(out, len + 1, source);
+    if (rc != EOK) {
+        delete[] out;
+        out = nullptr;
+        return nullptr;
+    }
+    out[len] = '\0';
+    return out;
+}
+
+bool CleanCharArray(char *target, const int len)
+{
+    errno_t ret = memset_s(target, len, 0, len);
+    if (ret != EOK) {
+        return false;
+    }
+    return true;
+}
+
+int LenCharArray(const char *target)
+{
+    if (target == nullptr) {
+        return 0;
+    }
+    return strlen(target);
+}
+
+void Split(const std::string &src, std::string *dst, const int32_t size, const char &sep)
+{
+    if (dst == nullptr || size <= 0) {
+        return;
+    }
+    int32_t current = 0;
+
+    std::string::size_type begin = 0;
+    std::string::size_type end = 0;
+    while (end < src.size()) {
+        if (src[end] != sep) {
+            ++end;
+        } else {
+            dst[current] = std::string(src, begin, end - begin);
+            ++end;
+            begin = end;
+            ++current;
+            if (current >= size) {
+                return;
+            }
+        }
+    }
+    if ((begin != end) && (current < size)) {
+        dst[current] = std::string(src, begin, end - begin);
+    }
+}
+
+bool CompareLocaleItem(const char *item, const char* other)
+{
+    if (item == nullptr) {
+        if (other != nullptr) {
+            return false;
+        }
+    } else {
+        if (other == nullptr || strcmp(item, other) != 0) {
+            return false;
+        }
+    }
+    return true;
+}
+} // I18N
+} // OHOS
diff --git a/base/global/i18n_lite/frameworks/i18n/test/BUILD.gn b/base/global/i18n_lite/frameworks/i18n/test/BUILD.gn
new file mode 100755
index 00000000..f71b117f
--- /dev/null
+++ b/base/global/i18n_lite/frameworks/i18n/test/BUILD.gn
@@ -0,0 +1,32 @@
+# Copyright (c) 2021 Huawei Device Co., Ltd.
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+import("//build/lite/config/component/lite_component.gni")
+import("//build/lite/config/test.gni")
+
+unittest("I18nTest") {
+  output_extension = "bin"
+
+  sources = [ "unittest/lite/common/i18n_test.cpp" ]
+
+  include_dirs = [
+    "//base/global/i18n_lite/interfaces/kits/i18n/include",
+    "//base/global/i18n_lite/frameworks/i18n/test/unittest/lite/common",
+  ]
+
+  deps = [ "//base/global/i18n_lite/frameworks/i18n:global_i18n" ]
+}
+
+group("unittest") {
+  deps = [ ":I18nTest" ]
+}
diff --git a/base/global/i18n_lite/frameworks/i18n/test/unittest/lite/common/i18n_test.cpp b/base/global/i18n_lite/frameworks/i18n/test/unittest/lite/common/i18n_test.cpp
new file mode 100755
index 00000000..aea2cce5
--- /dev/null
+++ b/base/global/i18n_lite/frameworks/i18n/test/unittest/lite/common/i18n_test.cpp
@@ -0,0 +1,974 @@
+/*
+ * Copyright (c) 2021 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "i18n_test.h"
+#include <gtest/gtest.h>
+#include "date_time_format.h"
+#include "iostream"
+#include "locale_info.h"
+#include "number_format.h"
+#include "plural_format.h"
+#include "types.h"
+
+using namespace std;
+using namespace testing::ext;
+using namespace OHOS::I18N;
+
+namespace {
+class I18NTest : public testing::Test {
+public:
+    void SetUp() const;
+    void TearDown() const;
+};
+
+void I18NTest::SetUp(void) const
+{
+}
+
+void I18NTest::TearDown(void) const
+{
+}
+
+/**
+ * @tc.name: I18nFuncTest001
+ * @tc.desc: Test LocaleInfo constructor1
+ * @tc.type: FUNC
+ */
+HWTEST_F(I18NTest, I18NFuncTest001, TestSize.Level1)
+{
+    LocaleInfo *locale = new LocaleInfo("zh", "Hans", "CN");
+    EXPECT_TRUE(locale != nullptr);
+    delete locale;
+}
+
+/**
+ * @tc.name: I18nFuncTest002
+ * @tc.desc: Test LocaleInfo constructor2
+ * @tc.type: FUNC
+ */
+HWTEST_F(I18NTest, I18NFuncTest002, TestSize.Level1)
+{
+    LocaleInfo *locale = new LocaleInfo("zh", "CN");
+    EXPECT_TRUE(locale != nullptr);
+    delete locale;
+}
+
+/**
+ * @tc.name: I18nFuncTest003
+ * @tc.desc: Test LocaleInfo default Constructor
+ * @tc.type: FUNC
+ */
+HWTEST_F(I18NTest, I18NFuncTest003, TestSize.Level1)
+{
+    LocaleInfo *locale = new LocaleInfo();
+    EXPECT_TRUE(locale != nullptr);
+    delete locale;
+}
+
+/**
+ * @tc.name: I18nFuncTest004
+ * @tc.desc: Test LocaleInfo copy constructor
+ * @tc.type: FUNC
+ */
+HWTEST_F(I18NTest, I18NFuncTest004, TestSize.Level1)
+{
+    LocaleInfo locale("zh", "CN");
+    LocaleInfo locale2(locale);
+    EXPECT_TRUE(strcmp(locale2.GetLanguage(), "zh") == 0);
+    EXPECT_TRUE(strcmp(locale2.GetRegion(), "CN") == 0);
+}
+
+/**
+ * @tc.name: I18nFuncTest005
+ * @tc.desc: Test LocaleInfo equals function
+ * @tc.type: FUNC
+ */
+HWTEST_F(I18NTest, I18NFuncTest005, TestSize.Level1)
+{
+    LocaleInfo locale("zh", "CN");
+    LocaleInfo locale2("zh", "CN");
+    EXPECT_TRUE(locale == locale2);
+}
+
+/**
+ * @tc.name: I18nFuncTest006
+ * @tc.desc: Test LocaleInfo GetLanguage function
+ * @tc.type: FUNC
+ */
+HWTEST_F(I18NTest, I18NFuncTest006, TestSize.Level1)
+{
+    LocaleInfo locale("ar", "AE");
+    EXPECT_TRUE(strcmp(locale.GetLanguage(), "ar") == 0);
+}
+
+/**
+ * @tc.name: I18nFuncTest007
+ * @tc.desc: Test LocaleInfo GetRegion function
+ * @tc.type: FUNC
+ */
+HWTEST_F(I18NTest, I18NFuncTest007, TestSize.Level1)
+{
+    LocaleInfo locale("ar", "AE");
+    EXPECT_TRUE(strcmp(locale.GetRegion(), "AE") == 0);
+}
+
+/**
+ * @tc.name: I18nFuncTest008
+ * @tc.desc: Test LocaleInfo GetScript function
+ * @tc.type: FUNC
+ */
+HWTEST_F(I18NTest, I18NFuncTest008, TestSize.Level1)
+{
+    LocaleInfo locale("zh", "Hans", "CN");
+    EXPECT_TRUE(strcmp(locale.GetScript(), "Hans") == 0);
+}
+
+/**
+ * @tc.name: I18nFuncTest009
+ * @tc.desc: Test LocaleInfo GetId function
+ * @tc.type: FUNC
+ */
+HWTEST_F(I18NTest, I18NFuncTest009, TestSize.Level1)
+{
+    LocaleInfo locale("zh", "Hans", "CN");
+    EXPECT_TRUE(strcmp(locale.GetId(), "zh-Hans-CN") == 0);
+}
+
+/**
+ * @tc.name: I18nFuncTest010
+ * @tc.desc: Test LocaleInfo IsDefaultLocale function
+ * @tc.type: FUNC
+ */
+HWTEST_F(I18NTest, I18NFuncTest010, TestSize.Level1)
+{
+    LocaleInfo locale("zh", "Hans", "CN");
+    EXPECT_TRUE(!locale.IsDefaultLocale());
+    LocaleInfo locale2("en", "US");
+    EXPECT_TRUE(locale2.IsDefaultLocale());
+}
+
+/**
+ * @tc.name: I18nFuncTest011
+ * @tc.desc: Test DateTimeFormat Constructor
+ * @tc.type: FUNC
+ */
+HWTEST_F(I18NTest, I18NFuncTest011, TestSize.Level1)
+{
+    LocaleInfo locale("zh", "Hans", "CN");
+    AvailableDateTimeFormatPattern pattern = AvailableDateTimeFormatPattern::HOUR_MINUTE;
+    DateTimeFormat *formatter = new DateTimeFormat(pattern, locale);
+    EXPECT_TRUE(formatter != nullptr);
+    delete formatter;
+}
+
+/**
+ * @tc.name: I18nFuncTest012
+ * @tc.desc: Test DateTimeFormat Init function
+ * @tc.type: FUNC
+ */
+HWTEST_F(I18NTest, I18NFuncTest012, TestSize.Level1)
+{
+    LocaleInfo locale("zh", "Hans", "CN");
+    AvailableDateTimeFormatPattern pattern = AvailableDateTimeFormatPattern::HOUR_MINUTE;
+    DateTimeFormat formatter(pattern, locale);
+    EXPECT_TRUE(formatter.Init());
+}
+
+/**
+ * @tc.name: I18nFuncTest013
+ * @tc.desc: Test DateTimeFormat Format function
+ * @tc.type: FUNC
+ */
+HWTEST_F(I18NTest, I18NFuncTest013, TestSize.Level1)
+{
+    LocaleInfo locale("zh", "", "");
+    std::string out = "";
+    time_t now = 3600 * 3 + 3600 * 24 * 6;
+    I18nStatus status =  I18nStatus::ISUCCESS;
+    AvailableDateTimeFormatPattern pattern = AvailableDateTimeFormatPattern::FULL;
+    DateTimeFormat formatter(pattern, locale);
+    formatter.Format(now, "-1:45", out, status);
+    std::string expect = "1970年1月7日星期三";
+    EXPECT_TRUE(expect == out);
+}
+
+/**
+ * @tc.name: I18nFuncTest014
+ * @tc.desc: Test DateTimeFormat Format function
+ * @tc.type: FUNC
+ */
+HWTEST_F(I18NTest, I18NFuncTest014, TestSize.Level1)
+{
+    LocaleInfo locale("ar", "", "");
+    std::string out = "";
+    time_t now = 3600 * 3 + 3600 * 24 * 6;
+    I18nStatus status =  I18nStatus::ISUCCESS;
+    AvailableDateTimeFormatPattern pattern = AvailableDateTimeFormatPattern::FULL;
+    DateTimeFormat formatter(pattern, locale);
+    formatter.Format(now, "-1:45", out, status);
+    std::string expect = "الأربعاء، ٧ يناير، ١٩٧٠";
+    EXPECT_TRUE(expect == out);
+}
+
+/**
+ * @tc.name: I18nFuncTest015
+ * @tc.desc: Test DateTimeFormat Format function
+ * @tc.type: FUNC
+ */
+HWTEST_F(I18NTest, I18NFuncTest015, TestSize.Level1)
+{
+    LocaleInfo locale("en", "", "US");
+    std::string out = "";
+    time_t now = 3600 * 3 + 3600 * 24 * 6;
+    I18nStatus status =  I18nStatus::ISUCCESS;
+    AvailableDateTimeFormatPattern pattern = AvailableDateTimeFormatPattern::FULL;
+    DateTimeFormat formatter(pattern, locale);
+    formatter.Format(now, "-1:45", out, status);
+    std::string expect = "Wednesday, January 7, 1970";
+    EXPECT_TRUE(expect == out);
+}
+
+/**
+ * @tc.name: I18nFuncTest016
+ * @tc.desc: Test DateTimeFormat ApplyPattern function
+ * @tc.type: FUNC
+ */
+HWTEST_F(I18NTest, I18NFuncTest016, TestSize.Level1)
+{
+    LocaleInfo locale("zh", "", "");
+    std::string out = "";
+    time_t now = 3600 * 3 + 3600 * 24 * 6;
+    I18nStatus status =  I18nStatus::ISUCCESS;
+    AvailableDateTimeFormatPattern pattern = AvailableDateTimeFormatPattern::SHORT;
+    DateTimeFormat formatter(pattern, locale);
+    formatter.ApplyPattern(AvailableDateTimeFormatPattern::FULL);
+    formatter.Format(now, "-1:45", out, status);
+    std::string expect = "1970年1月7日星期三";
+    EXPECT_TRUE(expect == out);
+}
+
+/**
+ * @tc.name: I18nFuncTest017
+ * @tc.desc: Test DateTimeFormat ApplyPattern function
+ * @tc.type: FUNC
+ */
+HWTEST_F(I18NTest, I18NFuncTest017, TestSize.Level1)
+{
+    LocaleInfo locale("ar", "", "");
+    std::string out = "";
+    time_t now = 3600 * 3 + 3600 * 24 * 6;
+    I18nStatus status =  I18nStatus::ISUCCESS;
+    AvailableDateTimeFormatPattern pattern = AvailableDateTimeFormatPattern::SHORT;
+    DateTimeFormat formatter(pattern, locale);
+    formatter.ApplyPattern(AvailableDateTimeFormatPattern::FULL);
+    formatter.Format(now, "-1:45", out, status);
+    std::string expect = "الأربعاء، ٧ يناير، ١٩٧٠";
+    EXPECT_TRUE(expect == out);
+}
+
+/**
+ * @tc.name: I18nFuncTest018
+ * @tc.desc: Test DateTimeFormat ApplyPattern function
+ * @tc.type: FUNC
+ */
+HWTEST_F(I18NTest, I18NFuncTest018, TestSize.Level1)
+{
+    LocaleInfo locale("en", "", "US");
+    std::string out = "";
+    time_t now = 3600 * 3 + 3600 * 24 * 6;
+    I18nStatus status =  I18nStatus::ISUCCESS;
+    AvailableDateTimeFormatPattern pattern = AvailableDateTimeFormatPattern::SHORT;
+    DateTimeFormat formatter(pattern, locale);
+    formatter.ApplyPattern(AvailableDateTimeFormatPattern::FULL);
+    formatter.Format(now, "-1:45", out, status);
+    std::string expect = "Wednesday, January 7, 1970";
+    EXPECT_TRUE(expect == out);
+}
+
+/**
+ * @tc.name: I18nFuncTest019
+ * @tc.desc: Test DateTimeFormat GetWeekName
+ * @tc.type: FUNC
+ */
+HWTEST_F(I18NTest, I18NFuncTest019, TestSize.Level1)
+{
+    LocaleInfo locale("zh", "", "CN");
+    std::string weekDays[] = { "星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六" };
+    AvailableDateTimeFormatPattern pattern = AvailableDateTimeFormatPattern::SHORT;
+    DateTimeFormat formatter(pattern, locale);
+    for (int i = 0; i < 7; ++i) {
+        std::string out = formatter.GetWeekName(i, DateTimeDataType::FORMAT_WIDE);
+        EXPECT_TRUE(weekDays[i] == out);
+    }
+}
+
+/**
+ * @tc.name: I18nFuncTest020
+ * @tc.desc: Test DateTimeFormat GetMonthName
+ * @tc.type: FUNC
+ */
+HWTEST_F(I18NTest, I18NFuncTest020, TestSize.Level1)
+{
+    LocaleInfo locale("en", "", "US");
+    std::string months[] = { "January", "February", "March", "April", "May", "June", "July", "August", "September",
+        "October", "November", "December" };
+    AvailableDateTimeFormatPattern pattern = AvailableDateTimeFormatPattern::SHORT;
+    DateTimeFormat formatter(pattern, locale);
+    for (int i = 0; i < 12; ++i) {
+        std::string out = formatter.GetMonthName(i, DateTimeDataType::FORMAT_WIDE);
+        EXPECT_TRUE(months[i] == out);
+    }
+}
+
+/**
+ * @tc.name: I18nFuncTest021
+ * @tc.desc: Test numberFormat format integer
+ * @tc.type: FUNC
+ */
+HWTEST_F(I18NTest, I18NFuncTest021, TestSize.Level1)
+{
+    LocaleInfo locale("am", "", "");
+    int status =  0;
+    NumberFormat formatter(locale, status);
+    EXPECT_TRUE(status == 0);
+    int intNum1 = 1234567;
+    int intNum2 = 123456789;
+    int intNum3 = 1234;
+    std::string out = formatter.Format(intNum1, status);
+    std::string out2 = formatter.Format(intNum2, status);
+    std::string out3 = formatter.Format(intNum3, status);
+    EXPECT_TRUE(out == "1,234,567");
+    EXPECT_TRUE(out2 == "123,456,789");
+    EXPECT_TRUE(out3 == "1,234");
+}
+
+/**
+ * @tc.name: I18nFuncTest022
+ * @tc.desc: Test numberFormat format no group integer
+ * @tc.type: FUNC
+ */
+HWTEST_F(I18NTest, I18NFuncTest022, TestSize.Level1)
+{
+    LocaleInfo locale("am", "", "");
+    int  status =  0;
+    NumberFormat formatter(locale, status);
+    EXPECT_TRUE(status == 0);
+    int intNum1 = 1234567;
+    int intNum2 = 123456789;
+    int intNum3 = 1234;
+    std::string out = formatter.FormatNoGroup(intNum1, status);
+    std::string out2 = formatter.FormatNoGroup(intNum2, status);
+    std::string out3 = formatter.FormatNoGroup(intNum3, status);
+    EXPECT_TRUE(out == "1234567");
+    EXPECT_TRUE(out2 == "123456789");
+    EXPECT_TRUE(out3 == "1234");
+}
+
+/**
+ * @tc.name: I18nFuncTest023
+ * @tc.desc: Test numberFormat format double
+ * @tc.type: FUNC
+ */
+HWTEST_F(I18NTest, I18NFuncTest023, TestSize.Level1)
+{
+    LocaleInfo locale("am", "", "");
+    int status =  0;
+    NumberFormat formatter(locale, status);
+    EXPECT_TRUE(status == 0);
+    double doubleNum1 = 1234567.567;
+    double doubleNum2 = 1.23456789567E8;
+    double doubleNum3 = 1234.0;
+    std::string out = formatter.Format(doubleNum1, NumberFormatType::DECIMAL, status);
+    std::string out2 = formatter.Format(doubleNum2, NumberFormatType::DECIMAL, status);
+    std::string out3 = formatter.Format(doubleNum3, NumberFormatType::DECIMAL, status);
+    EXPECT_TRUE(out == "1,234,567.567");
+    EXPECT_TRUE(out2 == "123,456,789.567");
+    EXPECT_TRUE(out3 == "1,234");
+}
+
+/**
+ * @tc.name: I18nFuncTest024
+ * @tc.desc: Test numberFormat format no group double
+ * @tc.type: FUNC
+ */
+HWTEST_F(I18NTest, I18NFuncTest024, TestSize.Level1)
+{
+    LocaleInfo locale("am", "", "");
+    int status =  0;
+    NumberFormat formatter(locale, status);
+    EXPECT_TRUE(status == 0);
+    double doubleNum1 = 1234567.567;
+    double doubleNum2 = 1.23456789567E8;
+    double doubleNum3 = 1234.0;
+    std::string out = formatter.FormatNoGroup(doubleNum1, NumberFormatType::DECIMAL, status);
+    std::string out2 = formatter.FormatNoGroup(doubleNum2, NumberFormatType::DECIMAL, status);
+    std::string out3 = formatter.FormatNoGroup(doubleNum3, NumberFormatType::DECIMAL, status);
+    EXPECT_TRUE(out == "1234567.567");
+    EXPECT_TRUE(out2 == "123456789.567");
+    EXPECT_TRUE(out3 == "1234");
+}
+
+/**
+ * @tc.name: I18nFuncTest025
+ * @tc.desc: Test numberFormat format SetMaxDecimalLength;
+ * @tc.type: FUNC
+ */
+HWTEST_F(I18NTest, I18NFuncTest025, TestSize.Level1)
+{
+    LocaleInfo locale("am", "", "");
+    int status = 0;
+    NumberFormat formatter(locale, status);
+    EXPECT_TRUE(status == 0);
+    double doubleNum1 = 1234567.567;
+    double doubleNum2 = 1.23456789567E8;
+    double doubleNum3 = 1234.0;
+    formatter.SetMaxDecimalLength(1);
+    std::string out = formatter.FormatNoGroup(doubleNum1, NumberFormatType::DECIMAL, status);
+    std::string out2 = formatter.FormatNoGroup(doubleNum2, NumberFormatType::DECIMAL, status);
+    std::string out3 = formatter.FormatNoGroup(doubleNum3, NumberFormatType::DECIMAL, status);
+    EXPECT_TRUE(out == "1234567.6");
+    EXPECT_TRUE(out2 == "123456789.6");
+    EXPECT_TRUE(out3 == "1234");
+}
+
+/**
+ * @tc.name: I18nFuncTest026
+ * @tc.desc: Test numberFormat format SetMinDecimalLength;
+ * @tc.type: FUNC
+ */
+HWTEST_F(I18NTest, I18NFuncTest026, TestSize.Level1)
+{
+    LocaleInfo locale("am", "", "");
+    int status =  0;
+    NumberFormat formatter(locale, status);
+    EXPECT_TRUE(status == 0);
+    double doubleNum1 = 1234567.56;
+    double doubleNum2 = 1.2;
+    double doubleNum3 = 1234.0;
+    formatter.SetMinDecimalLength(3);
+    std::string out = formatter.FormatNoGroup(doubleNum1, NumberFormatType::DECIMAL, status);
+    std::string out2 = formatter.FormatNoGroup(doubleNum2, NumberFormatType::DECIMAL, status);
+    std::string out3 = formatter.FormatNoGroup(doubleNum3, NumberFormatType::DECIMAL, status);
+    EXPECT_TRUE(out == "1234567.560");
+    EXPECT_TRUE(out2 == "1.200");
+    EXPECT_TRUE(out3 == "1234.000");
+}
+
+/**
+ * @tc.name: I18nFuncTest027
+ * @tc.desc: Test numberFormat format percent;
+ * @tc.type: FUNC
+ */
+HWTEST_F(I18NTest, I18NFuncTest027, TestSize.Level1)
+{
+    LocaleInfo locale("am", "", "");
+    int status = 0;
+    NumberFormat formatter(locale, status);
+    EXPECT_TRUE(status == 0);
+    double percentNum1 = 0.1234;
+    double percentNum2 = 0.123456;
+    std::string out = formatter.Format(percentNum1, NumberFormatType::PERCENT, status);
+    std::string out2 = formatter.Format(percentNum2, NumberFormatType::PERCENT, status);
+    EXPECT_TRUE(out == "12%");
+    EXPECT_TRUE(out2 == "12%");
+}
+/**
+ * @tc.name: I18nFuncTest028
+ * @tc.desc: Test NumberFormat Format function
+ * @tc.type: FUNC
+ */
+HWTEST_F(I18NTest, I18NFuncTest0028, TestSize.Level1)
+{
+    LocaleInfo locale("zh", "", "");
+    int status = 0;
+    NumberFormat formatter(locale, status);
+    std::string out = formatter.Format(1234567, status);
+    std::string expect = "1,234,567";
+    EXPECT_TRUE(expect == out);
+}
+
+/**
+ * @tc.name: I18nFuncTest029
+ * @tc.desc: Test PluralFormat GetPluralRuleIndex function
+ * @tc.type: FUNC
+ */
+HWTEST_F(I18NTest, I18nFuncTest029, TestSize.Level1)
+{
+    LocaleInfo locale("am", "", "");
+    I18nStatus status = I18nStatus::ISUCCESS;
+    PluralFormat formatter(locale, status);
+    int out = formatter.GetPluralRuleIndex(0, status);
+    int expect = PluralRuleType::ONE;
+    EXPECT_TRUE(expect == out);
+    out = formatter.GetPluralRuleIndex(1, status);
+    expect = PluralRuleType::ONE;
+    EXPECT_TRUE(expect == out);
+    out = formatter.GetPluralRuleIndex(2, status);
+    expect = PluralRuleType::OTHER;
+    EXPECT_TRUE(expect == out);
+    out = formatter.GetPluralRuleIndex(17, status);
+    expect = PluralRuleType::OTHER;
+    EXPECT_TRUE(expect == out);
+    out = formatter.GetPluralRuleIndex(100, status);
+    expect = PluralRuleType::OTHER;
+    EXPECT_TRUE(expect == out);
+    out = formatter.GetPluralRuleIndex(1000, status);
+    expect = PluralRuleType::OTHER;
+    EXPECT_TRUE(expect == out);
+    out = formatter.GetPluralRuleIndex(10000, status);
+    expect = PluralRuleType::OTHER;
+    EXPECT_TRUE(expect == out);
+    out = formatter.GetPluralRuleIndex(100000, status);
+    expect = PluralRuleType::OTHER;
+    EXPECT_TRUE(expect == out);
+    out = formatter.GetPluralRuleIndex(1000000, status);
+    expect = PluralRuleType::OTHER;
+    EXPECT_TRUE(expect == out);
+}
+
+/**
+ * @tc.name: I18nFuncTest030
+ * @tc.desc: Test PluralFormat GetPluralRuleIndex function
+ * @tc.type: FUNC
+ */
+HWTEST_F(I18NTest, I18nFuncTest030, TestSize.Level1)
+{
+    LocaleInfo locale("ar", "", "");
+    I18nStatus status = I18nStatus::ISUCCESS;
+    PluralFormat formatter(locale, status);
+    int out = formatter.GetPluralRuleIndex(3, status);
+    int expect = PluralRuleType::FEW;
+    EXPECT_TRUE(expect == out);
+    out = formatter.GetPluralRuleIndex(10, status);
+    expect = PluralRuleType::FEW;
+    EXPECT_TRUE(expect == out);
+    out = formatter.GetPluralRuleIndex(11, status);
+    expect = PluralRuleType::MANY;
+    EXPECT_TRUE(expect == out);
+    out = formatter.GetPluralRuleIndex(26, status);
+    expect = PluralRuleType::MANY;
+    EXPECT_TRUE(expect == out);
+    out = formatter.GetPluralRuleIndex(1, status);
+    expect = PluralRuleType::ONE;
+    EXPECT_TRUE(expect == out);
+    out = formatter.GetPluralRuleIndex(100, status);
+    expect = PluralRuleType::OTHER;
+    EXPECT_TRUE(expect == out);
+    out = formatter.GetPluralRuleIndex(2, status);
+    expect = PluralRuleType::TWO;
+    EXPECT_TRUE(expect == out);
+    out = formatter.GetPluralRuleIndex(0, status);
+    expect = PluralRuleType::ZERO;
+    EXPECT_TRUE(expect == out);
+}
+
+/**
+ * @tc.name: I18nFuncTest031
+ * @tc.desc: Test PluralFormat GetPluralRuleIndex function
+ * @tc.type: FUNC
+ */
+HWTEST_F(I18NTest, I18nFuncTest031, TestSize.Level1)
+{
+    LocaleInfo locale("as", "", "");
+    I18nStatus status = I18nStatus::ISUCCESS;
+    PluralFormat formatter(locale, status);
+    int out = formatter.GetPluralRuleIndex(0, status);
+    int expect = PluralRuleType::ONE;
+    EXPECT_TRUE(expect == out);
+    out = formatter.GetPluralRuleIndex(1, status);
+    expect = PluralRuleType::ONE;
+    EXPECT_TRUE(expect == out);
+    out = formatter.GetPluralRuleIndex(2, status);
+    expect = PluralRuleType::OTHER;
+    EXPECT_TRUE(expect == out);
+}
+
+/**
+ * @tc.name: I18nFuncTest032
+ * @tc.desc: Test PluralFormat GetPluralRuleIndex function
+ * @tc.type: FUNC
+ */
+HWTEST_F(I18NTest, I18nFuncTest032, TestSize.Level1)
+{
+    LocaleInfo locale("az", "", "");
+    I18nStatus status = I18nStatus::ISUCCESS;
+    PluralFormat formatter(locale, status);
+    int out = formatter.GetPluralRuleIndex(1, status);
+    int expect = PluralRuleType::ONE;
+    EXPECT_TRUE(expect == out);
+    out = formatter.GetPluralRuleIndex(0, status);
+    expect = PluralRuleType::OTHER;
+    EXPECT_TRUE(expect == out);
+    out = formatter.GetPluralRuleIndex(2, status);
+    expect = PluralRuleType::OTHER;
+    EXPECT_TRUE(expect == out);
+    out = formatter.GetPluralRuleIndex(16, status);
+    expect = PluralRuleType::OTHER;
+    EXPECT_TRUE(expect == out);
+    out = formatter.GetPluralRuleIndex(100, status);
+    expect = PluralRuleType::OTHER;
+    EXPECT_TRUE(expect == out);
+}
+
+/**
+ * @tc.name: I18nFuncTest033
+ * @tc.desc: Test PluralFormat GetPluralRuleIndex function
+ * @tc.type: FUNC
+ */
+HWTEST_F(I18NTest, I18nFuncTest033, TestSize.Level1)
+{
+    LocaleInfo locale("be", "", "");
+    I18nStatus status = I18nStatus::ISUCCESS;
+    PluralFormat formatter(locale, status);
+    int out = formatter.GetPluralRuleIndex(2, status);
+    int expect = PluralRuleType::FEW;
+    EXPECT_TRUE(expect == out);
+    out = formatter.GetPluralRuleIndex(4, status);
+    expect = PluralRuleType::FEW;
+    EXPECT_TRUE(expect == out);
+    out = formatter.GetPluralRuleIndex(0, status);
+    expect = PluralRuleType::MANY;
+    EXPECT_TRUE(expect == out);
+    out = formatter.GetPluralRuleIndex(5, status);
+    expect = PluralRuleType::MANY;
+    EXPECT_TRUE(expect == out);
+    out = formatter.GetPluralRuleIndex(19, status);
+    expect = PluralRuleType::MANY;
+    EXPECT_TRUE(expect == out);
+    out = formatter.GetPluralRuleIndex(1, status);
+    expect = PluralRuleType::ONE;
+    EXPECT_TRUE(expect == out);
+    out = formatter.GetPluralRuleIndex(21, status);
+    expect = PluralRuleType::ONE;
+    EXPECT_TRUE(expect == out);
+}
+
+/**
+ * @tc.name: I18nFuncTest034
+ * @tc.desc: Test PluralFormat GetPluralRuleIndex function
+ * @tc.type: FUNC
+ */
+HWTEST_F(I18NTest, I18nFuncTest034, TestSize.Level1)
+{
+    LocaleInfo locale("bg", "", "");
+    I18nStatus status = I18nStatus::ISUCCESS;
+    PluralFormat formatter(locale, status);
+    int out = formatter.GetPluralRuleIndex(1, status);
+    int expect = PluralRuleType::ONE;
+    EXPECT_TRUE(expect == out);
+    out = formatter.GetPluralRuleIndex(0, status);
+    expect = PluralRuleType::OTHER;
+    EXPECT_TRUE(expect == out);
+    out = formatter.GetPluralRuleIndex(2, status);
+    expect = PluralRuleType::OTHER;
+    EXPECT_TRUE(expect == out);
+    out = formatter.GetPluralRuleIndex(16, status);
+    expect = PluralRuleType::OTHER;
+    EXPECT_TRUE(expect == out);
+    out = formatter.GetPluralRuleIndex(100, status);
+    expect = PluralRuleType::OTHER;
+    EXPECT_TRUE(expect == out);
+    out = formatter.GetPluralRuleIndex(1000, status);
+    expect = PluralRuleType::OTHER;
+    EXPECT_TRUE(expect == out);
+    out = formatter.GetPluralRuleIndex(10000, status);
+    expect = PluralRuleType::OTHER;
+    EXPECT_TRUE(expect == out);
+    out = formatter.GetPluralRuleIndex(100000, status);
+    expect = PluralRuleType::OTHER;
+    EXPECT_TRUE(expect == out);
+    out = formatter.GetPluralRuleIndex(1000000, status);
+    expect = PluralRuleType::OTHER;
+    EXPECT_TRUE(expect == out);
+}
+
+/**
+ * @tc.name: I18nFuncTest035
+ * @tc.desc: Test PluralFormat GetPluralRuleIndex function
+ * @tc.type: FUNC
+ */
+HWTEST_F(I18NTest, I18nFuncTest035, TestSize.Level1)
+{
+    LocaleInfo locale("bn", "", "");
+    I18nStatus status = I18nStatus::ISUCCESS;
+    PluralFormat formatter(locale, status);
+    int out = formatter.GetPluralRuleIndex(0, status);
+    int expect = PluralRuleType::ONE;
+    EXPECT_TRUE(expect == out);
+    out = formatter.GetPluralRuleIndex(1, status);
+    expect = PluralRuleType::ONE;
+    EXPECT_TRUE(expect == out);
+    out = formatter.GetPluralRuleIndex(2, status);
+    expect = PluralRuleType::OTHER;
+    EXPECT_TRUE(expect == out);
+    out = formatter.GetPluralRuleIndex(17, status);
+    expect = PluralRuleType::OTHER;
+    EXPECT_TRUE(expect == out);
+    out = formatter.GetPluralRuleIndex(100, status);
+    expect = PluralRuleType::OTHER;
+    EXPECT_TRUE(expect == out);
+    out = formatter.GetPluralRuleIndex(1000, status);
+    expect = PluralRuleType::OTHER;
+    EXPECT_TRUE(expect == out);
+    out = formatter.GetPluralRuleIndex(10000, status);
+    expect = PluralRuleType::OTHER;
+    EXPECT_TRUE(expect == out);
+    out = formatter.GetPluralRuleIndex(100000, status);
+    expect = PluralRuleType::OTHER;
+    EXPECT_TRUE(expect == out);
+    out = formatter.GetPluralRuleIndex(1000000, status);
+    expect = PluralRuleType::OTHER;
+    EXPECT_TRUE(expect == out);
+}
+
+/**
+ * @tc.name: I18nFuncTest036
+ * @tc.desc: Test PluralFormat GetPluralRuleIndex function
+ * @tc.type: FUNC
+ */
+HWTEST_F(I18NTest, I18nFuncTest036, TestSize.Level1)
+{
+    LocaleInfo locale("bo", "", "");
+    I18nStatus status = I18nStatus::ISUCCESS;
+    PluralFormat formatter(locale, status);
+    int out = formatter.GetPluralRuleIndex(0, status);
+    int expect = PluralRuleType::OTHER;
+    EXPECT_TRUE(expect == out);
+    out = formatter.GetPluralRuleIndex(15, status);
+    expect = PluralRuleType::OTHER;
+    EXPECT_TRUE(expect == out);
+    out = formatter.GetPluralRuleIndex(100, status);
+    expect = PluralRuleType::OTHER;
+    EXPECT_TRUE(expect == out);
+    out = formatter.GetPluralRuleIndex(1000, status);
+    expect = PluralRuleType::OTHER;
+    EXPECT_TRUE(expect == out);
+    out = formatter.GetPluralRuleIndex(10000, status);
+    expect = PluralRuleType::OTHER;
+    EXPECT_TRUE(expect == out);
+    out = formatter.GetPluralRuleIndex(100000, status);
+    expect = PluralRuleType::OTHER;
+    EXPECT_TRUE(expect == out);
+    out = formatter.GetPluralRuleIndex(1000000, status);
+    expect = PluralRuleType::OTHER;
+    EXPECT_TRUE(expect == out);
+}
+
+/**
+ * @tc.name: I18nFuncTest037
+ * @tc.desc: Test PluralFormat GetPluralRuleIndex function
+ * @tc.type: FUNC
+ */
+HWTEST_F(I18NTest, I18nFuncTest037, TestSize.Level1)
+{
+    LocaleInfo locale("bs", "", "");
+    I18nStatus status = I18nStatus::ISUCCESS;
+    PluralFormat formatter(locale, status);
+    int out = formatter.GetPluralRuleIndex(2, status);
+    int expect = PluralRuleType::FEW;
+    EXPECT_TRUE(expect == out);
+    out = formatter.GetPluralRuleIndex(4, status);
+    expect = PluralRuleType::FEW;
+    EXPECT_TRUE(expect == out);
+    out = formatter.GetPluralRuleIndex(22, status);
+    expect = PluralRuleType::FEW;
+    EXPECT_TRUE(expect == out);
+    out = formatter.GetPluralRuleIndex(1, status);
+    expect = PluralRuleType::ONE;
+    EXPECT_TRUE(expect == out);
+    out = formatter.GetPluralRuleIndex(21, status);
+    expect = PluralRuleType::ONE;
+    EXPECT_TRUE(expect == out);
+    out = formatter.GetPluralRuleIndex(0, status);
+    expect = PluralRuleType::OTHER;
+    EXPECT_TRUE(expect == out);
+}
+
+/**
+ * @tc.name: I18nFuncTest038
+ * @tc.desc: Test PluralFormat GetPluralRuleIndex function
+ * @tc.type: FUNC
+ */
+HWTEST_F(I18NTest, I18nFuncTest038, TestSize.Level1)
+{
+    LocaleInfo locale("ca", "", "");
+    I18nStatus status = I18nStatus::ISUCCESS;
+    PluralFormat formatter(locale, status);
+    int out = formatter.GetPluralRuleIndex(1, status);
+    int expect = PluralRuleType::ONE;
+    EXPECT_TRUE(expect == out);
+    out = formatter.GetPluralRuleIndex(0, status);
+    expect = PluralRuleType::OTHER;
+    EXPECT_TRUE(expect == out);
+}
+
+/**
+ * @tc.name: I18nFuncTest039
+ * @tc.desc: Test PluralFormat GetPluralRuleIndex function
+ * @tc.type: FUNC
+ */
+HWTEST_F(I18NTest, I18nFuncTest039, TestSize.Level1)
+{
+    LocaleInfo locale("cs", "", "");
+    I18nStatus status = I18nStatus::ISUCCESS;
+    PluralFormat formatter(locale, status);
+    int out = formatter.GetPluralRuleIndex(2, status);
+    int expect = PluralRuleType::FEW;
+    EXPECT_TRUE(expect == out);
+    out = formatter.GetPluralRuleIndex(4, status);
+    expect = PluralRuleType::FEW;
+    EXPECT_TRUE(expect == out);
+    out = formatter.GetPluralRuleIndex(1, status);
+    expect = PluralRuleType::ONE;
+    EXPECT_TRUE(expect == out);
+    out = formatter.GetPluralRuleIndex(0, status);
+    expect = PluralRuleType::OTHER;
+    EXPECT_TRUE(expect == out);
+}
+
+/**
+ * @tc.name: I18nFuncTest040
+ * @tc.desc: Test PluralFormat GetPluralRuleIndex function
+ * @tc.type: FUNC
+ */
+HWTEST_F(I18NTest, I18nFuncTest040, TestSize.Level1)
+{
+    LocaleInfo locale("da", "", "");
+    I18nStatus status = I18nStatus::ISUCCESS;
+    PluralFormat formatter(locale, status);
+    int out = formatter.GetPluralRuleIndex(1, status);
+    int expect = PluralRuleType::ONE;
+    EXPECT_TRUE(expect == out);
+    out = formatter.GetPluralRuleIndex(0, status);
+    expect = PluralRuleType::OTHER;
+    EXPECT_TRUE(expect == out);
+}
+
+/**
+ * @tc.name: I18nFuncTest041
+ * @tc.desc: Test PluralFormat GetPluralRuleIndex function
+ * @tc.type: FUNC
+ */
+HWTEST_F(I18NTest, I18nFuncTest041, TestSize.Level1)
+{
+    LocaleInfo locale("de", "", "");
+    I18nStatus status = I18nStatus::ISUCCESS;
+    PluralFormat formatter(locale, status);
+    int out = formatter.GetPluralRuleIndex(1, status);
+    int expect = PluralRuleType::ONE;
+    EXPECT_TRUE(expect == out);
+    out = formatter.GetPluralRuleIndex(0, status);
+    expect = PluralRuleType::OTHER;
+    EXPECT_TRUE(expect == out);
+    out = formatter.GetPluralRuleIndex(1000000, status);
+    expect = PluralRuleType::OTHER;
+    EXPECT_TRUE(expect == out);
+}
+
+/**
+ * @tc.name: I18nFuncTest042
+ * @tc.desc: Test PluralFormat GetPluralRuleIndex function
+ * @tc.type: FUNC
+ */
+HWTEST_F(I18NTest, I18nFuncTest042, TestSize.Level1)
+{
+    LocaleInfo locale("el", "", "");
+    I18nStatus status = I18nStatus::ISUCCESS;
+    PluralFormat formatter(locale, status);
+    int out = formatter.GetPluralRuleIndex(1, status);
+    int expect = PluralRuleType::ONE;
+    EXPECT_TRUE(expect == out);
+    out = formatter.GetPluralRuleIndex(100, status);
+    expect = PluralRuleType::OTHER;
+    EXPECT_TRUE(expect == out);
+}
+
+/**
+ * @tc.name: I18nFuncTest043
+ * @tc.desc: Test PluralFormat GetPluralRuleIndex function
+ * @tc.type: FUNC
+ */
+HWTEST_F(I18NTest, I18nFuncTest043, TestSize.Level1)
+{
+    LocaleInfo locale("en", "", "");
+    I18nStatus status = I18nStatus::ISUCCESS;
+    PluralFormat formatter(locale, status);
+    int out = formatter.GetPluralRuleIndex(1, status);
+    int expect = PluralRuleType::ONE;
+    EXPECT_TRUE(expect == out);
+    out = formatter.GetPluralRuleIndex(16, status);
+    expect = PluralRuleType::OTHER;
+    EXPECT_TRUE(expect == out);
+}
+
+/**
+ * @tc.name: I18nFuncTest044
+ * @tc.desc: Test PluralFormat GetPluralRuleIndex function
+ * @tc.type: FUNC
+ */
+HWTEST_F(I18NTest, I18nFuncTest044, TestSize.Level1)
+{
+    LocaleInfo locale("es", "", "");
+    I18nStatus status = I18nStatus::ISUCCESS;
+    PluralFormat formatter(locale, status);
+    int out = formatter.GetPluralRuleIndex(1, status);
+    int expect = PluralRuleType::ONE;
+    EXPECT_TRUE(expect == out);
+    out = formatter.GetPluralRuleIndex(0, status);
+    expect = PluralRuleType::OTHER;
+    EXPECT_TRUE(expect == out);
+    out = formatter.GetPluralRuleIndex(2, status);
+    expect = PluralRuleType::OTHER;
+    EXPECT_TRUE(expect == out);
+}
+
+/**
+ * @tc.name: I18nFuncTest045
+ * @tc.desc: Test PluralFormat GetPluralRuleIndex function
+ * @tc.type: FUNC
+ */
+HWTEST_F(I18NTest, I18nFuncTest045, TestSize.Level1)
+{
+    LocaleInfo locale("et", "", "");
+    I18nStatus status = I18nStatus::ISUCCESS;
+    PluralFormat formatter(locale, status);
+    int out = formatter.GetPluralRuleIndex(1, status);
+    int expect = PluralRuleType::ONE;
+    EXPECT_TRUE(expect == out);
+    out = formatter.GetPluralRuleIndex(2, status);
+    expect = PluralRuleType::OTHER;
+    EXPECT_TRUE(expect == out);
+    out = formatter.GetPluralRuleIndex(100000, status);
+    expect = PluralRuleType::OTHER;
+    EXPECT_TRUE(expect == out);
+}
+
+/**
+ * @tc.name: I18nFuncTest046
+ * @tc.desc: Test NumberFormat Format percent
+ * @tc.type: FUNC
+ */
+HWTEST_F(I18NTest, I18nFuncTest046, TestSize.Level1)
+{
+    LocaleInfo locale("de", "DE");
+    I18nStatus status = I18nStatus::ISUCCESS;
+    NumberFormat format(locale, status);
+    std::string out = format.Format(0.12, NumberFormatType::PERCENT, status);
+    std::string expect = "12 %";
+    cout << "out is " << out << endl;
+    EXPECT_TRUE(expect == out);
+}
+} // anonymous namespace
+
diff --git a/base/global/i18n_lite/frameworks/i18n/test/unittest/lite/common/i18n_test.h b/base/global/i18n_lite/frameworks/i18n/test/unittest/lite/common/i18n_test.h
new file mode 100755
index 00000000..be4b4931
--- /dev/null
+++ b/base/global/i18n_lite/frameworks/i18n/test/unittest/lite/common/i18n_test.h
@@ -0,0 +1,65 @@
+/*
+ * Copyright (c) 2021 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef I18N_GLOBAL_TEST_H
+#define I18N_GLOBAL_TEST_H
+
+int I18NFuncTest001();
+int I18NFuncTest002();
+int I18NFuncTest003();
+int I18NFuncTest004();
+int I18NFuncTest005();
+int I18NFuncTest006();
+int I18NFuncTest007();
+int I18NFuncTest008();
+int I18NFuncTest009();
+int I18NFuncTest010();
+int I18NFuncTest011();
+int I18NFuncTest012();
+int I18NFuncTest013();
+int I18NFuncTest014();
+int I18NFuncTest015();
+int I18NFuncTest016();
+int I18NFuncTest017();
+int I18NFuncTest018();
+int I18NFuncTest019();
+int I18NFuncTest020();
+int I18NFuncTest021();
+int I18NFuncTest022();
+int I18NFuncTest023();
+int I18NFuncTest024();
+int I18NFuncTest025();
+int I18NFuncTest026();
+int I18NFuncTest027();
+int I18NFuncTest028();
+int I18NFuncTest029();
+int I18NFuncTest030();
+int I18NFuncTest031();
+int I18NFuncTest032();
+int I18NFuncTest033();
+int I18NFuncTest034();
+int I18NFuncTest035();
+int I18NFuncTest036();
+int I18NFuncTest037();
+int I18NFuncTest038();
+int I18NFuncTest039();
+int I18NFuncTest040();
+int I18NFuncTest041();
+int I18NFuncTest042();
+int I18NFuncTest043();
+int I18NFuncTest044();
+int I18NFuncTest045();
+int I18NFuncTest046();
+#endif
diff --git a/base/global/i18n_lite/interfaces/kits/i18n/include/date_time_format.h b/base/global/i18n_lite/interfaces/kits/i18n/include/date_time_format.h
new file mode 100755
index 00000000..59bdeee7
--- /dev/null
+++ b/base/global/i18n_lite/interfaces/kits/i18n/include/date_time_format.h
@@ -0,0 +1,162 @@
+/*
+ * Copyright (c) 2021 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef DATE_TIME_FORMAT_H
+#define DATE_TIME_FORMAT_H
+
+/**
+* @addtogroup I18N
+* @{
+*
+* @brief Provides functions related to internationalization (i18n), with which you can format date, time and numbers.
+*
+* @since 2.2
+* @version 1.0
+*/
+
+/**
+* @file date_time_format.h
+*
+* @brief Declares functions for formatting time and obtaining the name for a month or a day of the week,
+    and an AM/PM marker.
+*
+* Example code: \n
+* Creating a <b>LocaleInfo</b> instance: \n
+* {@code LocaleInfo locale("zh", "Hans", "CN"); // zh indicates the language , Hans indicates
+    the script, and CN indicates the country.
+* Creating a <b>DateTimeFormat</b> instance: \n
+* {@code DateTimeFormat formatter(AvailableDateTimeFormatPattern::HOUR_MINUTE, locale);}
+* Formatting data: \n
+* {@code
+*     time_t time = 3600 * 3;
+*     std::string zoneInfo = "+1:00"; // UTC + 1;
+*     std::string out; // Save the formatting result in <b>out</b>.
+*     Ii8nStatus status = Ii8nStatus::ISUCCESS;
+*     formatter.Format(time, zoneInfo, out, status);}
+* Output: \n
+*     4:00
+*
+* @since 2.2
+* @version 1.0
+*/
+
+#include "types.h"
+#include <string>
+#include "locale_info.h"
+#include "number_format.h"
+#include "time.h"
+
+namespace OHOS {
+namespace I18N {
+class DateTimeFormatImpl;
+
+class DateTimeFormat {
+public:
+    /**
+    * @brief A constructor used to create a <b>DateTimeFormat</b> instance with specified pattern and locale.
+    *
+    * @param requestPattern Indicates the specified pattern for formatting.
+    * @param locale Indicates the specified locale.
+    * @since 2.2
+    * @version 1.0
+    */
+    DateTimeFormat(AvailableDateTimeFormatPattern requestPattern, const LocaleInfo &locale);
+
+    /**
+    * @brief A destructor used to delete the <b>DateTimeFormat</b> instance.
+    *
+    * @since 2.2
+    * @version 1.0
+    */
+    ~DateTimeFormat();
+
+    /**
+    * @brief Performs an initialization to load data.
+    *
+    * @return Returns <b>true</b> if the initialization is successful; returns <b>false</b> otherwise.
+    * @since 2.2
+    * @version 1.0
+    */
+    bool Init();
+
+    /**
+    * @brief Formats a time value, number of seconds elapsed since the Unix epoch (00:00:00 UTC on 1 January 1970),
+    *   into a string based on a pattern.
+    *
+    * @param cal Indicates the time value to format.
+    * @param zoneInfo Indicates the time zone information in the <b>+/-ab:cd</b> pattern. <b>+</b> indicates
+    *   that the time zone offset is a positive value, <b>-</b> indicates that the time zone offset is a negative value,
+    *   and <b>ab:cd</b> indicates <b>hour:minute</b>.
+    * @param appendTo Used to save the formatting result.
+    * @param status Indicates the formatting status.
+    * @since 2.2
+    * @version 1.0
+    */
+    void Format(const time_t &cal, const std::string &zoneInfo, std::string &appendTo, I18nStatus &status);
+
+    /**
+    * @brief Applies a pattern for this formatting.
+    *
+    * @param pattern Indicates the pattern to apply.
+    * @since 2.2
+    * @version 1.0
+    */
+    void ApplyPattern(const AvailableDateTimeFormatPattern &pattern);
+
+    /**
+    * @brief Obtains the name for a day of the week based on the specified <b>index</b> and <b>type</b>.
+    *
+    * @param index Indicates the index for the name of a day of the week. The values <b>0</b> to <b>6</b>
+    *   indicate <b>Sunday</b> to <b>Saturday</b>, respectively.
+    * @param type Indicates the type of a day of the week, as enumerated in {@link DateTimeDataType}.
+    * @return Returns the name for a day of the week.
+    * @since 2.2
+    * @version 1.0
+    */
+    std::string GetWeekName(const int32_t &index, DateTimeDataType type);
+
+    /**
+    * @brief Obtains the month name based on the specified <b>index</b> and <b>type</b>.
+    *
+    * @param index Indicates the index for the month name. The values <b>0</b> to <b>11</b>
+    *   indicate <b>January</b> to <b>December</b>, respectively.
+    * @param type Indicates the month type, as enumerated in {@link DateTimeDataType}.
+    * @return Returns the month name.
+    * @since 2.2
+    * @version 1.0
+    */
+    std::string GetMonthName(const int32_t &index, DateTimeDataType type);
+
+    /**
+    * @brief Obtains the AM/PM marker based on the specified <b>index</b> and <b>type</b>.
+    *
+    * @param index Indicates the index for the AM/PM marker. The value <b>0</b> indicates the AM marker,
+    *   and <b>1</b> indicates the PM marker.
+    * @param type Indicates the AM/PM marker type, as enumerated in {@link DateTimeDataType}.
+    * @return Returns the AM/PM marker.
+    * @since 2.2
+    * @version 1.0
+    */
+    std::string GetAmPmMarker(const int32_t &index,
+        DateTimeDataType type = DateTimeDataType::STANDALONE_ABBR);
+private:
+    DateTimeFormatImpl *impl = nullptr;
+    LocaleInfo locale;
+    AvailableDateTimeFormatPattern requestPattern;
+};
+}
+}
+/** @} */
+#endif
diff --git a/base/global/i18n_lite/interfaces/kits/i18n/include/locale_info.h b/base/global/i18n_lite/interfaces/kits/i18n/include/locale_info.h
new file mode 100755
index 00000000..eb92907b
--- /dev/null
+++ b/base/global/i18n_lite/interfaces/kits/i18n/include/locale_info.h
@@ -0,0 +1,212 @@
+/*
+ * Copyright (c) 2021 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef LOCINFO_H
+#define LOCINFO_H
+
+/**
+* @addtogroup I18N
+* @{
+*
+* @brief Provides functions related to internationalization (i18n), with which you can format date, time and numbers.
+*
+* @since 2.2
+* @version 1.0
+*/
+
+/**
+* @file locale_info.h
+*
+* @brief Declares functions for obtaining locale information, including language, script, and country/region.
+*
+* Example code: \n
+* Creating a <b>LocaleInfo</b> instance: \n
+*      {@code LocaleInfo locale("zh", "Hans", "CN");}
+* Obtaining the language: \n
+*      {@code const char *language = locale.GetLanguage();}
+* Output: \n
+*     zh
+*
+* @since 2.2
+* @version 1.0
+*/
+
+#include "types.h"
+#include <cstdint>
+
+namespace OHOS {
+namespace I18N {
+class LocaleInfo {
+public:
+    /**
+    * @brief A constructor used to create a <b>LocaleInfo</b> instance with specified language,
+    *   script, and country/region.
+    *
+    * @param lang Indicates the pointer to the specified language.
+    * @param script Indicates the pointer to the specified script.
+    * @param region Indicates the pointer to the specified country/region.
+    * @since 2.2
+    * @version 1.0
+    */
+    LocaleInfo(const char *lang, const char *script, const char *region);
+
+    /**
+    * @brief A constructor used to create a <b>LocaleInfo</b> instance with specified language and country/region.
+    *
+    * @param lang Indicates the pointer to the specified language.
+    * @param region Indicates the pointer to the specified country/region.
+    * @since 2.2
+    * @version 1.0
+    */
+    LocaleInfo(const char *lang, const char *region);
+
+    /**
+    * @brief A constructor used to create a <b>LocaleInfo</b> instance by copying a specified one.
+    *
+    * @param locale Indicates the specified <b>LocaleInfo</b> instance.
+    * @since 2.2
+    * @version 1.0
+    */
+    LocaleInfo(const LocaleInfo& locale);
+
+    /**
+    * @brief Default constructor used to create a <b>LocaleInfo</b> instance.
+    *
+    * @since 2.2
+    * @version 1.0
+    */
+    LocaleInfo();
+
+    /**
+    * @brief A destructor used to delete the <b>LocaleInfo</b> instance.
+    *
+    * @since 2.2
+    * @version 1.0
+    */
+    virtual ~LocaleInfo();
+
+    /**
+    * @brief Checks whether this <b>LocaleInfo</b> object equals a specified one.
+    *
+    * @param other Indicates the <b>LocaleInfo</b> object to compare.
+    * @return Returns <b>true</b> if the two objects are equal; returns <b>false</b> otherwise.
+    * @since 2.2
+    * @version 1.0
+    */
+    virtual bool operator ==(const LocaleInfo &other) const;
+
+    /**
+    * @brief Creates a new <b>LocaleInfo</b> object based on a specified one.
+    *
+    * @param other Indicates the specified <b>LocaleInfo</b> object.
+    * @return Returns the new <b>LocaleInfo</b> object.
+    * @since 2.2
+    * @version 1.0
+    */
+    virtual LocaleInfo &operator =(const LocaleInfo &other);
+
+    /**
+    * @brief Obtains the ID of this <b>LocaleInfo</b> object, which consists of the language,
+    *   script, and country/region.
+    *
+    * @return Returns the ID.
+    * @since 2.2
+    * @version 1.0
+    */
+    const char *GetId() const;
+
+    /**
+    * @brief Obtains the language specified in this <b>LocaleInfo</b> object.
+    *
+    * @return Returns the language.
+    * @since 2.2
+    * @version 1.0
+    */
+    const char *GetLanguage() const;
+
+    /**
+    * @brief Obtains the script specified in this <b>LocaleInfo</b> object.
+    *
+    * @return Returns the script.
+    * @since 2.2
+    * @version 1.0
+    */
+    const char *GetScript() const;
+
+    /**
+    * @brief Obtains the country/region specified in this <b>LocaleInfo</b> object.
+    *
+    * @return Returns the country/region.
+    * @since 2.2
+    * @version 1.0
+    */
+    const char *GetRegion() const;
+
+    /**
+    * @brief Obtains the mask of this <b>LocaleInfo</b> object.
+    *
+    * @return Returns the mask.
+    * @since 2.2
+    * @version 1.0
+    */
+    uint32_t GetMask() const;
+
+    /**
+    * @brief Checks whether this <b>LocaleInfo</b> object represents the default locale (en-US).
+    *
+    * @return Returns <b>true</b> if the <b>LocaleInfo</b> object represents the default locale;
+    *   returns <b>false</b> otherwise.
+    * @since 2.2
+    * @version 1.0
+    */
+    bool IsDefaultLocale() const;
+private:
+    bool ChangeLanguageCode(char *lang, const int32_t dstSize, const char* src, const int32_t srcSize) const;
+    char *language = nullptr;
+    char *script = nullptr;
+    char *region = nullptr;
+    char *id = nullptr;
+    bool isSucc = true;
+    bool IsSuccess();
+    void SetFail();
+    void Init(const char *lang, const char *script, const char *region, int &status);
+    const int SCRIPT_LENGTH = 4;
+    const int REGION_LENGTH = 2;
+    static constexpr int LANG_MAX_LENGTH = 3;
+    const int LANG_MIN_LENGTH = 2;
+    const int CHAR_OFF = 48;
+};
+
+enum ESupportScript {
+    NOKOWN = 0x0,
+    LATN = 0x1,
+    HANS = 0x2,
+    HANT = 0x3,
+    QAAG = 0x4,
+    CYRL = 0x5,
+    DEVA = 0x6,
+    GURU = 0x7
+};
+
+enum EMask {
+    REGION_FIRST_LETTER = 7,
+    SCRIPT_BEGIN = 14,
+    LANG_SECOND_BEGIN = 18,
+    LANG_FIRST_BEGIN = 25
+};
+}
+}
+/** @} */
+#endif
diff --git a/base/global/i18n_lite/interfaces/kits/i18n/include/number_format.h b/base/global/i18n_lite/interfaces/kits/i18n/include/number_format.h
new file mode 100755
index 00000000..a3a289e9
--- /dev/null
+++ b/base/global/i18n_lite/interfaces/kits/i18n/include/number_format.h
@@ -0,0 +1,173 @@
+/*
+ * Copyright (c) 2021 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef NUMBERFORMAT_H
+#define NUMBERFORMAT_H
+
+/**
+* @addtogroup I18N
+* @{
+*
+* @brief Provides functions related to internationalization (i18n), with which you can format date, time and numbers.
+*
+* @since 2.2
+* @version 1.0
+*/
+
+/**
+* @file number_format.h
+*
+* @brief Declares functions for formatting integers and double numbers.
+*
+* Example code: \n
+* Creating a <b>LocaleInfo</b> instance: \n
+*      {@code LocaleInfo locale("en", "US");}
+* Creating a <b>NumberFormat</b> instance: \n
+* {@code
+* int status = 0;
+* NumberFormat formatter(locale, status);
+* Formatting data: \n
+* {@code
+* int num = 1234
+* std::string out = formatter.Format(num, status);}
+* Output: \n
+*     1,234
+*
+* @since 2.2
+* @version 1.0
+*/
+
+#include "types.h"
+#include "securec.h"
+#include "locale_info.h"
+
+namespace OHOS {
+namespace I18N {
+class NumberFormatImpl;
+
+class NumberFormat {
+public:
+    /**
+    * @brief A constructor used to create a <b>NumberFormat</b> instance with specified locale information.
+    *
+    * @param status Specifies whether a <b>NumberFormat</b> instance is created.
+    *   The value <b>0</b> indicates that a <b>NumberFormat</b> instance is created,
+    *   and the value <b>1</b> indicates the opposite case.
+    * @param locale Indicates the specified locale information.
+    * @since 2.2
+    * @version 1.0
+    */
+    NumberFormat(LocaleInfo &locale, int &status);
+
+    /**
+    * @brief A destructor used to delete the <b>NumberFormat</b> instance.
+    *
+    * @since 2.2
+    * @version 1.0
+    */
+    virtual ~NumberFormat();
+
+    /**
+    * @brief Formats a double number.
+    *
+    * @param num Indicates the double number to format.
+    * @param type Indicates the type the double number is formatted into.
+    *   The value can be <b>DECIMAL</b> or <b>PERCENT</b>.
+    * @param status Specifies whether the formatting is successful.
+    *   The value <b>0</b> indicates that the formatting is successful,
+    *   and <b>1</b> indicates that the formatting fails.
+    * @return Returns a string representation of the formatted double number.
+    * @since 2.2
+    * @version 1.0
+    */
+    std::string Format(double num, NumberFormatType type, int &status);
+
+    /**
+    * @brief Formats an integer.
+    *
+    * @param num Indicates the integer to format.
+    * @param status Specifies whether the formatting is successful.
+    *   The value <b>0</b> indicates that the formatting is successful,
+    *   and <b>1</b> indicates that the formatting fails.
+    * @return Returns a string representation of the formatted integer.
+    * @since 2.2
+    * @version 1.0
+    */
+    std::string Format(int num, int &status);
+
+    /**
+    * @brief Formats a double number without grouping its integer part.
+    *
+    * @param num Indicates the double number to format.
+    * @param type Indicates the type the double number is formatted into.
+    *   The value can be <b>DECIMAL</b> or <b>PERCENT</b>.
+    * @param status Specifies whether the formatting is successful. The value <b>0</b>
+    *   indicates that the formatting is successful, and <b>1</b> indicates that the formatting fails.
+    * @return Returns a string representation of the formatted double number.
+    * @since 2.2
+    * @version 1.0
+    */
+    std::string FormatNoGroup(double num, NumberFormatType type, int &status);
+
+    /**
+    * @brief Formats an integer without grouping.
+    *
+    * @param num Indicates the integer to format.
+    * @param status Specifies whether the formatting is successful. The value <b>0</b> indicates that
+    *   the formatting is successful, and <b>1</b> indicates that the formatting fails.
+    * @return Returns a string representation of the formatted double integer.
+    * @since 2.2
+    * @version 1.0
+    */
+    std::string FormatNoGroup(int num, int &status);
+
+    /**
+    * @brief Performs an initialization to load data.
+    *
+    * @return Returns <b>true</b> if the initialization is successful; returns <b>false</b> otherwise.
+    * @since 2.2
+    * @version 1.0
+    */
+    bool Init();
+
+    /**
+    * @brief Sets the maximum length for the decimal part of a double number. The excess part will be truncated.
+    *
+    * @param length Indicates the maximum length to set.
+    * @return Returns <b>true</b> if the setting is successful; returns <b>false</b> otherwise.
+    * @since 2.2
+    * @version 1.0
+    */
+    bool SetMaxDecimalLength(int length);
+
+    /**
+    * @brief Sets the minimum length for the decimal part of a double number.
+    *   Zero padding is required if the minimum length is not reached.
+    *
+    * @param length Indicates the minimum length to set.
+    * @return Returns <b>true</b> if the setting is successful; returns <b>false</b> otherwise.
+    * @since 2.2
+    * @version 1.0
+    */
+    bool SetMinDecimalLength(int length);
+private:
+    bool ReInitImpl();
+    NumberFormatImpl *impl = nullptr;
+    LocaleInfo mLocale;
+};
+}
+}
+/** @} */
+#endif
\ No newline at end of file
diff --git a/base/global/i18n_lite/interfaces/kits/i18n/include/plural_format.h b/base/global/i18n_lite/interfaces/kits/i18n/include/plural_format.h
new file mode 100755
index 00000000..7bb515b8
--- /dev/null
+++ b/base/global/i18n_lite/interfaces/kits/i18n/include/plural_format.h
@@ -0,0 +1,92 @@
+/*
+ * Copyright (c) 2021 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef PLURALFORMAT_H
+#define PLURALFORMAT_H
+
+/**
+* @addtogroup I18N
+* @{
+*
+* @brief Provides APIs related to internationalization (i18n), with which you can
+* format date, time, and numbers and obtain plural rules.
+*
+* @since 2.2
+* @version 1.0
+*/
+
+/**
+* @file plural_format.h
+*
+* @brief Provides functions that are used to obtain plural rules.
+*
+* @since 2.2
+* @version 1.0
+*/
+
+#include "types.h"
+#include "locale_info.h"
+
+namespace OHOS {
+namespace I18N {
+class PluralFormatImpl;
+
+/**
+* Obtains plural rules.
+*
+* @since 2.2
+* @version 1.0
+*/
+class PluralFormat {
+public:
+    /**
+    * @brief A constructor used to create a <b>PluralFormat</b> object based on the specified locale.
+    *
+    * @param locale Indicates the specified locale.
+    * @param status Indicates the result of creating the <b>PluralFormat</b> object. I18nStatus::ISUCCESS
+    *               indicates that the operation is successful; I18nStatus::IERROR indicates that the
+    *               operation has failed.
+    * @since 2.2
+    * @version 1.0
+    */
+    PluralFormat(LocaleInfo &locale, I18nStatus &status);
+
+    /**
+    * @brief A destructor used to delete the <b>PluralFormat</b> object.
+    *
+    * @since 2.2
+    * @version 1.0
+    */
+    virtual ~PluralFormat();
+
+    /**
+    * @brief Obtains the index value of the plural rule for the specified number.
+    *
+    * @param num Indicates the number for which the plural rule is obtained.
+    * @param status Indicates the status of the process for obtaining the plural rule.
+    * @return Returns the index value of the plural rule; returns <b>-1</b> otherwise.
+    * @since 2.2
+    * @version 1.0
+    */
+    int GetPluralRuleIndex(int number, I18nStatus status);
+private:
+    bool Init();
+    PluralFormatImpl *impl = nullptr;
+    LocaleInfo mLocale;
+};
+}
+}
+
+#endif
\ No newline at end of file
diff --git a/base/global/i18n_lite/interfaces/kits/i18n/include/types.h b/base/global/i18n_lite/interfaces/kits/i18n/include/types.h
new file mode 100755
index 00000000..6463e9a2
--- /dev/null
+++ b/base/global/i18n_lite/interfaces/kits/i18n/include/types.h
@@ -0,0 +1,169 @@
+/*
+ * Copyright (c) 2021 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef TYPE_H
+#define TYPE_H
+
+/**
+* @addtogroup I18N
+* @{
+*
+* @brief Provides functions related to internationalization (i18n), with which you can format date, time and numbers.
+*
+* @since 2.2
+* @version 1.0
+*/
+
+/**
+* @file Types.h
+*
+* @brief Declares enumerated types of time, date, and number formatting.
+*
+* @since 2.2
+* @version 1.0
+*/
+
+#define CONST_CAST const_cast<char *>
+#define CHAR_CAST reinterpret_cast<char const *>
+
+#include <string>
+
+namespace OHOS {
+namespace I18N {
+/**
+* @brief Enumerates formatting statuses.
+*
+* @since 2.2
+* @version 1.0
+*/
+enum I18nStatus {
+    /* Success */
+    ISUCCESS = 0,
+
+    /* Error */
+    IERROR
+};
+
+/**
+* @brief Enumerates number formatting types.
+*
+* @since 2.2
+* @version 1.0
+*/
+enum NumberFormatType {
+    /* Formats a number into a decimal. */
+    DECIMAL,
+
+    /* Formats a number into a percentage. */
+    PERCENT
+};
+
+/**
+* @brief Enumerates date formatting patterns.
+*
+* @since 2.2
+* @version 1.0
+*/
+enum AvailableDateTimeFormatPattern {
+    /* Displays hour, minute, and second in 12-hour format. */
+    HOUR12_MINUTE_SECOND,
+
+    /* Displays hour, minute, and second in 24-hour format. */
+    HOUR24_MINUTE_SECOND,
+
+    /* Displays hour, minute, and second in the default time used in a country/region. */
+    HOUR_MINUTE_SECOND,
+
+    /* Displays hour and minute in 12-hour format. */
+    HOUR12_MINUTE,
+
+    /* Displays hour and minute in 24-hour format. */
+    HOUR24_MINUTE,
+
+    /* Displays hour and minute in the default time format used in a country/region. */
+    HOUR_MINUTE,
+
+    /* Displays month (abbreviated) and day of the week, and day. */
+    ABBR_MONTH_WEEKDAY_DAY,
+
+    /* Displays month (abbreviated) and day. */
+    ABBR_MONTH_DAY,
+
+    /* Display year, month, day, and day of the week, for example, Friday December 18, 2020. */
+    FULL,
+
+    /* Displays year, month, and day, for example, Dec 18, 2020 */
+    MEDIUM,
+
+    /* Displays year, month, and day in numeric pattern, for example, 12/18/2020. */
+    SHORT,
+
+    /* Displays year, month (abbreviated), day of the week (abbreviated), and day. */
+    YEAR_ABBR_MONTH_ABBR_WEEKDAY_DAY,
+
+    /* Displays year, month (wide), day of the week (abbreviated), and day. */
+    YEAR_WIDE_MONTH_ABBR_WEEKDAY_DAY,
+
+    /* Displays year, month (short), day of the week (wide), and day. */
+    YEAR_SHORT_MONTH_WIDE_WEEKDAY_DAY,
+
+    /* Displays year, month (short), day of the week (abbreviated), and day. */
+    YEAR_SHORT_MONTH_ABBR_WEEKDAY_DAY,
+
+    /* Displays year, month (abbreviated), day of the week (wide), and day. */
+    YEAR_ABBR_MONTH_WIDE_WEEKDAY_DAY,
+
+    /* Displays year, month (wide), and day. */
+    YEAR_WIDE_MONTH_DAY
+};
+
+enum DateTimeDataType {
+    /* Abbreviated (format style) */
+    FORMAT_ABBR,
+
+    /* Wide (format style) */
+    FORMAT_WIDE,
+
+    /* Abbreviated (stand-alone style) */
+    STANDALONE_ABBR,
+
+    /* Wide (stand-alone style) */
+    STANDALONE_WIDE
+};
+
+/**
+* @brief Enumerates plural rule types.
+*
+* @since 2.2
+* @version 1.0
+*/
+enum PluralRuleType {
+    /* Zero */
+    ZERO,
+    /* One */
+    ONE,
+    /* Two */
+    TWO,
+    /* Few */
+    FEW,
+    /* Many */
+    MANY,
+    /* Other */
+    OTHER
+};
+}
+}
+/** @} */
+#endif
\ No newline at end of file
diff --git a/base/global/i18n_lite/interfaces/kits/js/builtin/BUILD.gn b/base/global/i18n_lite/interfaces/kits/js/builtin/BUILD.gn
new file mode 100755
index 00000000..04ca046b
--- /dev/null
+++ b/base/global/i18n_lite/interfaces/kits/js/builtin/BUILD.gn
@@ -0,0 +1,42 @@
+# Copyright (c) 2021 Huawei Device Co., Ltd.
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+import("//build/ohos.gni")
+
+config("nativeapi_locale_simulator_config") {
+  cflags = [
+    "-D_INC_STRING_S",
+    "-D_INC_WCHAR_S",
+    "-D_SECIMP=//",
+    "-D_STDIO_S_DEFINED",
+    "-D_INC_STDIO_S",
+    "-D_INC_STDLIB_S",
+    "-D_INC_MEMORY_S",
+  ]
+}
+
+ohos_static_library("nativeapi_locale_simulator") {
+  sources = [ "src/locale_module.cpp" ]
+
+  include_dirs = [
+    "include",
+    "//base/global/resmgr_lite/interfaces/innerkits/include",
+    "//foundation/ace/ace_engine_lite/interfaces/innerkits/builtin/base",
+    "//foundation/ace/ace_engine_lite/interfaces/innerkits/builtin/jsi",
+    "//third_party/bounds_checking_function/include",
+    "//utils/native/lite/include",
+  ]
+  deps = [ "//third_party/bounds_checking_function:libsec_static" ]
+
+  configs = [ ":nativeapi_locale_simulator_config" ]
+}
diff --git a/base/global/i18n_lite/interfaces/kits/js/builtin/CMakeLists.txt b/base/global/i18n_lite/interfaces/kits/js/builtin/CMakeLists.txt
new file mode 100755
index 00000000..906753a2
--- /dev/null
+++ b/base/global/i18n_lite/interfaces/kits/js/builtin/CMakeLists.txt
@@ -0,0 +1,33 @@
+# Copyright (c) 2021 Huawei Device Co., Ltd.
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+cmake_minimum_required(VERSION 3.16.5)
+
+project(nativeapi_locale)
+
+set(CMAKE_CXX_STANDARD 11)
+set(CMAKE_CXX_STANDARD_REQUIRED ON)
+set(CMAKE_INCLUDE_CURRENT_DIR ON)
+
+# header files
+include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include
+                    ${CMAKE_CURRENT_SOURCE_DIR}/../../../../../resmgr_lite/frameworks/interfaces/innerkits/include
+                    ${CMAKE_SOURCE_DIR}/third_party/bounds_checking_function/include)
+
+# source files
+aux_source_directory(${CMAKE_CURRENT_SOURCE_DIR}/src LOCALE)
+
+add_library(nativeapi_locale STATIC
+    ${LOCALE}
+    )
+target_link_libraries(nativeapi_locale ui jsfwk)
diff --git a/base/global/i18n_lite/interfaces/kits/js/builtin/include/locale_module.h b/base/global/i18n_lite/interfaces/kits/js/builtin/include/locale_module.h
new file mode 100755
index 00000000..158297c5
--- /dev/null
+++ b/base/global/i18n_lite/interfaces/kits/js/builtin/include/locale_module.h
@@ -0,0 +1,35 @@
+/*
+ * Copyright (c) 2021 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef LOCATION_MODULE_H
+#define LOCATION_MODULE_H
+
+#include "jsi.h"
+
+namespace OHOS {
+namespace ACELite {
+class LocaleModule {
+public:
+    LocaleModule() {}
+    ~LocaleModule() {}
+    static JSIValue GetLocale(const JSIValue thisVal, const JSIValue *args, uint8_t argsNum);
+    static const char * const TEXT_DIRECTION_LTR;
+};
+
+void InitLocaleModule(JSIValue exports);
+} // namespace ACELite
+} // namespace OHOS
+
+#endif // LOCATION_MODULE_H
\ No newline at end of file
diff --git a/base/global/i18n_lite/interfaces/kits/js/builtin/src/locale_module.cpp b/base/global/i18n_lite/interfaces/kits/js/builtin/src/locale_module.cpp
new file mode 100755
index 00000000..09624505
--- /dev/null
+++ b/base/global/i18n_lite/interfaces/kits/js/builtin/src/locale_module.cpp
@@ -0,0 +1,91 @@
+/*
+ * Copyright (c) 2021 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "locale_module.h"
+#include "global.h"
+#include "securec.h"
+
+namespace OHOS {
+namespace ACELite {
+const char * const LocaleModule::TEXT_DIRECTION_LTR = "ltr";
+// caller must free the returned value by this function
+static char *GetLanguage(void)
+{
+    char *lang = reinterpret_cast<char *>(ace_malloc(MAX_LANGUAGE_LENGTH));
+    if (lang == nullptr) {
+        return nullptr;
+    }
+    (void)memset_s(lang, MAX_LANGUAGE_LENGTH, 0x0, MAX_LANGUAGE_LENGTH);
+    if (GLOBAL_GetLanguage(lang, MAX_LANGUAGE_LENGTH) != 0) {
+        ace_free(lang);
+        return nullptr;
+    }
+    return lang;
+}
+
+// caller must free the returned value by this function
+static char *GetRegion(void)
+{
+    char *region = reinterpret_cast<char *>(ace_malloc(MAX_REGION_LENGTH));
+    if (region == nullptr) {
+        return nullptr;
+    }
+    (void)memset_s(region, MAX_REGION_LENGTH, 0x0, MAX_REGION_LENGTH);
+    if (GLOBAL_GetRegion(region, MAX_REGION_LENGTH) != 0) {
+        ace_free(region);
+        return nullptr;
+    }
+    return region;
+}
+
+static const char *GetTextDirection(void)
+{
+    return LocaleModule::TEXT_DIRECTION_LTR;
+}
+
+void InitLocaleModule(JSIValue exports)
+{
+    JSI::SetModuleAPI(exports, "getLocale", LocaleModule::GetLocale);
+}
+
+JSIValue LocaleModule::GetLocale(const JSIValue thisVal, const JSIValue *args, uint8_t argsNum)
+{
+    JSIValue result = JSI::CreateObject();
+    char *lang = GetLanguage();
+    if (lang == nullptr) {
+        JSI::ReleaseValue(result);
+        return JSI::CreateUndefined();
+    }
+    JSI::SetStringProperty(result, "language", lang);
+    ace_free(lang);
+
+    char *region = GetRegion();
+    if (region == nullptr) {
+        JSI::ReleaseValue(result);
+        return JSI::CreateUndefined();
+    }
+    JSI::SetStringProperty(result, "countryOrRegion", region);
+    ace_free(region);
+
+    const char *dir = GetTextDirection();
+    if (dir == nullptr) {
+        JSI::ReleaseValue(result);
+        return JSI::CreateUndefined();
+    }
+    JSI::SetStringProperty(result, "dir", dir);
+    return result;
+}
+} // namespace ACELite
+} // namespace OHOS
diff --git a/base/global/resmgr_lite/LICENSE b/base/global/resmgr_lite/LICENSE
new file mode 100755
index 00000000..4947287f
--- /dev/null
+++ b/base/global/resmgr_lite/LICENSE
@@ -0,0 +1,177 @@
+
+                                 Apache License
+                           Version 2.0, January 2004
+                        http://www.apache.org/licenses/
+
+   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
+
+   1. Definitions.
+
+      "License" shall mean the terms and conditions for use, reproduction,
+      and distribution as defined by Sections 1 through 9 of this document.
+
+      "Licensor" shall mean the copyright owner or entity authorized by
+      the copyright owner that is granting the License.
+
+      "Legal Entity" shall mean the union of the acting entity and all
+      other entities that control, are controlled by, or are under common
+      control with that entity. For the purposes of this definition,
+      "control" means (i) the power, direct or indirect, to cause the
+      direction or management of such entity, whether by contract or
+      otherwise, or (ii) ownership of fifty percent (50%) or more of the
+      outstanding shares, or (iii) beneficial ownership of such entity.
+
+      "You" (or "Your") shall mean an individual or Legal Entity
+      exercising permissions granted by this License.
+
+      "Source" form shall mean the preferred form for making modifications,
+      including but not limited to software source code, documentation
+      source, and configuration files.
+
+      "Object" form shall mean any form resulting from mechanical
+      transformation or translation of a Source form, including but
+      not limited to compiled object code, generated documentation,
+      and conversions to other media types.
+
+      "Work" shall mean the work of authorship, whether in Source or
+      Object form, made available under the License, as indicated by a
+      copyright notice that is included in or attached to the work
+      (an example is provided in the Appendix below).
+
+      "Derivative Works" shall mean any work, whether in Source or Object
+      form, that is based on (or derived from) the Work and for which the
+      editorial revisions, annotations, elaborations, or other modifications
+      represent, as a whole, an original work of authorship. For the purposes
+      of this License, Derivative Works shall not include works that remain
+      separable from, or merely link (or bind by name) to the interfaces of,
+      the Work and Derivative Works thereof.
+
+      "Contribution" shall mean any work of authorship, including
+      the original version of the Work and any modifications or additions
+      to that Work or Derivative Works thereof, that is intentionally
+      submitted to Licensor for inclusion in the Work by the copyright owner
+      or by an individual or Legal Entity authorized to submit on behalf of
+      the copyright owner. For the purposes of this definition, "submitted"
+      means any form of electronic, verbal, or written communication sent
+      to the Licensor or its representatives, including but not limited to
+      communication on electronic mailing lists, source code control systems,
+      and issue tracking systems that are managed by, or on behalf of, the
+      Licensor for the purpose of discussing and improving the Work, but
+      excluding communication that is conspicuously marked or otherwise
+      designated in writing by the copyright owner as "Not a Contribution."
+
+      "Contributor" shall mean Licensor and any individual or Legal Entity
+      on behalf of whom a Contribution has been received by Licensor and
+      subsequently incorporated within the Work.
+
+   2. Grant of Copyright License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      copyright license to reproduce, prepare Derivative Works of,
+      publicly display, publicly perform, sublicense, and distribute the
+      Work and such Derivative Works in Source or Object form.
+
+   3. Grant of Patent License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      (except as stated in this section) patent license to make, have made,
+      use, offer to sell, sell, import, and otherwise transfer the Work,
+      where such license applies only to those patent claims licensable
+      by such Contributor that are necessarily infringed by their
+      Contribution(s) alone or by combination of their Contribution(s)
+      with the Work to which such Contribution(s) was submitted. If You
+      institute patent litigation against any entity (including a
+      cross-claim or counterclaim in a lawsuit) alleging that the Work
+      or a Contribution incorporated within the Work constitutes direct
+      or contributory patent infringement, then any patent licenses
+      granted to You under this License for that Work shall terminate
+      as of the date such litigation is filed.
+
+   4. Redistribution. You may reproduce and distribute copies of the
+      Work or Derivative Works thereof in any medium, with or without
+      modifications, and in Source or Object form, provided that You
+      meet the following conditions:
+
+      (a) You must give any other recipients of the Work or
+          Derivative Works a copy of this License; and
+
+      (b) You must cause any modified files to carry prominent notices
+          stating that You changed the files; and
+
+      (c) You must retain, in the Source form of any Derivative Works
+          that You distribute, all copyright, patent, trademark, and
+          attribution notices from the Source form of the Work,
+          excluding those notices that do not pertain to any part of
+          the Derivative Works; and
+
+      (d) If the Work includes a "NOTICE" text file as part of its
+          distribution, then any Derivative Works that You distribute must
+          include a readable copy of the attribution notices contained
+          within such NOTICE file, excluding those notices that do not
+          pertain to any part of the Derivative Works, in at least one
+          of the following places: within a NOTICE text file distributed
+          as part of the Derivative Works; within the Source form or
+          documentation, if provided along with the Derivative Works; or,
+          within a display generated by the Derivative Works, if and
+          wherever such third-party notices normally appear. The contents
+          of the NOTICE file are for informational purposes only and
+          do not modify the License. You may add Your own attribution
+          notices within Derivative Works that You distribute, alongside
+          or as an addendum to the NOTICE text from the Work, provided
+          that such additional attribution notices cannot be construed
+          as modifying the License.
+
+      You may add Your own copyright statement to Your modifications and
+      may provide additional or different license terms and conditions
+      for use, reproduction, or distribution of Your modifications, or
+      for any such Derivative Works as a whole, provided Your use,
+      reproduction, and distribution of the Work otherwise complies with
+      the conditions stated in this License.
+
+   5. Submission of Contributions. Unless You explicitly state otherwise,
+      any Contribution intentionally submitted for inclusion in the Work
+      by You to the Licensor shall be under the terms and conditions of
+      this License, without any additional terms or conditions.
+      Notwithstanding the above, nothing herein shall supersede or modify
+      the terms of any separate license agreement you may have executed
+      with Licensor regarding such Contributions.
+
+   6. Trademarks. This License does not grant permission to use the trade
+      names, trademarks, service marks, or product names of the Licensor,
+      except as required for reasonable and customary use in describing the
+      origin of the Work and reproducing the content of the NOTICE file.
+
+   7. Disclaimer of Warranty. Unless required by applicable law or
+      agreed to in writing, Licensor provides the Work (and each
+      Contributor provides its Contributions) on an "AS IS" BASIS,
+      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
+      implied, including, without limitation, any warranties or conditions
+      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
+      PARTICULAR PURPOSE. You are solely responsible for determining the
+      appropriateness of using or redistributing the Work and assume any
+      risks associated with Your exercise of permissions under this License.
+
+   8. Limitation of Liability. In no event and under no legal theory,
+      whether in tort (including negligence), contract, or otherwise,
+      unless required by applicable law (such as deliberate and grossly
+      negligent acts) or agreed to in writing, shall any Contributor be
+      liable to You for damages, including any direct, indirect, special,
+      incidental, or consequential damages of any character arising as a
+      result of this License or out of the use or inability to use the
+      Work (including but not limited to damages for loss of goodwill,
+      work stoppage, computer failure or malfunction, or any and all
+      other commercial damages or losses), even if such Contributor
+      has been advised of the possibility of such damages.
+
+   9. Accepting Warranty or Additional Liability. While redistributing
+      the Work or Derivative Works thereof, You may choose to offer,
+      and charge a fee for, acceptance of support, warranty, indemnity,
+      or other liability obligations and/or rights consistent with this
+      License. However, in accepting such obligations, You may act only
+      on Your own behalf and on Your sole responsibility, not on behalf
+      of any other Contributor, and only if You agree to indemnify,
+      defend, and hold each Contributor harmless for any liability
+      incurred by, or claims asserted against, such Contributor by reason
+      of your accepting any such warranty or additional liability.
+
+   END OF TERMS AND CONDITIONS
\ No newline at end of file
diff --git a/base/global/resmgr_lite/README.md b/base/global/resmgr_lite/README.md
new file mode 100755
index 00000000..5b062ea4
--- /dev/null
+++ b/base/global/resmgr_lite/README.md
@@ -0,0 +1,59 @@
+# resmgr<a name="EN-US_TOPIC_0000001073289170"></a>
+
+-   [Introduction](#section11660541593)
+-   [Directory Structure](#section1844145112017)
+-   [Usage](#section17235135618274)
+-   [Constraints](#section568761318105)
+-   [Repositories Involved](#section15583142420413)
+
+## Introduction<a name="section11660541593"></a>
+
+The resource management module, namely, resmgr, provides the function of loading multi-language GUI resources for applications, for example, displaying the application names or icons specific to a certain language.
+
+## Directory Structure<a name="section1844145112017"></a>
+
+The directory structure for the resource management module is as follows:
+
+```
+/base/global/
+├── resmgr_lite                # Code repository for the resource management module
+│   ├──  frameworks            # Core code of the resource management module
+│   │   ├── resmgr             # Core code for resource parsing
+│   │   │   ├── include        # Header files of the resource management module
+│   │   │   └── src            # Implementation code of the resource management module
+│   ├──  interfaces            # APIs of the resource management module
+│   │   └── innerkits          # APIs of the resource management module for internal subsystems
+```
+
+## Usage<a name="section17235135618274"></a>
+
+Call the  **GLOBAL\_GetValueById**  API to obtain the resource information of the application.
+
+```
+#include <stdint.h>
+#include <stdio.h>
+#include "global.h"
+
+uint32_t id = 0x16777216;
+char *values = NULL;
+int32_t re = GLOBAL_GetValueById(id, "/system/data/resources.index", &values); // Obtain the resource of a specified application and write the resource to values.
+std::count << values << std::endl;
+if (values != NULL) {
+    free(values);
+}
+```
+
+## Constraints<a name="section568761318105"></a>
+
+**Programming language**: C/C++
+
+## Repositories Involved<a name="section15583142420413"></a>
+
+[Globalization subsystem](https://gitee.com/openharmony/docs/blob/master/en/readme/globalization.md)
+
+global\_resmgr\_lite
+
+[global\_i18n\_lite](https://gitee.com/openharmony/global_i18n_lite/blob/master/README.md)
+
+[global\_cust\_lite](https://gitee.com/openharmony/global_cust_lite/blob/master/README.md)
+
diff --git a/base/global/resmgr_lite/README_zh.md b/base/global/resmgr_lite/README_zh.md
new file mode 100755
index 00000000..54214da2
--- /dev/null
+++ b/base/global/resmgr_lite/README_zh.md
@@ -0,0 +1,59 @@
+# 资源管理组件介绍<a name="ZH-CN_TOPIC_0000001073289170"></a>
+
+-   [简介](#section11660541593)
+-   [目录](#section1844145112017)
+-   [说明](#section17235135618274)
+-   [约束](#section568761318105)
+-   [相关仓](#section15583142420413)
+
+## 简介<a name="section11660541593"></a>
+
+资源管理组件为应用提供加载多语言界面资源的能力，如不同语言下提供不同的应用名称或图标等。
+
+## 目录<a name="section1844145112017"></a>
+
+资源管理组件源代码目录结构如下所示：
+
+```
+/base/global/
+├── resmgr_lite               # 资源管理代码仓
+│   ├──  frameworks           # 资源管理核心代码
+│   │   ├── resmgr            # 资源解析核心代码
+│   │   │   ├── include       # 资源管理头文件
+│   │   │   └── src           # 资源管理实现代码
+│   ├──  interfaces           # 资源管理接口
+│   │   └── innerkits         # 资源管理对子系统间接口
+```
+
+## 说明<a name="section17235135618274"></a>
+
+调用GLOBAL\_GetValueById接口获取应用的资源信息 。
+
+```
+#include <stdint.h>
+#include <stdio.h>
+#include "global.h"
+
+uint32_t id = 0x16777216;
+char *values = NULL;
+int32_t re = GLOBAL_GetValueById(id, "/system/data/resources.index", &values); // 调用指定应用下某一条资源，并写入values中
+std::count << values << std::endl;
+if (values != NULL) {
+    free(values);
+}
+```
+
+## 约束<a name="section568761318105"></a>
+
+**语言限制**：C/C++语言
+
+## 相关仓<a name="section15583142420413"></a>
+
+[全球化子系统](https://gitee.com/openharmony/docs/blob/master/zh-cn/readme/%E5%85%A8%E7%90%83%E5%8C%96%E5%AD%90%E7%B3%BB%E7%BB%9F.md)
+
+global\_resmgr\_lite
+
+[global\_i18n\_lite](https://gitee.com/openharmony/global_i18n_lite/blob/master/README_zh.md)
+
+[global\_cust\_lite](https://gitee.com/openharmony/global_cust_lite/blob/master/README_zh.md)
+
diff --git a/base/global/resmgr_lite/frameworks/resmgr_lite/BUILD.gn b/base/global/resmgr_lite/frameworks/resmgr_lite/BUILD.gn
new file mode 100755
index 00000000..e4aa2588
--- /dev/null
+++ b/base/global/resmgr_lite/frameworks/resmgr_lite/BUILD.gn
@@ -0,0 +1,70 @@
+# Copyright (c) 2020-2021 Huawei Device Co., Ltd.
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+if (defined(ohos_lite)) {
+  import("//build/lite/config/component/lite_component.gni")
+} else {
+  import("//build/ohos.gni")
+}
+
+global_sources = [
+  "src/global.c",
+  "src/global_utils.c",
+]
+
+config("global_resmgr_config") {
+  include_dirs = [
+    "include",
+    "//base/global/resmgr_lite/interfaces/innerkits/include",
+    "//utils/native/lite/include",
+    "//third_party/bounds_checking_function/include",
+  ]
+}
+
+config("global_public_config") {
+  include_dirs = [
+    "//base/global/resmgr_lite/frameworks/resmgr_lite/include",
+    "//base/global/resmgr_lite/interfaces/innerkits/include",
+  ]
+}
+
+config("global_resmgr_mingw_config") {
+  cflags = [
+    "-D_INC_STRING_S",
+    "-D_INC_WCHAR_S",
+    "-D_SECIMP=//",
+    "-D_STDIO_S_DEFINED",
+    "-D_INC_STDIO_S",
+    "-D_INC_STDLIB_S",
+    "-D_INC_MEMORY_S",
+  ]
+}
+
+if (defined(ohos_lite)) {
+  shared_library("global_resmgr") {
+    sources = global_sources
+    configs += [ ":global_resmgr_config" ]
+    deps = [ "//third_party/bounds_checking_function:libsec_shared" ]
+  }
+
+  lite_component("global_manager_lite") {
+    features = [ ":global_resmgr" ]
+  }
+} else {
+  ohos_static_library("global_resmgr_simulator") {
+    sources = global_sources
+    public_configs = [ ":global_public_config" ]
+    deps = [ "//third_party/bounds_checking_function:libsec_static" ]
+    configs = [ ":global_resmgr_mingw_config" ]
+  }
+}
diff --git a/base/global/resmgr_lite/frameworks/resmgr_lite/CMakeLists.txt b/base/global/resmgr_lite/frameworks/resmgr_lite/CMakeLists.txt
new file mode 100755
index 00000000..d561265c
--- /dev/null
+++ b/base/global/resmgr_lite/frameworks/resmgr_lite/CMakeLists.txt
@@ -0,0 +1,27 @@
+# Copyright (c) 2021 Huawei Device Co., Ltd.
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+cmake_minimum_required(VERSION 3.16.5)
+
+set(GlobalSrc "${PROJECT_SOURCE_DIR}/base/global/resmgr_lite/frameworks/resmgr_lite/src")
+set(GlobalInc "${PROJECT_SOURCE_DIR}/base/global/resmgr_lite/frameworks/resmgr_lite/include")
+set(GlobalKitInc "${PROJECT_SOURCE_DIR}/base/global/resmgr_lite/interfaces/innerkits/include")
+
+include_directories(${PROJECT_SOURCE_DIR}/third_party/bounds_checking_function/include)
+
+add_library(global_resmgr STATIC
+    ${GlobalSrc}/global.c
+    ${GlobalSrc}/global_utils.c
+)
+
+target_include_directories(global_resmgr PUBLIC ${GlobalInc} ${GlobalKitInc})
\ No newline at end of file
diff --git a/base/global/resmgr_lite/frameworks/resmgr_lite/include/global_utils.h b/base/global/resmgr_lite/frameworks/resmgr_lite/include/global_utils.h
new file mode 100755
index 00000000..d2ca803c
--- /dev/null
+++ b/base/global/resmgr_lite/frameworks/resmgr_lite/include/global_utils.h
@@ -0,0 +1,59 @@
+/*
+ * Copyright (c) 2020 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef OHOS_GLOBAL_UTILS_H
+#define OHOS_GLOBAL_UTILS_H
+
+#include "global.h"
+
+#ifdef __cplusplus
+#if __cplusplus
+extern "C" {
+#endif
+#endif // __cplusplus
+
+#define LOCALE_ELEMENT_NUM 3
+#ifdef I18N_PRODUCT
+#define PATH_MAX 1024
+#endif
+typedef struct GlobalUtilsImpl {
+    uint32_t (*GetOffsetByLocale)(const char *path, const char *locale, uint32_t length);
+    uint32_t (*GetDefaultOffsetValue)(int32_t file);
+    uint32_t (*GetKeyValue)(int32_t file);
+    int32_t (*GetIdItem)(int32_t file, uint32_t offset, IdItem *idItem);
+    uint32_t (*GetIdHeaderOffsetByLocale)(const char *locale, const Key *keys, uint32_t configNum);
+    int32_t (*GetIdHeaderByOffset)(int32_t file, uint32_t offset, IdHeader *idHeader);
+    int32_t (*SplitLocale)(const char *src, char **dest, int32_t *num);
+    int32_t (*CheckFilePath)(const char *path, char *realResourcePath, int32_t length);
+} GlobalUtilsImpl;
+
+typedef struct LocaleItem {
+    uint32_t language;
+    uint32_t script;
+    uint32_t region;
+} LocaleItem;
+
+GlobalUtilsImpl *GetGlobalUtilsImpl(void);
+
+#define MC_FAILURE -1
+#define MC_SUCCESS 0
+
+#ifdef __cplusplus
+#if __cplusplus
+}
+#endif
+#endif // __cplusplus
+
+#endif // OHOS_GLOBAL_UTILS_H
diff --git a/base/global/resmgr_lite/frameworks/resmgr_lite/src/global.c b/base/global/resmgr_lite/frameworks/resmgr_lite/src/global.c
new file mode 100755
index 00000000..c132ff7f
--- /dev/null
+++ b/base/global/resmgr_lite/frameworks/resmgr_lite/src/global.c
@@ -0,0 +1,226 @@
+/*
+ * Copyright (c) 2020-2021 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "global.h"
+
+#include <fcntl.h>
+#include <limits.h>
+#include <securec.h>
+#include <string.h>
+#include <sys/stat.h>
+#include <sys/types.h>
+#include <unistd.h>
+
+#include "global_utils.h"
+
+/*
+ * locale format as below, use '-' or '_' to link, e.g. en_Latn_US
+ * and needn't have all 3 elements, so max length is 13 including '\0'
+ * |   language  |   script  |        region          |
+ * | ----------- | --------- | ---------------------- |
+ * | 2-3 letters | 4 letters | 2 letters or 3 numbers |
+ */
+
+#define MAX_LOCALE_LENGTH 13
+#define UI_LOCALE_ELEMENT_NUM 2
+static char g_locale[MAX_LOCALE_LENGTH] = {0};
+
+void GLOBAL_ConfigLanguage(const char *appLanguage)
+{
+    if (appLanguage == NULL) {
+        return;
+    }
+    // appLanguage is same as g_locale, needn't strcpy_s
+    if (strcmp(appLanguage, g_locale) == 0) {
+        return;
+    }
+    if (strcpy_s(g_locale, MAX_LOCALE_LENGTH, appLanguage) != EOK) {
+        return;
+    }
+}
+
+int32_t GLOBAL_GetLanguage(char *language, uint8_t len)
+{
+    if (language == NULL || len == 0) {
+        return MC_FAILURE;
+    }
+    char *localeArray[LOCALE_ELEMENT_NUM] = {NULL};
+    char tempLocale[MAX_LOCALE_LENGTH] = {'\0'};
+    int32_t ret = strcpy_s(tempLocale, MAX_LOCALE_LENGTH, g_locale);
+    if (ret != EOK) {
+        return MC_FAILURE;
+    }
+    int32_t count = 0;
+    ret = GetGlobalUtilsImpl()->SplitLocale(tempLocale, localeArray, &count);
+    if (ret == MC_FAILURE || count != UI_LOCALE_ELEMENT_NUM) {
+        return MC_FAILURE;
+    }
+
+    // language must be the element 0;
+    return (strncpy_s(language, len, localeArray[0], MAX_LANGUAGE_LENGTH - 1) != EOK) ? MC_FAILURE : MC_SUCCESS;
+}
+
+int32_t GLOBAL_GetRegion(char *region, uint8_t len)
+{
+    if (region == NULL || len == 0) {
+        return MC_FAILURE;
+    }
+    char *localeArray[LOCALE_ELEMENT_NUM] = {NULL};
+    char tempLocale[MAX_LOCALE_LENGTH] = {'\0'};
+    int32_t ret = strcpy_s(tempLocale, MAX_LOCALE_LENGTH, g_locale);
+    if (ret != EOK) {
+        return MC_FAILURE;
+    }
+    int32_t count = 0;
+    ret = GetGlobalUtilsImpl()->SplitLocale(tempLocale, localeArray, &count);
+    if (ret == MC_FAILURE || count != UI_LOCALE_ELEMENT_NUM) {
+        return MC_FAILURE;
+    }
+
+    // region must be the element 1
+    return (strncpy_s(region, len, localeArray[1], MAX_REGION_LENGTH - 1) != EOK) ? MC_FAILURE : MC_SUCCESS;
+}
+
+static void FreeIdItem(IdItem *idItem)
+{
+    if (idItem == NULL) {
+        return;
+    }
+    free(idItem->value);
+    free(idItem->name);
+    idItem->value = NULL;
+    idItem->name = NULL;
+}
+
+static void FreeValue(char **value)
+{
+    if (*value != NULL) {
+        free(*value);
+        *value = NULL;
+    }
+}
+
+int32_t GLOBAL_GetValueById(uint32_t id, const char *path, char **value)
+{
+    if (path == NULL || path[0] == '\0' || value == NULL) {
+        return MC_FAILURE;
+    }
+
+    char tempLocale[MAX_LOCALE_LENGTH] = {'\0'};
+    int32_t ret = strcpy_s(tempLocale, MAX_LOCALE_LENGTH, g_locale);
+    if (ret != EOK) {
+        return MC_FAILURE;
+    }
+
+    char realResourcePath[PATH_MAX] = {'\0'};
+    GlobalUtilsImpl *utilsImpl = GetGlobalUtilsImpl();
+    if (utilsImpl->CheckFilePath(path, realResourcePath, PATH_MAX) == MC_FAILURE) {
+        return MC_FAILURE;
+    }
+
+    uint32_t idHeaderOffset = utilsImpl->GetOffsetByLocale(realResourcePath, tempLocale, MAX_LOCALE_LENGTH);
+    IdHeader idHeader = {0, NULL};
+    int32_t file = open(realResourcePath, O_RDONLY, S_IRUSR | S_IRGRP | S_IROTH);
+    if (file < 0) {
+        return MC_FAILURE;
+    }
+    ret = utilsImpl->GetIdHeaderByOffset(file, idHeaderOffset, &idHeader);
+    if (ret != MC_SUCCESS) {
+        close(file);
+        return ret;
+    }
+
+    IdItem idItem = {0, INVALID_RES_TYPE, 0, 0, NULL, 0, NULL};
+    for (uint32_t i = 0; i < idHeader.count; i++) {
+        if (idHeader.idParams[i].id == id) {
+            int32_t ret = utilsImpl->GetIdItem(file, idHeader.idParams[i].offset, &idItem);
+            if (ret != MC_SUCCESS) {
+                close(file);
+                free(idHeader.idParams);
+                return ret;
+            }
+            *value = (char *)malloc(idItem.valueLen);
+            if (*value == NULL || strcpy_s(*value, idItem.valueLen, idItem.value) != EOK) {
+                close(file);
+                free(idHeader.idParams);
+                FreeIdItem(&idItem);
+                FreeValue(value);
+                return MC_FAILURE;
+            }
+            break;
+        }
+    }
+    close(file);
+    free(idHeader.idParams);
+    FreeIdItem(&idItem);
+    return MC_SUCCESS;
+}
+
+int32_t GLOBAL_GetValueByName(const char *name, const char *path, char **value)
+{
+    if (name == NULL || strlen(name) == 0 || path == NULL || strlen(path) == 0 || value == NULL) {
+        return MC_FAILURE;
+    }
+
+    char tempLocale[MAX_LOCALE_LENGTH] = {'\0'};
+    int32_t ret = strcpy_s(tempLocale, MAX_LOCALE_LENGTH, g_locale);
+    if (ret != EOK) {
+        return MC_FAILURE;
+    }
+    char realResourcePath[PATH_MAX] = {'\0'};
+    GlobalUtilsImpl *utilsImpl = GetGlobalUtilsImpl();
+    if (utilsImpl->CheckFilePath(path, realResourcePath, PATH_MAX) == MC_FAILURE) {
+        return MC_FAILURE;
+    }
+    uint32_t idHeaderOffset = utilsImpl->GetOffsetByLocale(realResourcePath, tempLocale, MAX_LOCALE_LENGTH);
+    IdHeader idHeader = {0, NULL};
+    int32_t file = open(realResourcePath, O_RDONLY, S_IRUSR | S_IRGRP | S_IROTH);
+    if (file < 0) {
+        return MC_FAILURE;
+    }
+    ret = utilsImpl->GetIdHeaderByOffset(file, idHeaderOffset, &idHeader);
+    if (ret != MC_SUCCESS) {
+        close(file);
+        return ret;
+    }
+
+    IdItem idItem = {0, INVALID_RES_TYPE, 0, 0, NULL, 0, NULL};
+    for (uint32_t i = 0; i < idHeader.count; i++) {
+        int32_t ret = utilsImpl->GetIdItem(file, idHeader.idParams[i].offset, &idItem);
+        if (ret != MC_SUCCESS) {
+            close(file);
+            free(idHeader.idParams);
+            return ret;
+        }
+        if (strcmp(name, idItem.name) != 0) {
+            FreeIdItem(&idItem);
+            continue;
+        }
+        *value = (char *)malloc(idItem.valueLen);
+        if (*value == NULL || strcpy_s(*value, idItem.valueLen, idItem.value) != EOK) {
+            close(file);
+            free(idHeader.idParams);
+            FreeIdItem(&idItem);
+            FreeValue(value);
+            return MC_FAILURE;
+        }
+        break;
+    }
+
+    close(file);
+    free(idHeader.idParams);
+    FreeIdItem(&idItem);
+    return MC_SUCCESS;
+}
diff --git a/base/global/resmgr_lite/frameworks/resmgr_lite/src/global_utils.c b/base/global/resmgr_lite/frameworks/resmgr_lite/src/global_utils.c
new file mode 100755
index 00000000..64f54ec6
--- /dev/null
+++ b/base/global/resmgr_lite/frameworks/resmgr_lite/src/global_utils.c
@@ -0,0 +1,519 @@
+/*
+ * Copyright (c) 2020-2021 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "global_utils.h"
+
+#include <ctype.h>
+#include <fcntl.h>
+#include <limits.h>
+#include <securec.h>
+#if (defined(_WIN32) || defined(_WIN64))
+#include <shlwapi.h>
+#endif
+#include <string.h>
+#include <sys/stat.h>
+#include <sys/types.h>
+#include <unistd.h>
+
+#define MAX_ID_ITEM_NUM    0x7F
+#define MAX_RES_CONFIG_NUM 0x10
+#define MAX_ITEM_LENGTH    0xFF
+
+enum LocaleIndex {
+    LANGUAGE_INDEX = 0,
+    SCRIPT_INDEX =   1,
+    REGION_INDEX =   2
+};
+
+static int32_t Split(const char *src, const char *separator, char **dest, int32_t *num);
+static int32_t SplitLocale(const char *src, char **dest, int32_t *num);
+static uint32_t ConvertUint8ArrayToUint32(const uint8_t *array, int32_t count);
+static uint32_t GetValueFromLocale(const char *locale);
+static void SetLocaleItemViaKeys(const KeyParam *keyParam, LocaleItem *localeItem);
+static uint32_t FindOffsetByLanguage(const char *language, const Key *keys, uint32_t configNum);
+static uint32_t FindOffsetByLangWithScriptOrRegion(char **resConfig, const Key *keys, uint32_t configNum);
+static uint32_t FindOffsetByAllParam(char **resConfig, const Key *keys, uint32_t configNum);
+static uint32_t GetIdHeaderOffsetByCount(char **resConfig, const Key *keys, uint32_t configNum, int32_t count);
+static uint32_t GetOffsetByLocale(const char *path, const char *locale, uint32_t length);
+static uint32_t GetDefaultOffsetValue(int32_t file);
+static uint32_t GetKeyValue(int32_t file);
+static int32_t GetIdItem(int32_t file, uint32_t offset, IdItem *idItem);
+static void FreeKeyParams(Key *keys, int32_t count);
+static int32_t GetKeyParams(int32_t file, Key *keys, uint32_t resConfigNum);
+static uint32_t GetIdHeaderOffsetByLocale(const char *locale, const Key *keys, uint32_t configNum);
+static int32_t GetIdHeaderByOffset(int32_t file, uint32_t offset, IdHeader *idHeader);
+static int32_t CheckFilePath(const char *path, char *realResourcePath, int32_t length);
+
+static GlobalUtilsImpl g_globalUtilsImpl = {
+    .GetOffsetByLocale = GetOffsetByLocale,
+    .GetDefaultOffsetValue = GetDefaultOffsetValue,
+    .GetKeyValue = GetKeyValue,
+    .GetIdItem = GetIdItem,
+    .GetIdHeaderOffsetByLocale = GetIdHeaderOffsetByLocale,
+    .GetIdHeaderByOffset = GetIdHeaderByOffset,
+    .SplitLocale = SplitLocale,
+    .CheckFilePath = CheckFilePath,
+};
+
+static uint32_t g_defaultIdHeaderOffset = INVALID_OFFSET;
+
+static int32_t Split(const char *src, const char *separator, char **dest, int32_t *num)
+{
+    char *next = NULL;
+    int32_t count = 0;
+    if (src == NULL || src[0] == '\0' || separator == NULL || separator[0] == '\0' || dest == NULL || num == NULL) {
+        return MC_FAILURE;
+    }
+    next = strtok((char *)src, separator);
+    while (next != NULL) {
+        if (count >= LOCALE_ELEMENT_NUM) {
+            return MC_FAILURE;
+        }
+        *dest++ = next;
+        ++count;
+        next = strtok(NULL, separator);
+    }
+    *num = count;
+    return MC_SUCCESS;
+}
+
+static int32_t SplitLocale(const char *src, char **dest, int32_t *num)
+{
+    if (src == NULL || strlen(src) == 0 || dest == NULL || num == NULL) {
+        return MC_FAILURE;
+    }
+    if (strchr(src, '-') != NULL) {
+        (void)Split(src, "-", dest, num);
+    } else if (strchr(src, '_') != NULL) {
+        (void)Split(src, "_", dest, num);
+    } else {
+        dest[0] = (char *)src;
+    }
+    return MC_SUCCESS;
+}
+
+static uint32_t ConvertUint8ArrayToUint32(const uint8_t *array, int32_t count)
+{
+    if (array == NULL) {
+        return 0;
+    }
+    uint32_t value = 0;
+    uint8_t offset = 0;
+    // calculate big endian array, e.g. "ne\0\0" = 'n' + 'e' << 8 + 0 << 16 + 0 << 24
+    for (int32_t i = 0; i < count; i++) {
+        value += (array[i] << offset);
+        offset += OFFSET_VALUE_STEP;
+    }
+    return value;
+}
+
+static uint32_t GetValueFromLocale(const char *locale)
+{
+    if (locale == NULL) {
+        return 0;
+    }
+    uint32_t value = 0;
+    uint32_t offset = 0;
+    // calculate little endian array, e.g. "en" = 'n' + 'e' << 8
+    for (int32_t i = strlen(locale) - 1; i >= 0; i--) {
+        // locale needs to be case insensitive
+        value += (((uint8_t)tolower(locale[i])) << offset);
+        offset += OFFSET_VALUE_STEP;
+    }
+    return value;
+}
+
+static uint32_t FindOffsetByLanguage(const char *language, const Key *keys, uint32_t configNum)
+{
+    if (language == NULL || keys == NULL) {
+        return INVALID_OFFSET;
+    }
+    uint32_t value = GetValueFromLocale(language);
+    for (uint32_t i = 0; i < configNum; i++) {
+        for (uint32_t j = 0; j < keys[i].keysCount; j++) {
+            if (keys[i].keyParams[j].type == LANGUAGES && keys[i].keyParams[j].value == value) {
+                return keys[i].offset;
+            }
+        }
+    }
+    return INVALID_OFFSET;
+}
+
+static void SetLocaleItemViaKeys(const KeyParam *keyParam, LocaleItem *localeItem)
+{
+    if (keyParam == NULL || localeItem == NULL) {
+        return;
+    }
+    switch (keyParam->type) {
+        case LANGUAGES:
+            localeItem->language = keyParam->value;
+            break;
+        case SCRIPT:
+            localeItem->script = keyParam->value;
+            break;
+        case REGION:
+            localeItem->region = keyParam->value;
+            break;
+        default:
+            // unspported type
+            break;
+    }
+}
+
+static uint32_t FindOffsetByLangWithScriptOrRegion(char **resConfig, const Key *keys, uint32_t configNum)
+{
+    if (resConfig == NULL || keys == NULL) {
+        return INVALID_OFFSET;
+    }
+    uint32_t offset = INVALID_OFFSET;
+    uint32_t languageValue = GetValueFromLocale(resConfig[LANGUAGE_INDEX]);
+    uint32_t secondValue = GetValueFromLocale(resConfig[1]); // secondValue may be script or region
+    uint32_t len = strlen(resConfig[1]);
+    for (uint32_t i = 0; i < configNum; i++) {
+        LocaleItem locale = {0, 0, 0};
+        for (uint32_t j = 0; j < keys[i].keysCount; j++) {
+            SetLocaleItemViaKeys(&(keys[i].keyParams[j]), &locale);
+        }
+        if (len == SCRIPT_LENGTH) { // script length is fixed at 4
+            // if all matched, just return the offset
+            if (languageValue == locale.language && secondValue == locale.script) {
+                offset = keys[i].offset;
+                break;
+            }
+        } else {
+            // if all matched, just return the offset
+            if (languageValue == locale.language && secondValue == locale.region) {
+                offset = keys[i].offset;
+                break;
+            }
+        }
+        // if only language matched, use 1st found language
+        if (offset == INVALID_OFFSET && languageValue == locale.language) {
+            offset = keys[i].offset;
+        }
+    }
+    return offset;
+}
+
+static uint32_t FindOffsetByAllParam(char **resConfig, const Key *keys, uint32_t configNum)
+{
+    if (resConfig == NULL || keys == NULL) {
+        return INVALID_OFFSET;
+    }
+    uint32_t offset = INVALID_OFFSET;
+    uint32_t languageValue = GetValueFromLocale(resConfig[LANGUAGE_INDEX]);
+    uint32_t scriptValue = GetValueFromLocale(resConfig[SCRIPT_INDEX]);
+    uint32_t regionValue = GetValueFromLocale(resConfig[REGION_INDEX]);
+    uint32_t retOffsets[ALL_PARAM_LENGTH] = {0};
+    for (uint32_t i = 0; i < configNum; i++) {
+        LocaleItem locale = {0, 0, 0};
+        for (uint32_t j = 0; j < keys[i].keysCount; j++) {
+            SetLocaleItemViaKeys(&(keys[i].keyParams[j]), &locale);
+        }
+        // if all matched, save offset to retOffsets[0], the highest priority, and stop searching
+        if (retOffsets[0] == INVALID_OFFSET && languageValue == locale.language &&
+            scriptValue == locale.script && regionValue == locale.region) {
+            retOffsets[0] = keys[i].offset; // retOffsets[0] has the highest priority
+            break;
+        }
+        // if language and region matched, save 1st found offset to retOffsets[1]
+        if (retOffsets[1] == INVALID_OFFSET && languageValue == locale.language && regionValue == locale.region) {
+            retOffsets[1] = keys[i].offset; // retOffsets[1] has the second highest priority
+            continue;
+        }
+        // if language and script matched, save 1st found offset to retOffsets[2]
+        if (retOffsets[2] == INVALID_OFFSET && languageValue == locale.language && scriptValue == locale.script) {
+            retOffsets[2] = keys[i].offset; // retOffsets[2] has the third highest priority
+            continue;
+        }
+        // if only language matched, save 1st found offset to retOffsets[3], the lowest priority
+        if (retOffsets[3] == INVALID_OFFSET && languageValue == locale.language) {
+            retOffsets[3] = keys[i].offset; // retOffsets[3] has the lowest priority
+            continue;
+        }
+    }
+    // search the existed highest priority retOffsets[i]
+    for (uint32_t i = 0; i < ALL_PARAM_LENGTH; i++) {
+        if (retOffsets[i] != INVALID_OFFSET) {
+            offset = retOffsets[i];
+            break;
+        }
+    }
+    return offset;
+}
+
+static uint32_t GetIdHeaderOffsetByCount(char **resConfig, const Key *keys, uint32_t configNum, int32_t count)
+{
+    if (resConfig == NULL || keys == NULL) {
+        return INVALID_OFFSET;
+    }
+    uint32_t offset = INVALID_OFFSET;
+    switch (count) {
+        case 1: // locale has only 1 element which is language
+            offset = FindOffsetByLanguage(resConfig[0], keys, configNum);
+            break;
+        case 2: // locale has 2 element: language & script, or language & region
+            offset = FindOffsetByLangWithScriptOrRegion(resConfig, keys, configNum);
+            break;
+        case 3: // locale has all 3 element: language script, and region
+            offset = FindOffsetByAllParam(resConfig, keys, configNum);
+            break;
+        default:
+            break;
+    }
+    return offset;
+}
+
+static void FreeKeyParams(Key *keys, int32_t count)
+{
+    if (keys == NULL) {
+        return;
+    }
+    for (int32_t i = 0; i < count; i++) {
+        if (keys[i].keysCount != 0) {
+            free(keys[i].keyParams);
+            keys[i].keyParams = NULL;
+            keys[i].keysCount = 0;
+        }
+    }
+}
+
+static int32_t GetKeyParams(int32_t file, Key *keys, uint32_t resConfigNum)
+{
+    if (file < 0 || keys == NULL) {
+        return MC_FAILURE;
+    }
+    g_defaultIdHeaderOffset = INVALID_OFFSET;
+    for (uint32_t i = 0; i < resConfigNum; ++i) {
+        int seekRet = lseek(file, INDEX_DEFAULT_OFFSET, SEEK_CUR); // skip the "KEYS" header
+        if (seekRet < 0) {
+            FreeKeyParams(keys, i);
+            return MC_FAILURE;
+        }
+        keys[i].offset = GetDefaultOffsetValue(file);
+        keys[i].keysCount = GetDefaultOffsetValue(file);
+        if (keys[i].keysCount == 0) {
+            g_defaultIdHeaderOffset = keys[i].offset;
+            continue;
+        }
+        if (keys[i].keysCount > KEY_TYPE_MAX) {
+            FreeKeyParams(keys, i);
+            return MC_FAILURE;
+        }
+        keys[i].keyParams = (KeyParam *)malloc(sizeof(KeyParam) * keys[i].keysCount);
+        if (keys[i].keyParams == NULL) {
+            FreeKeyParams(keys, i);
+            return MC_FAILURE;
+        }
+        for (uint32_t j = 0; j < keys[i].keysCount; j++) {
+            keys[i].keyParams[j].type = (KeyType)GetDefaultOffsetValue(file);
+            keys[i].keyParams[j].value = GetKeyValue(file);
+        }
+    }
+    return MC_SUCCESS;
+}
+
+static int32_t CheckFilePath(const char *path, char *realResourcePath, int32_t length)
+{
+    if (length > PATH_MAX || length < 0) {
+        return MC_FAILURE;
+    }
+#if (defined(_WIN32) || defined(_WIN64))
+    if (!PathCanonicalizeA((char*)path, realResourcePath)) {
+        return MC_FAILURE;
+    }
+    return MC_SUCCESS;
+#elif defined(I18N_PRODUCT)
+    int ret = strcpy_s(realResourcePath, PATH_MAX, path);
+    if (ret != 0) {
+        return MC_FAILURE;
+    }
+    return MC_SUCCESS;
+#else
+    if (realpath(path, realResourcePath) == NULL) {
+        return MC_FAILURE;
+    }
+    return MC_SUCCESS;
+#endif
+}
+
+static uint32_t GetOffsetByLocale(const char *path, const char *locale, uint32_t length)
+{
+    if (path == NULL || strlen(path) == 0 || locale == NULL || length == 0) {
+        return INVALID_OFFSET;
+    }
+    char realResourcePath[PATH_MAX] = {0};
+    if (CheckFilePath(path, realResourcePath, PATH_MAX) == MC_FAILURE) {
+        return INVALID_OFFSET;
+    }
+    int32_t file = open(realResourcePath, O_RDONLY, S_IRUSR | S_IRGRP | S_IROTH);
+    if (file < 0) {
+        return INVALID_OFFSET;
+    }
+    int seekRet = lseek(file, RES_CONFIG_NUM_OFFSET, SEEK_SET); // goto resConfigNum index, now is fixed at 132
+    if (seekRet < 0) {
+        close(file);
+        return INVALID_OFFSET;
+    }
+    uint32_t resConfigNum = GetDefaultOffsetValue(file);
+    if (resConfigNum == 0 || resConfigNum > MAX_RES_CONFIG_NUM) {
+        close(file);
+        return INVALID_OFFSET;
+    }
+    int size = sizeof(Key) * resConfigNum;
+    Key *keys = (Key *)malloc(size);
+    if (keys == NULL) {
+        close(file);
+        return INVALID_OFFSET;
+    }
+    (void)memset_s(keys, size, 0, size);
+    int32_t ret = GetKeyParams(file, keys, resConfigNum);
+    if (ret != MC_SUCCESS) {
+        close(file);
+        free(keys);
+        return INVALID_OFFSET;
+    }
+    close(file);
+    uint32_t offset = GetIdHeaderOffsetByLocale(locale, keys, resConfigNum);
+    if (offset == INVALID_OFFSET) {
+        offset = g_defaultIdHeaderOffset;
+    }
+    FreeKeyParams(keys, resConfigNum);
+    free(keys);
+    return offset;
+}
+
+static uint32_t GetDefaultOffsetValue(int32_t file)
+{
+    if (file < 0) {
+        return 0;
+    }
+    uint8_t cache[INDEX_DEFAULT_OFFSET] = {0};
+    int32_t ret = read(file, cache, INDEX_DEFAULT_OFFSET);
+    if (ret != INDEX_DEFAULT_OFFSET) {
+        return 0;
+    }
+    return ConvertUint8ArrayToUint32(cache, INDEX_DEFAULT_OFFSET);
+}
+
+static uint32_t GetKeyValue(int32_t file)
+{
+    uint8_t cache[INDEX_DEFAULT_OFFSET] = {0};
+    int32_t ret = read(file, cache, INDEX_DEFAULT_OFFSET);
+    if (ret != INDEX_DEFAULT_OFFSET) {
+        return 0;
+    }
+    for (int32_t i = 0; i < INDEX_DEFAULT_OFFSET; i++) {
+        cache[i] = tolower(cache[i]); // Key value is case insensitive
+    }
+    return ConvertUint8ArrayToUint32(cache, INDEX_DEFAULT_OFFSET);
+}
+
+static int32_t GetIdItem(int32_t file, uint32_t offset, IdItem *idItem)
+{
+    if (offset == INVALID_OFFSET || file == -1 || idItem == NULL) {
+        return MC_FAILURE;
+    }
+    uint8_t defaultCache[INDEX_DEFAULT_OFFSET] = {0};
+    uint8_t lengthCache[VALUE_LENGTH_OFFSET] = {0};
+    int seekRet = lseek(file, offset, SEEK_SET);
+    if (seekRet < 0) {
+        return MC_FAILURE;
+    }
+    (void)read(file, defaultCache, INDEX_DEFAULT_OFFSET);
+    idItem->size = ConvertUint8ArrayToUint32(defaultCache, INDEX_DEFAULT_OFFSET);
+
+    (void)read(file, defaultCache, INDEX_DEFAULT_OFFSET);
+    idItem->resType = (ResType)ConvertUint8ArrayToUint32(defaultCache, INDEX_DEFAULT_OFFSET);
+
+    (void)read(file, defaultCache, INDEX_DEFAULT_OFFSET);
+    idItem->id = ConvertUint8ArrayToUint32(defaultCache, INDEX_DEFAULT_OFFSET);
+
+    (void)read(file, lengthCache, VALUE_LENGTH_OFFSET);
+    idItem->valueLen = (uint16_t)ConvertUint8ArrayToUint32(lengthCache, VALUE_LENGTH_OFFSET);
+    if (idItem->valueLen == 0 || idItem->valueLen > MAX_ITEM_LENGTH) {
+        return MC_FAILURE;
+    }
+
+    idItem->value = (char *)malloc(idItem->valueLen);
+    if (idItem->value == NULL) {
+        return MC_FAILURE;
+    }
+    (void)memset_s(idItem->value, idItem->valueLen, 0, idItem->valueLen);
+    (void)read(file, idItem->value, idItem->valueLen);
+
+    (void)read(file, lengthCache, VALUE_LENGTH_OFFSET);
+    idItem->nameLen = (uint16_t)ConvertUint8ArrayToUint32(lengthCache, VALUE_LENGTH_OFFSET);
+    if (idItem->nameLen == 0 || idItem->nameLen > MAX_ITEM_LENGTH) {
+        free(idItem->value);
+        idItem->value = NULL;
+        return MC_FAILURE;
+    }
+
+    idItem->name = (char *)malloc(idItem->nameLen);
+    if (idItem->name == NULL) {
+        free(idItem->value);
+        idItem->value = NULL;
+        return MC_FAILURE;
+    }
+    (void)memset_s(idItem->name, idItem->nameLen, 0, idItem->nameLen);
+    (void)read(file, idItem->name, idItem->nameLen);
+
+    return MC_SUCCESS;
+}
+
+static uint32_t GetIdHeaderOffsetByLocale(const char *locale, const Key *keys, uint32_t configNum)
+{
+    if (locale == NULL || keys == NULL) {
+        return INVALID_OFFSET;
+    }
+    char *resConfig[LOCALE_ELEMENT_NUM] = {0};
+    int32_t count = 0;
+    if (strchr(locale, '-') != NULL) {
+        (void)Split(locale, "-", resConfig, &count);
+    } else if (strchr(locale, '_') != NULL) {
+        (void)Split(locale, "_", resConfig, &count);
+    } else {
+        resConfig[0] = (char *)locale;
+    }
+    return GetIdHeaderOffsetByCount(resConfig, keys, configNum, count);
+}
+
+static int32_t GetIdHeaderByOffset(int32_t file, uint32_t offset, IdHeader *idHeader)
+{
+    if (file == -1 || offset == INVALID_OFFSET || idHeader == NULL) {
+        return MC_FAILURE;
+    }
+
+    (void)lseek(file, (int32_t)offset + INDEX_DEFAULT_OFFSET, SEEK_SET); // skip the "IDSS" header
+    idHeader->count = GetDefaultOffsetValue(file);
+    if (idHeader->count == 0 || idHeader->count > MAX_ID_ITEM_NUM) {
+        return MC_FAILURE;
+    }
+    idHeader->idParams = (IdParam *)malloc(sizeof(IdParam) * idHeader->count);
+    if (idHeader->idParams == NULL) {
+        return MC_FAILURE;
+    }
+    for (uint32_t i = 0; i < idHeader->count; i++) {
+        idHeader->idParams[i].id = GetDefaultOffsetValue(file);
+        idHeader->idParams[i].offset = GetDefaultOffsetValue(file);
+    }
+    return MC_SUCCESS;
+}
+
+GlobalUtilsImpl *GetGlobalUtilsImpl(void)
+{
+    return &g_globalUtilsImpl;
+}
diff --git a/base/global/resmgr_lite/interfaces/innerkits/include/global.h b/base/global/resmgr_lite/interfaces/innerkits/include/global.h
new file mode 100755
index 00000000..f171ae5a
--- /dev/null
+++ b/base/global/resmgr_lite/interfaces/innerkits/include/global.h
@@ -0,0 +1,117 @@
+/*
+ * Copyright (c) 2020-2021 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef OHOS_GLOBAL_H
+#define OHOS_GLOBAL_H
+
+#include <stdint.h>
+
+#ifdef __cplusplus
+#if __cplusplus
+extern "C" {
+#endif
+#endif // __cplusplus
+
+#define RES_CONFIG_NUM_OFFSET 132
+#define INDEX_DEFAULT_OFFSET  4
+#define VALUE_LENGTH_OFFSET   2
+#define OFFSET_VALUE_STEP     8
+#define SCRIPT_LENGTH         4
+#define ALL_PARAM_LENGTH      4
+#define INVALID_OFFSET        0
+#define MAX_LANGUAGE_LENGTH   4
+#define MAX_REGION_LENGTH     4
+
+typedef enum KeyType {
+    LANGUAGES   = 0,
+    REGION      = 1,
+    RESOLUTION  = 2,
+    ORIENTATION = 3,
+    DEVICETYPE  = 4,
+    SCRIPT      = 5,
+    KEY_TYPE_MAX
+} KeyType;
+
+typedef enum ResType {
+    VALUES    = 0,
+    ANIMATION = 1,
+    DRAWABLE  = 2,
+    LAYOUT    = 3,
+    MENU      = 4,
+    MIPMAP    = 5,
+    RAW       = 6,
+    XML       = 7,
+
+    INTEGER          = 8,
+    STRING           = 9,
+    STRINGARRAY      = 10,
+    INTARRAY         = 11,
+    BOOLEAN_         = 12,
+    DIMEN            = 13,
+    COLOR            = 14,
+    ID               = 15,
+    THEME            = 16,
+    PLURALS          = 17,
+    MY_FLOAT         = 18,
+    MEDIA            = 19,
+    PROF             = 20,
+    SVG              = 21,
+    INVALID_RES_TYPE = -1
+} ResType;
+
+typedef struct KeyParam {
+    KeyType type;
+    uint32_t value;
+} KeyParam;
+
+typedef struct Key {
+    uint32_t offset;
+    uint32_t keysCount;
+    KeyParam *keyParams;
+} Key;
+
+typedef struct IdParam {
+    uint32_t id;
+    uint32_t offset;
+} IdParam;
+
+typedef struct IdHeader {
+    uint32_t count;
+    IdParam *idParams;
+} IdHeader;
+
+typedef struct IdItem {
+    uint32_t size;
+    ResType resType;
+    uint32_t id;
+    uint16_t valueLen;
+    char *value;
+    uint16_t nameLen;
+    char *name;
+} IdItem;
+
+int32_t GLOBAL_GetValueById(uint32_t id, const char *path, char **value);
+int32_t GLOBAL_GetValueByName(const char *name, const char *path, char **value);
+void GLOBAL_ConfigLanguage(const char *appLanguage);
+int32_t GLOBAL_GetLanguage(char *language, uint8_t len);
+int32_t GLOBAL_GetRegion(char *region, uint8_t len);
+
+#ifdef __cplusplus
+#if __cplusplus
+}
+#endif
+#endif // __cplusplus
+
+#endif // OHOS_GLOBAL_H
diff --git a/base/hiviewdfx/hievent_lite/BUILD.gn b/base/hiviewdfx/hievent_lite/BUILD.gn
new file mode 100755
index 00000000..0baa9f98
--- /dev/null
+++ b/base/hiviewdfx/hievent_lite/BUILD.gn
@@ -0,0 +1,26 @@
+# Copyright (c) 2020 Huawei Device Co., Ltd.
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+static_library("hievent_lite") {
+    sources = [
+        "frameworks/hiview_event.c",
+        "frameworks/hiview_output_event.c",
+    ]
+    cflags = [ "-Wall" ]
+    include_dirs = [
+        "//base/hiviewdfx/hievent_lite/interfaces/native/innerkits",
+        "//base/hiviewdfx/hiview_lite",
+        "//foundation/distributedschedule/samgr_lite/interfaces/kits/samgr",
+    ]
+    deps = ["//base/hiviewdfx/hiview_lite"]
+}
diff --git a/base/hiviewdfx/hievent_lite/LICENSE b/base/hiviewdfx/hievent_lite/LICENSE
new file mode 100755
index 00000000..4947287f
--- /dev/null
+++ b/base/hiviewdfx/hievent_lite/LICENSE
@@ -0,0 +1,177 @@
+
+                                 Apache License
+                           Version 2.0, January 2004
+                        http://www.apache.org/licenses/
+
+   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
+
+   1. Definitions.
+
+      "License" shall mean the terms and conditions for use, reproduction,
+      and distribution as defined by Sections 1 through 9 of this document.
+
+      "Licensor" shall mean the copyright owner or entity authorized by
+      the copyright owner that is granting the License.
+
+      "Legal Entity" shall mean the union of the acting entity and all
+      other entities that control, are controlled by, or are under common
+      control with that entity. For the purposes of this definition,
+      "control" means (i) the power, direct or indirect, to cause the
+      direction or management of such entity, whether by contract or
+      otherwise, or (ii) ownership of fifty percent (50%) or more of the
+      outstanding shares, or (iii) beneficial ownership of such entity.
+
+      "You" (or "Your") shall mean an individual or Legal Entity
+      exercising permissions granted by this License.
+
+      "Source" form shall mean the preferred form for making modifications,
+      including but not limited to software source code, documentation
+      source, and configuration files.
+
+      "Object" form shall mean any form resulting from mechanical
+      transformation or translation of a Source form, including but
+      not limited to compiled object code, generated documentation,
+      and conversions to other media types.
+
+      "Work" shall mean the work of authorship, whether in Source or
+      Object form, made available under the License, as indicated by a
+      copyright notice that is included in or attached to the work
+      (an example is provided in the Appendix below).
+
+      "Derivative Works" shall mean any work, whether in Source or Object
+      form, that is based on (or derived from) the Work and for which the
+      editorial revisions, annotations, elaborations, or other modifications
+      represent, as a whole, an original work of authorship. For the purposes
+      of this License, Derivative Works shall not include works that remain
+      separable from, or merely link (or bind by name) to the interfaces of,
+      the Work and Derivative Works thereof.
+
+      "Contribution" shall mean any work of authorship, including
+      the original version of the Work and any modifications or additions
+      to that Work or Derivative Works thereof, that is intentionally
+      submitted to Licensor for inclusion in the Work by the copyright owner
+      or by an individual or Legal Entity authorized to submit on behalf of
+      the copyright owner. For the purposes of this definition, "submitted"
+      means any form of electronic, verbal, or written communication sent
+      to the Licensor or its representatives, including but not limited to
+      communication on electronic mailing lists, source code control systems,
+      and issue tracking systems that are managed by, or on behalf of, the
+      Licensor for the purpose of discussing and improving the Work, but
+      excluding communication that is conspicuously marked or otherwise
+      designated in writing by the copyright owner as "Not a Contribution."
+
+      "Contributor" shall mean Licensor and any individual or Legal Entity
+      on behalf of whom a Contribution has been received by Licensor and
+      subsequently incorporated within the Work.
+
+   2. Grant of Copyright License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      copyright license to reproduce, prepare Derivative Works of,
+      publicly display, publicly perform, sublicense, and distribute the
+      Work and such Derivative Works in Source or Object form.
+
+   3. Grant of Patent License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      (except as stated in this section) patent license to make, have made,
+      use, offer to sell, sell, import, and otherwise transfer the Work,
+      where such license applies only to those patent claims licensable
+      by such Contributor that are necessarily infringed by their
+      Contribution(s) alone or by combination of their Contribution(s)
+      with the Work to which such Contribution(s) was submitted. If You
+      institute patent litigation against any entity (including a
+      cross-claim or counterclaim in a lawsuit) alleging that the Work
+      or a Contribution incorporated within the Work constitutes direct
+      or contributory patent infringement, then any patent licenses
+      granted to You under this License for that Work shall terminate
+      as of the date such litigation is filed.
+
+   4. Redistribution. You may reproduce and distribute copies of the
+      Work or Derivative Works thereof in any medium, with or without
+      modifications, and in Source or Object form, provided that You
+      meet the following conditions:
+
+      (a) You must give any other recipients of the Work or
+          Derivative Works a copy of this License; and
+
+      (b) You must cause any modified files to carry prominent notices
+          stating that You changed the files; and
+
+      (c) You must retain, in the Source form of any Derivative Works
+          that You distribute, all copyright, patent, trademark, and
+          attribution notices from the Source form of the Work,
+          excluding those notices that do not pertain to any part of
+          the Derivative Works; and
+
+      (d) If the Work includes a "NOTICE" text file as part of its
+          distribution, then any Derivative Works that You distribute must
+          include a readable copy of the attribution notices contained
+          within such NOTICE file, excluding those notices that do not
+          pertain to any part of the Derivative Works, in at least one
+          of the following places: within a NOTICE text file distributed
+          as part of the Derivative Works; within the Source form or
+          documentation, if provided along with the Derivative Works; or,
+          within a display generated by the Derivative Works, if and
+          wherever such third-party notices normally appear. The contents
+          of the NOTICE file are for informational purposes only and
+          do not modify the License. You may add Your own attribution
+          notices within Derivative Works that You distribute, alongside
+          or as an addendum to the NOTICE text from the Work, provided
+          that such additional attribution notices cannot be construed
+          as modifying the License.
+
+      You may add Your own copyright statement to Your modifications and
+      may provide additional or different license terms and conditions
+      for use, reproduction, or distribution of Your modifications, or
+      for any such Derivative Works as a whole, provided Your use,
+      reproduction, and distribution of the Work otherwise complies with
+      the conditions stated in this License.
+
+   5. Submission of Contributions. Unless You explicitly state otherwise,
+      any Contribution intentionally submitted for inclusion in the Work
+      by You to the Licensor shall be under the terms and conditions of
+      this License, without any additional terms or conditions.
+      Notwithstanding the above, nothing herein shall supersede or modify
+      the terms of any separate license agreement you may have executed
+      with Licensor regarding such Contributions.
+
+   6. Trademarks. This License does not grant permission to use the trade
+      names, trademarks, service marks, or product names of the Licensor,
+      except as required for reasonable and customary use in describing the
+      origin of the Work and reproducing the content of the NOTICE file.
+
+   7. Disclaimer of Warranty. Unless required by applicable law or
+      agreed to in writing, Licensor provides the Work (and each
+      Contributor provides its Contributions) on an "AS IS" BASIS,
+      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
+      implied, including, without limitation, any warranties or conditions
+      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
+      PARTICULAR PURPOSE. You are solely responsible for determining the
+      appropriateness of using or redistributing the Work and assume any
+      risks associated with Your exercise of permissions under this License.
+
+   8. Limitation of Liability. In no event and under no legal theory,
+      whether in tort (including negligence), contract, or otherwise,
+      unless required by applicable law (such as deliberate and grossly
+      negligent acts) or agreed to in writing, shall any Contributor be
+      liable to You for damages, including any direct, indirect, special,
+      incidental, or consequential damages of any character arising as a
+      result of this License or out of the use or inability to use the
+      Work (including but not limited to damages for loss of goodwill,
+      work stoppage, computer failure or malfunction, or any and all
+      other commercial damages or losses), even if such Contributor
+      has been advised of the possibility of such damages.
+
+   9. Accepting Warranty or Additional Liability. While redistributing
+      the Work or Derivative Works thereof, You may choose to offer,
+      and charge a fee for, acceptance of support, warranty, indemnity,
+      or other liability obligations and/or rights consistent with this
+      License. However, in accepting such obligations, You may act only
+      on Your own behalf and on Your sole responsibility, not on behalf
+      of any other Contributor, and only if You agree to indemnify,
+      defend, and hold each Contributor harmless for any liability
+      incurred by, or claims asserted against, such Contributor by reason
+      of your accepting any such warranty or additional liability.
+
+   END OF TERMS AND CONDITIONS
\ No newline at end of file
diff --git a/base/hiviewdfx/hievent_lite/README.md b/base/hiviewdfx/hievent_lite/README.md
new file mode 100644
index 00000000..863b4842
--- /dev/null
+++ b/base/hiviewdfx/hievent_lite/README.md
@@ -0,0 +1,28 @@
+# hievent Module<a name="EN-US_TOPIC_0000001078674782"></a>
+
+-   [Overview](#section469617221261)
+-   [Architecture](#section15884114210197)
+-   [Repositories Involved](#section767551120815)
+
+## Overview<a name="section469617221261"></a>
+
+This module provides APIs for printing faults, user behavior, and power consumption statistics of service components. It also supports event serialization.
+
+## Architecture<a name="section15884114210197"></a>
+
+1.  An event is created.
+2.  Data is added for the event.
+3.  The event is reported.
+4.  The event component checks the parameter validity and performs binary serialization to convert the event into structured data.
+5.  The event component calls the output function to write the event into a file. Each time a new file is written, the common header information is added to it.
+6.  The upload component passively or proactively reports the event information to smartphones at a scheduled time.
+
+## Repositories Involved<a name="section767551120815"></a>
+
+[DFX subsystem](https://gitee.com/openharmony/docs/blob/master/en/readme/dfx.md)
+
+[hiviwdfx\_hilog\_lite](https://gitee.com/openharmony/hiviewdfx_hilog_lite/blob/master/README.md)
+
+[hiviwdfx\_hiview\_lite](https://gitee.com/openharmony/hiviewdfx_hiview_lite/blob/master/README.md)
+
+**hiviwdfx\_hievent\_lite**
diff --git a/base/hiviewdfx/hievent_lite/README_zh.md b/base/hiviewdfx/hievent_lite/README_zh.md
new file mode 100644
index 00000000..2b785a36
--- /dev/null
+++ b/base/hiviewdfx/hievent_lite/README_zh.md
@@ -0,0 +1,28 @@
+# 项目介绍<a name="ZH-CN_TOPIC_0000001078674782"></a>
+
+-   [简介](#section469617221261)
+-   [架构](#section15884114210197)
+-   [相关仓](#section767551120815)
+
+## 简介<a name="section469617221261"></a>
+
+为系统内业务组件提供故障、用户行为、功耗统计三类事件打点接口，支持对事件进行序列化。
+
+## 架构<a name="section15884114210197"></a>
+
+1.  事件打点时通过接口先创建一个事件；
+2.  通过接口向事件中添加数据；
+3.  添加完成后通过接口上报事件；
+4.  event组件检查参数有效性后，对事件进行二进制序列化处理将事件转换为结构化数据；
+5.  event调用输出接口将事件写入文件，每次新写文件时，先向事件文件中加入公共头信息；
+6.  事件信息上报至手机侧的处理由上传组件被动或主动定时完成；
+
+## 相关仓<a name="section767551120815"></a>
+
+[DFX子系统](https://gitee.com/openharmony/docs/blob/master/zh-cn/readme/DFX%E5%AD%90%E7%B3%BB%E7%BB%9F.md)
+
+[hiviwdfx\_hilog\_lite](https://gitee.com/openharmony/hiviewdfx_hilog_lite/blob/master/README_zh.md)
+
+[hiviwdfx\_hiview\_lite](https://gitee.com/openharmony/hiviewdfx_hiview_lite/blob/master/README_zh.md)
+
+**hiviwdfx\_hievent\_lite**
diff --git a/base/hiviewdfx/hievent_lite/command/BUILD.gn b/base/hiviewdfx/hievent_lite/command/BUILD.gn
new file mode 100755
index 00000000..711f5db8
--- /dev/null
+++ b/base/hiviewdfx/hievent_lite/command/BUILD.gn
@@ -0,0 +1,22 @@
+# Copyright (c) 2020 Huawei Device Co., Ltd.
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+static_library("hievent_lite_command") {
+    sources = [
+        "hievent_lite_command.c",
+    ]
+    cflags = [ "-Wall" ]
+    include_dirs = [
+        "//base/hiviewdfx/utils/lite",
+    ]
+}
diff --git a/base/hiviewdfx/hievent_lite/command/hievent_lite_command.c b/base/hiviewdfx/hievent_lite/command/hievent_lite_command.c
new file mode 100755
index 00000000..6d505c61
--- /dev/null
+++ b/base/hiviewdfx/hievent_lite/command/hievent_lite_command.c
@@ -0,0 +1,108 @@
+/*
+ * Copyright (c) 2020 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "hiview_command.h"
+
+#include <ctype.h>
+
+#include "securec.h"
+#include "ohos_types.h"
+#include "hiview_util.h"
+#include "hiview_config.h"
+#include "hiview_log.h"
+
+#define CMD_MIN_LEN     2
+#define CMD_MAX_LEN     32
+#define CMD_HIEVENT     "hievent"
+#define OPTION_TAG      '-'
+#define OPTION_SET      'c'
+#define OPTION_HELP     'h'
+#define STR_MAX_LEN     128
+
+static boolean CheckCmdStr(const char *cmd);
+static void HieventHelpProc(void);
+static void HieventSetProc(const char *cmd);
+
+/* Command does not contain the "hievent". */
+void HieventCmdProc(const char *cmd)
+{
+    if (cmd == NULL) {
+        return;
+    }
+
+    int32 len = strnlen(cmd, CMD_MAX_LEN + 1);
+    if ((len < CMD_MIN_LEN) || (len > CMD_MAX_LEN) || (CheckCmdStr(cmd) == FALSE)) {
+        HIVIEW_UartPrint("Invalid command.\n");
+        return;
+    }
+
+    if (*cmd != OPTION_TAG) {
+        HIVIEW_UartPrint("Invalid command.\n");
+        return;
+    }
+
+    switch (*(++cmd)) {
+        case OPTION_HELP:
+            HieventHelpProc();
+            return;
+        case OPTION_SET:
+            HieventSetProc(++cmd);
+            return;
+        default:
+            HIVIEW_UartPrint("Invalid command.\n");
+            return;
+    }
+}
+
+static void HieventHelpProc(void)
+{
+    HIVIEW_UartPrint("hievent [-h] [-c]\n");
+    HIVIEW_UartPrint(" -h            Help\n");
+    HIVIEW_UartPrint(" -c            Enable or disable event function\n");
+}
+
+static void HieventSetProc(const char *cmd)
+{
+    if (*cmd != '\0') {
+        HIVIEW_UartPrint("Invalid command.\n");
+        return;
+    }
+
+    if (g_hiviewConfig.eventSwitch == HIVIEW_FEATURE_ON) {
+        SwitchEvent(HIVIEW_FEATURE_OFF);
+        HIVIEW_UartPrint("Close event function success.\n");
+    } else {
+        SwitchEvent(HIVIEW_FEATURE_ON);
+        HIVIEW_UartPrint("Open event function success.\n");
+    }
+}
+
+static boolean CheckCmdStr(const char *cmd)
+{
+    while (*cmd != '\0') {
+        if (!(isalnum(*cmd) || (*cmd == ' ') || (*cmd == '\n')
+            || (*cmd == '=') || (*cmd == '-'))) {
+            return FALSE;
+        }
+        cmd++;
+    }
+    return TRUE;
+}
+
+void SwitchEvent(uint8 flag)
+{
+    (flag == HIVIEW_FEATURE_ON) ? (g_hiviewConfig.eventSwitch = HIVIEW_FEATURE_ON) :
+    (g_hiviewConfig.eventSwitch = HIVIEW_FEATURE_OFF);
+}
diff --git a/base/hiviewdfx/hievent_lite/command/hievent_lite_command.h b/base/hiviewdfx/hievent_lite/command/hievent_lite_command.h
new file mode 100755
index 00000000..63e2f50d
--- /dev/null
+++ b/base/hiviewdfx/hievent_lite/command/hievent_lite_command.h
@@ -0,0 +1,43 @@
+/*
+ * Copyright (c) 2020 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef HOS_LITE_HIEVENT_LITE_COMMAND_H
+#define HOS_LITE_HIEVENT_LITE_COMMAND_H
+
+#include "ohos_types.h"
+
+#ifdef __cplusplus
+#if __cplusplus
+extern "C" {
+#endif
+#endif /* End of #ifdef __cplusplus */
+
+void HieventCmdProc(const char *cmd);
+
+/**
+ * Enable or disable the event function.
+ * @param flag HIVIEW_FEATURE_ON/HIVIEW_FEATURE_OFF
+ **/
+void SwitchEvent(uint8 flag);
+
+boolean OpenLogOutputModule(uint8 mod);
+
+#ifdef __cplusplus
+#if __cplusplus
+}
+#endif
+#endif /* End of #ifdef __cplusplus */
+
+#endif /* End of #ifndef HOS_LITE_HIVIEW_COMMAND_H */
diff --git a/base/hiviewdfx/hievent_lite/frameworks/hiview_event.c b/base/hiviewdfx/hievent_lite/frameworks/hiview_event.c
new file mode 100755
index 00000000..c2114af1
--- /dev/null
+++ b/base/hiviewdfx/hievent_lite/frameworks/hiview_event.c
@@ -0,0 +1,174 @@
+/*
+ * Copyright (c) 2020 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "securec.h"
+#include "string.h"
+#include "ohos_types.h"
+#include "ohos_init.h"
+#include "hiview_def.h"
+#include "hiview_util.h"
+#include "hiview_service.h"
+#include "hiview_output_event.h"
+#include "hiview_config.h"
+#include "hiview_event.h"
+
+#define SINGLE_VALUE_MAX_LEN   5
+#define EVENT_VALUE_MAX_NUM    16
+#define ENCODE_VALUE_LEN1      1
+#define ENCODE_VALUE_LEN2      2
+#define ENCODE_VALUE_LEN3      3
+#define ENCODE_VALUE_LEN4      4
+#define GET_UINT32_BYTE1(v)    (uint8)((v) & 0x000000FF)
+#define GET_UINT32_BYTE2(v)    (uint8)(((v) & 0x0000FF00) >> 8)
+#define GET_UINT32_BYTE3(v)    (uint8)(((v) & 0x00FF0000) >> 16)
+#define GET_UINT32_BYTE4(v)    (uint8)(((v) & 0xFF000000) >> 24)
+
+static uint8 HiEventEncode(uint8 k, uint32 v, uint8 last, uint8 *encodeOut);
+
+static void HiEventInit(void)
+{
+    if (g_hiviewConfig.eventSwitch == HIVIEW_FEATURE_ON && HIEVENT_COMPILE_TYPE > HIEVENT_NONE) {
+        InitCoreEventOutput();
+        HiviewRegisterInitFunc(HIVIEW_CMP_TYPE_EVENT, InitEventOutput);
+        HIVIEW_UartPrint("hievent init success.");
+    }
+}
+CORE_INIT_PRI(HiEventInit, 1);
+
+void HiEventPrintf(uint8 type, uint16 eventId, int8 key, uint32 value)
+{
+    if (g_hiviewConfig.eventSwitch == HIVIEW_FEATURE_OFF) {
+        return;
+    }
+    HiEvent e = { 0 };
+    uint8 encodeBuffer[SINGLE_VALUE_MAX_LEN] = {0};
+    e.common.mark = EVENT_INFO_HEAD;
+    e.common.eventId = eventId;
+    e.common.time = (uint32)(HIVIEW_GetCurrentTime() / MS_PER_SECOND);
+    e.type = type;
+    if (key < 0) {
+        e.common.len = 0;
+        e.payload = NULL;
+    } else {
+        e.common.len = HiEventEncode((uint8)key, value, 1, encodeBuffer);
+        e.payload = encodeBuffer;
+    }
+
+    OutputEvent((uint8 *)&e);
+}
+
+HiEvent *HiEventCreate(uint8 type, uint16 eventId, uint8 num)
+{
+    if (g_hiviewConfig.eventSwitch == HIVIEW_FEATURE_OFF || num <= 1 || num > EVENT_VALUE_MAX_NUM) {
+        return NULL;
+    }
+    HiEvent *event = NULL;
+    event = (HiEvent *)HIVIEW_MemAlloc(MEM_POOL_HIVIEW_ID, sizeof(HiEvent));
+    if (event == NULL) {
+        return NULL;
+    }
+    event->payload = (uint8 *)HIVIEW_MemAlloc(MEM_POOL_HIVIEW_ID, SINGLE_VALUE_MAX_LEN * num);
+    if (event->payload == NULL) {
+        HIVIEW_MemFree(MEM_POOL_HIVIEW_ID, (void *)event);
+        return NULL;
+    }
+    // Number of values temporarily stored in mark.
+    event->common.mark = num;
+    event->common.eventId = eventId;
+    event->common.time = (uint32)(HIVIEW_GetCurrentTime() / MS_PER_SECOND);
+    event->common.len = 0;
+    event->type = type;
+
+    return event;
+}
+
+void HiEventPutInteger(HiEvent *event, int8 key, uint32 value)
+{
+    if (g_hiviewConfig.eventSwitch == HIVIEW_FEATURE_OFF || event == NULL || event->payload == NULL ||
+        key < 0 || event->common.mark == 0) {
+        return;
+    }
+
+    uint8 encodeLen;
+    if (event->common.mark <= 1) {
+        encodeLen = HiEventEncode((uint8)key, value, 1, event->payload + event->common.len);
+    } else {
+        encodeLen = HiEventEncode((uint8)key, value, 0, event->payload + event->common.len);
+    }
+    event->common.len += encodeLen;
+    event->common.mark -= 1;
+}
+
+void HiEventReport(HiEvent *event)
+{
+    if (g_hiviewConfig.eventSwitch == HIVIEW_FEATURE_OFF || event == NULL || event->payload == NULL) {
+        return;
+    }
+
+    // All data has been added.
+    if (event->common.mark == 0) {
+        event->common.mark = EVENT_INFO_HEAD;
+        OutputEvent((uint8 *)event);
+        HIVIEW_MemFree(MEM_POOL_HIVIEW_ID, event->payload);
+        HIVIEW_MemFree(MEM_POOL_HIVIEW_ID, (void *)event);
+    } else {
+        HIVIEW_MemFree(MEM_POOL_HIVIEW_ID, event->payload);
+        HIVIEW_MemFree(MEM_POOL_HIVIEW_ID, (void *)event);
+    }
+}
+
+static uint8 HiEventEncode(uint8 k, uint32 v, uint8 last, uint8 *encodeOut)
+{
+    HiEventTag tag;
+
+    if (encodeOut == NULL) {
+        return 0;
+    }
+    tag.last = last;
+    tag.id = k;
+    if (v <= 0xFF) {
+        tag.len = ENCODE_VALUE_LEN1;
+    } else if (v <= 0xFFFF) {
+        tag.len = ENCODE_VALUE_LEN2;
+    } else if (v <= 0x00FFFFFF) {
+        tag.len = ENCODE_VALUE_LEN3;
+    } else {
+        tag.len = ENCODE_VALUE_LEN4;
+    }
+    memcpy_s(encodeOut, sizeof(HiEventTag), (void *)&tag, sizeof(HiEventTag));
+
+    switch (tag.len) {
+        case ENCODE_VALUE_LEN1:
+            *(encodeOut + ENCODE_VALUE_LEN1) = GET_UINT32_BYTE1(v);
+            break;
+        case ENCODE_VALUE_LEN2:
+            *(encodeOut + ENCODE_VALUE_LEN1) = GET_UINT32_BYTE1(v);
+            *(encodeOut + ENCODE_VALUE_LEN2) = GET_UINT32_BYTE2(v);
+            break;
+        case ENCODE_VALUE_LEN3:
+            *(encodeOut + ENCODE_VALUE_LEN1) = GET_UINT32_BYTE1(v);
+            *(encodeOut + ENCODE_VALUE_LEN2) = GET_UINT32_BYTE2(v);
+            *(encodeOut + ENCODE_VALUE_LEN3) = GET_UINT32_BYTE3(v);
+            break;
+        default:
+            *(encodeOut + ENCODE_VALUE_LEN1) = GET_UINT32_BYTE1(v);
+            *(encodeOut + ENCODE_VALUE_LEN2) = GET_UINT32_BYTE2(v);
+            *(encodeOut + ENCODE_VALUE_LEN3) = GET_UINT32_BYTE3(v);
+            *(encodeOut + ENCODE_VALUE_LEN4) = GET_UINT32_BYTE4(v);
+            break;
+    }
+
+    return tag.len + 1;
+}
diff --git a/base/hiviewdfx/hievent_lite/frameworks/hiview_output_event.c b/base/hiviewdfx/hievent_lite/frameworks/hiview_output_event.c
new file mode 100755
index 00000000..d84de0dc
--- /dev/null
+++ b/base/hiviewdfx/hievent_lite/frameworks/hiview_output_event.c
@@ -0,0 +1,340 @@
+/*
+ * Copyright (c) 2020 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "securec.h"
+#include "ohos_types.h"
+#include "hiview_def.h"
+#include "hiview_util.h"
+#include "hiview_event.h"
+#include "hiview_cache.h"
+#include "hiview_config.h"
+#include "hiview_file.h"
+#include "hiview_service.h"
+#include "hiview_output_event.h"
+
+#define EVENT_PAYLOAD_MAX_SIZE   (5*16)
+
+static HiviewCache g_faultEventCache = {
+    .size = 0,
+    .buffer = NULL,
+};
+static HiviewCache g_ueEventCache = {
+    .size = 0,
+    .buffer = NULL,
+};
+static HiviewCache g_statEventCache = {
+    .size = 0,
+    .buffer = NULL,
+};
+static HiviewFile g_faultEventFile = {
+    .path = HIVIEW_FILE_PATH_FAULT_EVENT,
+    .fhandle = -1,
+};
+static HiviewFile g_ueEventFile = {
+    .path = HIVIEW_FILE_PATH_UE_EVENT,
+    .fhandle = -1,
+};
+static HiviewFile g_statEventFile = {
+    .path = HIVIEW_FILE_PATH_STAT_EVENT,
+    .fhandle = -1,
+};
+
+/* Output the event to UART using plaintext. */
+static void OutputEventRealtime(const Request *req);
+/* Output the event to FLASH using binary. */
+static void OutputEvent2Flash(const Request *req);
+static void InitFaultEventOutput(void);
+static void InitUeEventOutput(void);
+static void InitStatEventOutput(void);
+static void Output2Flash(uint8 eventType);
+static void CloseEventOutputFile(uint8 type);
+static void GetEventCache(uint8 type, HiviewCache **c, HiviewFile **f);
+
+void InitCoreEventOutput(void)
+{
+    HiviewRegisterMsgHandle(HIVIEW_MSG_OUTPUT_EVENT_BIN_FILE, OutputEvent2Flash);
+    HiviewRegisterMsgHandle(HIVIEW_MSG_OUTPUT_EVENT_FLOW, OutputEventRealtime);
+}
+
+void InitEventOutput(void)
+{
+    InitFaultEventOutput();
+    InitUeEventOutput();
+    InitStatEventOutput();
+}
+
+void ClearEventOutput(void)
+{
+    if (g_hiviewConfig.outputOption == OUTPUT_OPTION_BIN_FILE ||
+        g_hiviewConfig.outputOption == OUTPUT_OPTION_TEXT_FILE) {
+        CloseEventOutputFile(FAULT_EVENT_CACHE);
+        CloseEventOutputFile(UE_EVENT_CACHE);
+        CloseEventOutputFile(STAT_EVENT_CACHE);
+    }
+}
+
+static void InitFaultEventOutput(void)
+{
+    if (InitHiviewCache(&g_faultEventCache, FAULT_EVENT_CACHE, EVENT_CACHE_SIZE) == FALSE) {
+        printf("malloc[%d] fail.", FAULT_EVENT_CACHE);
+    }
+    if (g_hiviewConfig.outputOption == OUTPUT_OPTION_DEBUG ||
+        g_hiviewConfig.outputOption == OUTPUT_OPTION_FLOW) {
+        return;
+    }
+    if (InitHiviewFile(&g_faultEventFile, HIVIEW_FAULT_EVENT_FILE, FAULT_EVENT_FILE_SIZE) == FALSE) {
+        printf("Open file[%d] failed.", HIVIEW_FAULT_EVENT_FILE);
+    }
+}
+
+static void InitUeEventOutput(void)
+{
+    if (InitHiviewCache(&g_ueEventCache, UE_EVENT_CACHE, EVENT_CACHE_SIZE) == FALSE) {
+        printf("malloc[%d] fail.", UE_EVENT_CACHE);
+    }
+    if (g_hiviewConfig.outputOption == OUTPUT_OPTION_DEBUG ||
+        g_hiviewConfig.outputOption == OUTPUT_OPTION_FLOW) {
+        return;
+    }
+    if (InitHiviewFile(&g_ueEventFile, HIVIEW_UE_EVENT_FILE, UE_EVENT_FILE_SIZE) == FALSE) {
+        printf("Open file[%d] failed.", HIVIEW_UE_EVENT_FILE);
+    }
+}
+
+static void InitStatEventOutput(void)
+{
+    if (InitHiviewCache(&g_statEventCache, STAT_EVENT_CACHE, EVENT_CACHE_SIZE) == FALSE) {
+        printf("malloc[%d] fail.", STAT_EVENT_CACHE);
+    }
+    if (g_hiviewConfig.outputOption == OUTPUT_OPTION_DEBUG ||
+        g_hiviewConfig.outputOption == OUTPUT_OPTION_FLOW) {
+        return;
+    }
+    if (InitHiviewFile(&g_statEventFile, HIVIEW_STAT_EVENT_FILE, STAT_EVENT_FILE_SIZE) == FALSE) {
+        printf("Open file[%d] failed.", HIVIEW_STAT_EVENT_FILE);
+    }
+}
+
+static void CloseEventOutputFile(uint8 type)
+{
+    HiviewCache *c = NULL;
+    HiviewFile *f = NULL;
+    GetEventCache(type, &c, &f);
+    if (c != NULL && c->usedSize > 0) {
+        Output2Flash(type);
+    }
+    CloseHiviewFile(f);
+}
+
+void OutputEvent(const uint8 *data)
+{
+    if (data == NULL) {
+        return;
+    }
+
+    HiEvent *event = (HiEvent *)data;
+    HiviewCache *c = NULL;
+    HiviewFile *f = NULL;
+    GetEventCache(event->type, &c, &f);
+    if (WriteToCache(c, (uint8 *)&(event->common), sizeof(HiEventCommon)) == sizeof(HiEventCommon)) {
+        WriteToCache(c, event->payload, event->common.len);
+        if (c != NULL && c->usedSize >= HIVIEW_FILE_BUF_SIZE) {
+            switch (g_hiviewConfig.outputOption) {
+                /* Event do not support the text format */
+                case OUTPUT_OPTION_TEXT_FILE:
+                case OUTPUT_OPTION_BIN_FILE:
+                    HiviewSendMessage(HIVIEW_SERVICE, HIVIEW_MSG_OUTPUT_EVENT_BIN_FILE, event->type);
+                    break;
+                case OUTPUT_OPTION_FLOW:
+                    HiviewSendMessage(HIVIEW_SERVICE, HIVIEW_MSG_OUTPUT_EVENT_FLOW, event->type);
+                    break;
+                default:
+                    break;
+            }
+        }
+    }
+}
+
+static void OutputEventRealtime(const Request *req)
+{
+    HiviewCache *c = NULL;
+    HiviewFile *f = NULL;
+    uint16 payloadLen;
+    HiEvent event;
+    uint8 payload[EVENT_PAYLOAD_MAX_SIZE];
+    char tmpBuffer[LOG_FMT_MAX_LEN] = {0};
+
+    event.type = (uint8)req->msgValue;
+    GetEventCache(event.type, &c, &f);
+    while (ReadFromCache(c, (uint8 *)&(event.common), sizeof(HiEventCommon)) == sizeof(HiEventCommon)) {
+        if (event.common.mark != EVENT_INFO_HEAD) {
+            DiscardCacheData(c);
+            printf("Discard cache[%d] data.", c->type);
+            break;
+        }
+        payloadLen = event.common.len;
+        if (payloadLen > sizeof(payload)) {
+            payloadLen = sizeof(payload);
+        }
+        if (payloadLen > 0 && ReadFromCache(c, payload, payloadLen) != payloadLen) {
+            break;
+        }
+        if (payloadLen > 0) {
+            event.payload = payload;
+        } else {
+            event.payload = NULL;
+        }
+        EventContentFmt(tmpBuffer, LOG_FMT_MAX_LEN, (uint8 *)&event);
+        HIVIEW_UartPrint(tmpBuffer);
+    }
+}
+
+static void OutputEvent2Flash(const Request *req)
+{
+    Output2Flash((uint8)req->msgValue);
+}
+
+static void Output2Flash(uint8 eventType)
+{
+    HiviewCache *c = NULL;
+    HiviewFile *f = NULL;
+    uint8 *tmpBuffer = NULL;
+    HiEventCommon *pEventCommon = NULL;
+    uint16 len = 0;
+    uint16 payloadLen;
+    uint16 outputSize;
+
+    GetEventCache((uint8)eventType, &c, &f);
+    if (c == NULL) {
+        return;
+    }
+    outputSize = c->usedSize;
+    if (outputSize < sizeof(HiEventCommon)) {
+        return;
+    }
+    tmpBuffer = (uint8 *)HIVIEW_MemAlloc(MEM_POOL_HIVIEW_ID, outputSize);
+    if (tmpBuffer == NULL) {
+        return;
+    }
+    while (c->usedSize >= sizeof(HiEventCommon) && outputSize > (len + sizeof(HiEventCommon))) {
+        if (ReadFromCache(c, tmpBuffer + len, sizeof(HiEventCommon)) != sizeof(HiEventCommon)) {
+            continue;
+        }
+        pEventCommon = (HiEventCommon *)(tmpBuffer + len);
+        len += sizeof(HiEventCommon);
+        if (pEventCommon->mark != EVENT_INFO_HEAD) {
+            DiscardCacheData(c);
+            printf("Discard cache[%d] data.", c->type);
+            break;
+        }
+        payloadLen = pEventCommon->len;
+        if (payloadLen > 0) {
+            if (ReadFromCache(c, tmpBuffer + len, payloadLen) != payloadLen) {
+                continue;
+            }
+            len += payloadLen;
+        }
+    }
+    if (len > 0 && WriteToFile(f, tmpBuffer, len) != len) {
+        g_hiviewConfig.writeFailureCount++;
+        HIVIEW_UartPrint("Failed to write event data.");
+    }
+    HIVIEW_MemFree(MEM_POOL_HIVIEW_ID, tmpBuffer);
+}
+
+uint32 GetEventFileSize(uint8 eventType)
+{
+    HiviewCache *c = NULL;
+    HiviewFile *f = NULL;
+
+    GetEventCache(eventType, &c, &f);
+    return GetFileUsedSize(f);
+}
+
+uint32 ReadEventFile(uint8 eventType, uint8 *buf, uint32 len)
+{
+    HiviewCache *c = NULL;
+    HiviewFile *f = NULL;
+    uint32 usedSize;
+
+    if (buf == NULL) {
+        return 0;
+    }
+    GetEventCache(eventType, &c, &f);
+    usedSize = GetFileUsedSize(f);
+    if (usedSize < len) {
+        len = usedSize;
+    }
+    if (ReadFromFile(f, buf, len) != (int32)len) {
+        return 0;
+    }
+
+    return len;
+}
+
+int32 EventContentFmt(char *outStr, int32 outStrLen, const uint8 *pEvent)
+{
+    int32 len;
+    uint32 time, hour, mte, sec;
+    HiEvent *event = (HiEvent *)pEvent;
+
+    time = event->common.time;
+    hour = time % SECONDS_PER_DAY / SECONDS_PER_HOUR;
+    mte = time % SECONDS_PER_HOUR / SECONDS_PER_MINUTE;
+    sec = time % SECONDS_PER_MINUTE;
+    if (event->payload == NULL) {
+        len = snprintf_s(outStr, outStrLen, outStrLen - 1,
+            "EVENT: time=%02d:%02d:%02d id=%d type=%d data=null",
+            hour, mte, sec, event->common.eventId, event->type);
+    } else {
+        len = snprintf_s(outStr, outStrLen, outStrLen - 1,
+            "EVENT: time=%02d:%02d:%02d id=%d type=%d data=%p",
+            hour, mte, sec, event->common.eventId, event->type, event->payload);
+    }
+
+    if (len < 0) {
+        return -1;
+    }
+
+    if (len >= outStrLen - 1) {
+        outStr[outStrLen - TAIL_LINE_BREAK] = '\n';
+        outStr[outStrLen - 1] = '\0';
+    } else {
+        outStr[len++] = '\n';
+        outStr[len++] = '\0';
+    }
+
+    return len;
+}
+
+static void GetEventCache(uint8 type, HiviewCache **c, HiviewFile **f)
+{
+    switch (type) {
+        case HIEVENT_FAULT:
+            *c = &g_faultEventCache;
+            *f = &g_faultEventFile;
+            break;
+        case HIEVENT_UE:
+            *c = &g_ueEventCache;
+            *f = &g_ueEventFile;
+            break;
+        case HIEVENT_STAT:
+            *c = &g_statEventCache;
+            *f = &g_statEventFile;
+            break;
+        default:
+            break;
+    }
+}
diff --git a/base/hiviewdfx/hievent_lite/frameworks/hiview_output_event.h b/base/hiviewdfx/hievent_lite/frameworks/hiview_output_event.h
new file mode 100755
index 00000000..44e6e1ab
--- /dev/null
+++ b/base/hiviewdfx/hievent_lite/frameworks/hiview_output_event.h
@@ -0,0 +1,68 @@
+/*
+ * Copyright (c) 2020 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef HOS_LITE_HIVIEW_OUTPUT_EVENT_H
+#define HOS_LITE_HIVIEW_OUTPUT_EVENT_H
+
+#include "ohos_types.h"
+
+#ifdef __cplusplus
+#if __cplusplus
+extern "C" {
+#endif
+#endif /* End of #ifdef __cplusplus */
+
+void InitCoreEventOutput(void);
+void InitEventOutput(void);
+void ClearEventOutput(void);
+
+/**
+ * Output the event to file.
+ * @param data HiEvent data.
+ **/
+void OutputEvent(const uint8 *data);
+
+/**
+ * Get the event file size.
+ * @param eventType Event type: HIEVENT_FAULT/HIEVENT_UE/HIEVENT_STAT
+ * @retval File size.
+ **/
+uint32 GetEventFileSize(uint8 eventType);
+
+/**
+ * Read the event data form the event file.
+ * @param eventType Event type: HIEVENT_FAULT/HIEVENT_UE/HIEVENT_STAT
+ * @param buf Read buffer.
+ * @param len Read buffer size.
+ * @retval The length of read data.
+ **/
+uint32 ReadEventFile(uint8 eventType, uint8 *buf, uint32 len);
+
+/**
+ * Formatting event content.
+ * @param outStr Output string buffer.
+ * @param outStrLen Maximum length of the string buffer.
+ * @param pEvent Pointer to the HiEvent object.
+ * @retval The actual length of the formatted string.
+ **/
+int32 EventContentFmt(char *outStr, int32 outStrLen, const uint8 *pEvent);
+
+#ifdef __cplusplus
+#if __cplusplus
+}
+#endif
+#endif /* End of #ifdef __cplusplus */
+
+#endif /* End of #ifndef HOS_LITE_HIVIEW_OUTPUT_EVENT_H */
diff --git a/base/hiviewdfx/hievent_lite/interfaces/native/innerkits/event.h b/base/hiviewdfx/hievent_lite/interfaces/native/innerkits/event.h
new file mode 100755
index 00000000..5ea3f202
--- /dev/null
+++ b/base/hiviewdfx/hievent_lite/interfaces/native/innerkits/event.h
@@ -0,0 +1,21 @@
+/*
+ * Copyright (c) 2020 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef HOS_LITE_DFX_HIEVENT_H
+#define HOS_LITE_DFX_HIEVENT_H
+
+#include "hiview_event.h"
+
+#endif  /* End of #ifndef HOS_LITE_DFX_HIEVENT_H */
diff --git a/base/hiviewdfx/hievent_lite/interfaces/native/innerkits/hiview_event.h b/base/hiviewdfx/hievent_lite/interfaces/native/innerkits/hiview_event.h
new file mode 100755
index 00000000..6514402f
--- /dev/null
+++ b/base/hiviewdfx/hievent_lite/interfaces/native/innerkits/hiview_event.h
@@ -0,0 +1,149 @@
+/*
+ * Copyright (c) 2020 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef HOS_LITE_HIVIEW_EVENT_H
+#define HOS_LITE_HIVIEW_EVENT_H
+
+#include "ohos_types.h"
+
+#ifdef __cplusplus
+#if __cplusplus
+extern "C" {
+#endif
+#endif /* End of #ifdef __cplusplus */
+
+#ifndef HIEVENT_NONE
+#define HIEVENT_NONE   0   /* none event            */
+#endif
+#ifndef HIEVENT_FAULT
+#define HIEVENT_FAULT  1   /* fault event           */
+#endif
+#ifndef HIEVENT_UE
+#define HIEVENT_UE     2   /* user behavior event   */
+#endif
+#ifndef HIEVENT_STAT
+#define HIEVENT_STAT   4   /* statistics event      */
+#endif
+
+#pragma pack(1)
+typedef struct {
+    uint8  mark;
+    uint8  len;          /* payload length */
+    uint16 eventId;      /* 0-65535        */
+    uint32 time;
+} HiEventCommon;
+
+typedef struct {
+    HiEventCommon common;
+    uint8 type;          /* Do not write to file. */
+    uint8 *payload;      /* T-L-V */
+} HiEvent;
+#pragma pack()
+
+/**
+ * Create and output a event.
+ * Use the macro definition interface instead of directly using this interface.
+ * @param type    Event type.
+ * @param eventId Event ID. Event ID is assigned uniformly and globally unique.
+ * @param key     The id of the parameter in the XML definition. Valid data range: 0-15. -1 means no parameters.
+ * @param value   The Value of the parameter.
+ * @attention This event carry only one parameter.
+ **/
+void HiEventPrintf(uint8 type, uint16 eventId, int8 key, uint32 value);
+
+/**
+ * Create the HivewEvent object.
+ * Use the macro definition interface instead of directly using this interface.
+ * @param type    Event type.
+ * @param eventId Event ID. Event ID is assigned uniformly and globally unique.
+ * @param num     The number of values carried by the event. Valid data range: 2-16.
+ * @return HiEvent object.
+ * @attention This function is the atomic operation. This method cannot be used when no parameter
+              is carried or only one parameter is carried.
+ **/
+HiEvent *HiEventCreate(uint8 type, uint16 eventId, uint8 num);
+
+/**
+ * Add parameter's value to event object.
+ * Use the macro definition interface instead of directly using this interface.
+ * @param event Operation object.
+ * @param key   The id of the parameter in the XML definition. Valid data range: 0-15.
+ * @param value The Value of the parameter.
+ **/
+void HiEventPutInteger(HiEvent *event, int8 key, uint32 value);
+
+/**
+ * Ouput the event object and release memory.
+ * Use the macro definition interface instead of directly using this interface.
+ * @param event Operation object.
+ * @attention This function will automatically release the event object.
+ **/
+void HiEventReport(HiEvent *event);
+
+#ifndef HIEVENT_COMPILE_TYPE
+#define HIEVENT_COMPILE_TYPE (HIEVENT_FAULT | HIEVENT_UE | HIEVENT_STAT)
+#endif
+
+#define IS_COMPILE_EVENT(t) (((HIEVENT_COMPILE_TYPE) & (t)) == (t))
+
+/**
+ * If no parameter is carried or only one parameter is carried, use the following method.
+ * @param id  Event ID. Event ID is assigned uniformly and globally unique. The maximum value is 65535.
+ * @param k   Index of the parameter carried in the event. Valid data range: 0-15. If the value is -1,
+ *            the event does not carry any parameter.
+ * @param v   Value of the parameter carried in the event.
+**/
+#if IS_COMPILE_EVENT(HIEVENT_FAULT)
+#define HIEVENT_FAULT_REPORT(id, k, v) HiEventPrintf(HIEVENT_FAULT, (id), (k), (v))
+#else
+#define HIEVENT_FAULT_REPORT(id, k, v)
+#endif
+
+#if IS_COMPILE_EVENT(HIEVENT_UE)
+#define HIEVENT_UE_REPORT(id, k, v) HiEventPrintf(HIEVENT_UE, (id), (k), (v))
+#else
+#define HIEVENT_UE_REPORT(id, k, v)
+#endif
+
+#if IS_COMPILE_EVENT(HIEVENT_STAT)
+#define HIEVENT_STAT_REPORT(id, k, v) HiEventPrintf(HIEVENT_STAT, (id), (k), (v))
+#else
+#define HIEVENT_STAT_REPORT(id, k, v)
+#endif
+
+/**
+* If multiple parameters need to be carried, use the following method.
+* @param type  Event type.
+* @param id    Event id. Event ID is assigned uniformly and globally unique.
+* @param num   Number of parameters carried in an event. Valid data range: 2-16.
+* @attention   The following method cannot be used when no parameter is carried or only one parameter is carried.
+**/
+#if HIEVENT_COMPILE_TYPE > HIEVENT_NONE
+#define HIEVENT_CREATE(type, id, num) HiEventCreate(type, id, num)
+#define HIEVENT_PUT_INT_VALUE(pEvent, k, v) HiEventPutInteger(pEvent, k, v)
+#define HIEVENT_REPORT(pEvent) HiEventReport(pEvent)
+#else
+#define HIEVENT_CREATE(type, id, num)
+#define HIEVENT_PUT_INT_VALUE(pEvent, k, v)
+#define HIEVENT_REPORT(pEvent)
+#endif
+
+#ifdef __cplusplus
+#if __cplusplus
+}
+#endif
+#endif /* End of #ifdef __cplusplus */
+
+#endif /* End of #ifndef HOS_LITE_HIVIEW_EVENT_H */
diff --git a/base/hiviewdfx/hiview_lite/BUILD.gn b/base/hiviewdfx/hiview_lite/BUILD.gn
new file mode 100755
index 00000000..f867eb04
--- /dev/null
+++ b/base/hiviewdfx/hiview_lite/BUILD.gn
@@ -0,0 +1,29 @@
+# Copyright (c) 2020 Huawei Device Co., Ltd.
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+static_library("hiview_lite") {
+  sources = [
+    "hiview_service.c",
+    "hiview_cache.c",
+    "hiview_config.c",
+    "hiview_file.c",
+    "hiview_util.c",
+  ]
+  cflags = [ "-Wall" ]
+  include_dirs = [
+    "//base/hiviewdfx/hiview_lite",
+    "//kernel/liteos_m/kal",
+    "//foundation/distributedschedule/samgr_lite/interfaces/kits/samgr",
+  ]
+  deps = []
+}
diff --git a/base/hiviewdfx/hiview_lite/LICENSE b/base/hiviewdfx/hiview_lite/LICENSE
new file mode 100755
index 00000000..4947287f
--- /dev/null
+++ b/base/hiviewdfx/hiview_lite/LICENSE
@@ -0,0 +1,177 @@
+
+                                 Apache License
+                           Version 2.0, January 2004
+                        http://www.apache.org/licenses/
+
+   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
+
+   1. Definitions.
+
+      "License" shall mean the terms and conditions for use, reproduction,
+      and distribution as defined by Sections 1 through 9 of this document.
+
+      "Licensor" shall mean the copyright owner or entity authorized by
+      the copyright owner that is granting the License.
+
+      "Legal Entity" shall mean the union of the acting entity and all
+      other entities that control, are controlled by, or are under common
+      control with that entity. For the purposes of this definition,
+      "control" means (i) the power, direct or indirect, to cause the
+      direction or management of such entity, whether by contract or
+      otherwise, or (ii) ownership of fifty percent (50%) or more of the
+      outstanding shares, or (iii) beneficial ownership of such entity.
+
+      "You" (or "Your") shall mean an individual or Legal Entity
+      exercising permissions granted by this License.
+
+      "Source" form shall mean the preferred form for making modifications,
+      including but not limited to software source code, documentation
+      source, and configuration files.
+
+      "Object" form shall mean any form resulting from mechanical
+      transformation or translation of a Source form, including but
+      not limited to compiled object code, generated documentation,
+      and conversions to other media types.
+
+      "Work" shall mean the work of authorship, whether in Source or
+      Object form, made available under the License, as indicated by a
+      copyright notice that is included in or attached to the work
+      (an example is provided in the Appendix below).
+
+      "Derivative Works" shall mean any work, whether in Source or Object
+      form, that is based on (or derived from) the Work and for which the
+      editorial revisions, annotations, elaborations, or other modifications
+      represent, as a whole, an original work of authorship. For the purposes
+      of this License, Derivative Works shall not include works that remain
+      separable from, or merely link (or bind by name) to the interfaces of,
+      the Work and Derivative Works thereof.
+
+      "Contribution" shall mean any work of authorship, including
+      the original version of the Work and any modifications or additions
+      to that Work or Derivative Works thereof, that is intentionally
+      submitted to Licensor for inclusion in the Work by the copyright owner
+      or by an individual or Legal Entity authorized to submit on behalf of
+      the copyright owner. For the purposes of this definition, "submitted"
+      means any form of electronic, verbal, or written communication sent
+      to the Licensor or its representatives, including but not limited to
+      communication on electronic mailing lists, source code control systems,
+      and issue tracking systems that are managed by, or on behalf of, the
+      Licensor for the purpose of discussing and improving the Work, but
+      excluding communication that is conspicuously marked or otherwise
+      designated in writing by the copyright owner as "Not a Contribution."
+
+      "Contributor" shall mean Licensor and any individual or Legal Entity
+      on behalf of whom a Contribution has been received by Licensor and
+      subsequently incorporated within the Work.
+
+   2. Grant of Copyright License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      copyright license to reproduce, prepare Derivative Works of,
+      publicly display, publicly perform, sublicense, and distribute the
+      Work and such Derivative Works in Source or Object form.
+
+   3. Grant of Patent License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      (except as stated in this section) patent license to make, have made,
+      use, offer to sell, sell, import, and otherwise transfer the Work,
+      where such license applies only to those patent claims licensable
+      by such Contributor that are necessarily infringed by their
+      Contribution(s) alone or by combination of their Contribution(s)
+      with the Work to which such Contribution(s) was submitted. If You
+      institute patent litigation against any entity (including a
+      cross-claim or counterclaim in a lawsuit) alleging that the Work
+      or a Contribution incorporated within the Work constitutes direct
+      or contributory patent infringement, then any patent licenses
+      granted to You under this License for that Work shall terminate
+      as of the date such litigation is filed.
+
+   4. Redistribution. You may reproduce and distribute copies of the
+      Work or Derivative Works thereof in any medium, with or without
+      modifications, and in Source or Object form, provided that You
+      meet the following conditions:
+
+      (a) You must give any other recipients of the Work or
+          Derivative Works a copy of this License; and
+
+      (b) You must cause any modified files to carry prominent notices
+          stating that You changed the files; and
+
+      (c) You must retain, in the Source form of any Derivative Works
+          that You distribute, all copyright, patent, trademark, and
+          attribution notices from the Source form of the Work,
+          excluding those notices that do not pertain to any part of
+          the Derivative Works; and
+
+      (d) If the Work includes a "NOTICE" text file as part of its
+          distribution, then any Derivative Works that You distribute must
+          include a readable copy of the attribution notices contained
+          within such NOTICE file, excluding those notices that do not
+          pertain to any part of the Derivative Works, in at least one
+          of the following places: within a NOTICE text file distributed
+          as part of the Derivative Works; within the Source form or
+          documentation, if provided along with the Derivative Works; or,
+          within a display generated by the Derivative Works, if and
+          wherever such third-party notices normally appear. The contents
+          of the NOTICE file are for informational purposes only and
+          do not modify the License. You may add Your own attribution
+          notices within Derivative Works that You distribute, alongside
+          or as an addendum to the NOTICE text from the Work, provided
+          that such additional attribution notices cannot be construed
+          as modifying the License.
+
+      You may add Your own copyright statement to Your modifications and
+      may provide additional or different license terms and conditions
+      for use, reproduction, or distribution of Your modifications, or
+      for any such Derivative Works as a whole, provided Your use,
+      reproduction, and distribution of the Work otherwise complies with
+      the conditions stated in this License.
+
+   5. Submission of Contributions. Unless You explicitly state otherwise,
+      any Contribution intentionally submitted for inclusion in the Work
+      by You to the Licensor shall be under the terms and conditions of
+      this License, without any additional terms or conditions.
+      Notwithstanding the above, nothing herein shall supersede or modify
+      the terms of any separate license agreement you may have executed
+      with Licensor regarding such Contributions.
+
+   6. Trademarks. This License does not grant permission to use the trade
+      names, trademarks, service marks, or product names of the Licensor,
+      except as required for reasonable and customary use in describing the
+      origin of the Work and reproducing the content of the NOTICE file.
+
+   7. Disclaimer of Warranty. Unless required by applicable law or
+      agreed to in writing, Licensor provides the Work (and each
+      Contributor provides its Contributions) on an "AS IS" BASIS,
+      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
+      implied, including, without limitation, any warranties or conditions
+      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
+      PARTICULAR PURPOSE. You are solely responsible for determining the
+      appropriateness of using or redistributing the Work and assume any
+      risks associated with Your exercise of permissions under this License.
+
+   8. Limitation of Liability. In no event and under no legal theory,
+      whether in tort (including negligence), contract, or otherwise,
+      unless required by applicable law (such as deliberate and grossly
+      negligent acts) or agreed to in writing, shall any Contributor be
+      liable to You for damages, including any direct, indirect, special,
+      incidental, or consequential damages of any character arising as a
+      result of this License or out of the use or inability to use the
+      Work (including but not limited to damages for loss of goodwill,
+      work stoppage, computer failure or malfunction, or any and all
+      other commercial damages or losses), even if such Contributor
+      has been advised of the possibility of such damages.
+
+   9. Accepting Warranty or Additional Liability. While redistributing
+      the Work or Derivative Works thereof, You may choose to offer,
+      and charge a fee for, acceptance of support, warranty, indemnity,
+      or other liability obligations and/or rights consistent with this
+      License. However, in accepting such obligations, You may act only
+      on Your own behalf and on Your sole responsibility, not on behalf
+      of any other Contributor, and only if You agree to indemnify,
+      defend, and hold each Contributor harmless for any liability
+      incurred by, or claims asserted against, such Contributor by reason
+      of your accepting any such warranty or additional liability.
+
+   END OF TERMS AND CONDITIONS
\ No newline at end of file
diff --git a/base/hiviewdfx/hiview_lite/README.md b/base/hiviewdfx/hiview_lite/README.md
new file mode 100644
index 00000000..4610e3af
--- /dev/null
+++ b/base/hiviewdfx/hiview_lite/README.md
@@ -0,0 +1,37 @@
+# hiview Module<a name="EN-US_TOPIC_0000001079122822"></a>
+
+-   [Overview](#section469617221261)
+-   [Architecture](#section15884114210197)
+-   [Repositories Involved](#section767551120815)
+
+## Overview<a name="section469617221261"></a>
+
+The hiview module provides the initialization of the DFX subsystem and controls the startup of each component as required.
+
+## Architecture<a name="section15884114210197"></a>
+
+The DFX initialization consists of two phases: DEVICE\_INIT and CORE\_INIT.
+
+DEVICE\_INIT:
+
+1. The config component and core configuration parameters \(enabling or disabling the dump or event function\) of the DFX subsystem are initialized.
+
+2. The log component is initialized, without involving the dynamic memory allocation and file operation capabilities.
+
+3. The status information about the current DFX subsystem is written into the config component.
+
+CORE\_INIT:
+
+1. The log, dump, event, and output components are initialized as required based on the parameters of the config component.
+
+2. Memory management and file system operations are started normally. Memory can be requested and files can be created as required.
+
+## Repositories Involved<a name="section767551120815"></a>
+
+[DFX subsystem](https://gitee.com/openharmony/docs/blob/master/en/readme/dfx.md)
+
+[hiviwdfx\_hilog\_lite](https://gitee.com/openharmony/hiviewdfx_hilog_lite/blob/master/README.md)
+
+**hiviwdfx\_hiview\_lite**
+
+[hiviwdfx\_hievent\_lite](https://gitee.com/openharmony/hiviewdfx_hievent_lite/blob/master/README.md)
\ No newline at end of file
diff --git a/base/hiviewdfx/hiview_lite/README_zh.md b/base/hiviewdfx/hiview_lite/README_zh.md
new file mode 100644
index 00000000..ce309382
--- /dev/null
+++ b/base/hiviewdfx/hiview_lite/README_zh.md
@@ -0,0 +1,40 @@
+# Hiview介绍<a name="ZH-CN_TOPIC_0000001079122822"></a>
+
+-   [简介](#section469617221261)
+-   [架构](#section15884114210197)
+-   [相关仓](#section767551120815)
+
+## 简介<a name="section469617221261"></a>
+
+提供DFX子系统整体的初始化功能，控制各组件按需启动
+
+## 架构<a name="section15884114210197"></a>
+
+DFX子系统初始化分为两个阶段：DEVICE\_INIT、CORE\_INIT。
+
+DEVICE\_INIT阶段：
+
+1\)   初始化config模块，初始化DFX子系统核心配置参数（配置开启关闭dump\\event功能）。
+
+2\)   初始化log组件，不能涉及内存动态分配、文件操作能力。
+
+3\)   记录当前DFX子系统的状态信息到config中。
+
+CORE\_INIT阶段：
+
+1\)   根据config的参数，按需初始化log、dump、event及对应的output组件。
+
+2\)   该阶段内存管理、文件系统已经正常启动，可按需申请内存并创建文件。
+
+-   [相关仓](#section767551120815)
+
+
+## 相关仓<a name="section767551120815"></a>
+
+[DFX子系统](https://gitee.com/openharmony/docs/blob/master/zh-cn/readme/DFX%E5%AD%90%E7%B3%BB%E7%BB%9F.md)
+
+[hiviwdfx\_hilog\_lite](https://gitee.com/openharmony/hiviewdfx_hilog_lite/blob/master/README_zh.md)
+
+**hiviwdfx\_hiview\_lite**
+
+[hiviwdfx\_hievent\_lite](https://gitee.com/openharmony/hiviewdfx_hievent_lite/blob/master/README_zh.md)
diff --git a/base/hiviewdfx/hiview_lite/hiview_cache.c b/base/hiviewdfx/hiview_lite/hiview_cache.c
new file mode 100755
index 00000000..ed2736c1
--- /dev/null
+++ b/base/hiviewdfx/hiview_lite/hiview_cache.c
@@ -0,0 +1,223 @@
+/*
+ * Copyright (c) 2020 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "securec.h"
+#include "ohos_types.h"
+#include "hiview_cache.h"
+#include "hiview_util.h"
+
+static uint16 GetReadCursor(HiviewCache *cache);
+
+boolean InitHiviewStaticCache(HiviewCache *cache, HiviewCacheType type, uint8 *buffer, uint16 size)
+{
+    if (cache == NULL) {
+        return FALSE;
+    }
+
+    cache->mutex = HIVIEW_MutexInit();
+    cache->usedSize = 0;
+    cache->wCursor = 0;
+    cache->buffer = buffer;
+    cache->size = size;
+    cache->type = type;
+
+    return TRUE;
+}
+
+boolean InitHiviewCache(HiviewCache *cache, HiviewCacheType type, uint16 size)
+{
+    if (cache == NULL) {
+        return FALSE;
+    }
+
+    uint8 *buffer = (uint8 *)HIVIEW_MemAlloc(MEM_POOL_HIVIEW_ID, size);
+    if (buffer == NULL) {
+        return FALSE;
+    }
+
+    cache->mutex = HIVIEW_MutexInit();
+    cache->usedSize = 0;
+    cache->wCursor = 0;
+    cache->buffer = buffer;
+    cache->size = size;
+    cache->type = type;
+
+    return TRUE;
+}
+
+int32 WriteToCache(HiviewCache *cache, const uint8 *data, uint16 wLen)
+{
+    if (cache == NULL || data == NULL || cache->buffer == NULL) {
+        return -1;
+    }
+
+    uint16 firstLen;
+    uint16 secondLen;
+    HIVIEW_MutexLock(cache->mutex);
+    if ((cache->size - cache->usedSize) < wLen) {
+        HIVIEW_MutexUnlock(cache->mutex);
+        return -1;
+    }
+    // overflow
+    if (cache->wCursor + wLen > cache->size) {
+        firstLen = cache->size - cache->wCursor;
+        if (firstLen > 0) {
+            if (memcpy_s(cache->buffer + cache->wCursor, firstLen, data, firstLen) == EOK) {
+                cache->wCursor += firstLen;
+                cache->usedSize += firstLen;
+            } else {
+                HIVIEW_MutexUnlock(cache->mutex);
+                return -1;
+            }
+        }
+        cache->wCursor = 0;
+        secondLen = wLen - firstLen;
+        if (secondLen > 0) {
+            if (memcpy_s(cache->buffer + cache->wCursor, secondLen, data + firstLen, secondLen) == EOK) {
+                cache->wCursor += secondLen;
+                cache->usedSize += secondLen;
+            } else {
+                HIVIEW_MutexUnlock(cache->mutex);
+                return firstLen;
+            }
+        }
+    } else {
+        if (memcpy_s(cache->buffer + cache->wCursor, wLen, data, wLen) == EOK) {
+            cache->wCursor += wLen;
+            cache->usedSize += wLen;
+        } else {
+            HIVIEW_MutexUnlock(cache->mutex);
+            return -1;
+        }
+    }
+    HIVIEW_MutexUnlock(cache->mutex);
+
+    return wLen;
+}
+
+int32 ReadFromCache(HiviewCache *cache, uint8 *data, uint16 rLen)
+{
+    if (cache == NULL || data == NULL || cache->buffer == NULL) {
+        return -1;
+    }
+
+    uint16 firstLen;
+    uint16 secondLen;
+    uint16 rCursor;
+    // This function is the only read operation, so there is no need to lock
+    if (cache->usedSize < rLen) {
+        return -1;
+    }
+    rCursor = GetReadCursor(cache);
+    // overflow
+    if (rCursor + rLen > cache->size) {
+        firstLen = cache->size - rCursor;
+        if (firstLen > 0) {
+            if (memcpy_s(data, firstLen, cache->buffer + rCursor, firstLen) != EOK) {
+                return -1;
+            }
+        }
+        secondLen = rLen - firstLen;
+        if (secondLen > 0) {
+            if (memcpy_s(data + firstLen, secondLen, cache->buffer, secondLen) != EOK) {
+                return firstLen;
+            }
+        }
+    } else {
+        if (memcpy_s(data, rLen, cache->buffer + rCursor, rLen) != EOK) {
+            return -1;
+        }
+    }
+    HIVIEW_MutexLock(cache->mutex);
+    cache->usedSize -= rLen;
+    HIVIEW_MutexUnlock(cache->mutex);
+
+    return rLen;
+}
+
+int32 PrereadFromCache(HiviewCache *cache, uint8 *data, uint16 rLen)
+{
+    if (cache == NULL || data == NULL || cache->buffer == NULL) {
+        return -1;
+    }
+    if (cache->usedSize < rLen) {
+        return -1;
+    }
+
+    uint16 firstLen;
+    uint16 secondLen;
+    uint16 rCursor = GetReadCursor(cache);
+    // overflow
+    if (rCursor + rLen > cache->size) {
+        firstLen = cache->size - rCursor;
+        if (firstLen > 0) {
+            if (memcpy_s(data, firstLen, cache->buffer + rCursor, firstLen) != EOK) {
+                return -1;
+            }
+        }
+        secondLen = rLen - firstLen;
+        if (secondLen > 0) {
+            if (memcpy_s(data + firstLen, secondLen, cache->buffer, secondLen) != EOK) {
+                return firstLen;
+            }
+        }
+    } else {
+        if (memcpy_s(data, rLen, cache->buffer + rCursor, rLen) != EOK) {
+            return -1;
+        }
+    }
+
+    return rLen;
+}
+
+void DiscardCacheData(HiviewCache *cache)
+{
+    if (cache == NULL) {
+        return;
+    }
+    cache->wCursor = 0;
+    cache->usedSize = 0;
+}
+
+void DestroyCache(HiviewCache *cache)
+{
+    if (cache == NULL) {
+        return;
+    }
+    if (cache->buffer != NULL) {
+        HIVIEW_MemFree(MEM_POOL_HIVIEW_ID, cache->buffer);
+        cache->buffer = NULL;
+    }
+    cache->wCursor = 0;
+    cache->usedSize = 0;
+    cache->size = 0;
+}
+
+static uint16 GetReadCursor(HiviewCache *cache)
+{
+    if (cache == NULL || cache->buffer == NULL) {
+        return 0;
+    }
+
+    uint16 readCursor;
+    HIVIEW_MutexLock(cache->mutex);
+    if (cache->wCursor >= cache->usedSize) {
+        readCursor = cache->wCursor - cache->usedSize;
+    } else {
+        readCursor = cache->size - (cache->usedSize - cache->wCursor);
+    }
+    HIVIEW_MutexUnlock(cache->mutex);
+    return readCursor;
+}
diff --git a/base/hiviewdfx/hiview_lite/hiview_cache.h b/base/hiviewdfx/hiview_lite/hiview_cache.h
new file mode 100755
index 00000000..25ee312a
--- /dev/null
+++ b/base/hiviewdfx/hiview_lite/hiview_cache.h
@@ -0,0 +1,116 @@
+/*
+ * Copyright (c) 2020 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef HOS_LITE_HIVIEW_CACHE_H
+#define HOS_LITE_HIVIEW_CACHE_H
+
+#include "ohos_types.h"
+#include "hiview_util.h"
+
+#ifdef __cplusplus
+#if __cplusplus
+extern "C" {
+#endif
+#endif /* End of #ifdef __cplusplus */
+
+typedef enum {
+    CORE_CACHE = 0,
+    LOG_CACHE,
+    JS_LOG_CACHE,
+    DUMP_CACHE,
+    FAULT_EVENT_CACHE,
+    UE_EVENT_CACHE,
+    STAT_EVENT_CACHE,
+} HiviewCacheType;
+
+#pragma pack(1)
+typedef struct {
+    HiviewMutexId_t mutex;
+    uint16 wCursor;    // 0-65535
+    uint16 usedSize;   // 0-65535
+    uint16 size;       // cache size 0-65535
+    HiviewCacheType type;
+    uint8 *buffer;     // Circular buffer
+} HiviewCache;
+#pragma pack()
+
+/**
+ * Initialize the cache object using static memory.
+ * @param cache Operation object.
+ * @param type cache type.
+ * @param buffer External static memory.
+ * @param size Static memory size.
+ * @return TRUE/FALSE.
+ **/
+boolean InitHiviewStaticCache(HiviewCache *cache, HiviewCacheType type, uint8 *buffer, uint16 size);
+
+/**
+ * Initialize the cache object.
+ * @param cache Operation object.
+ * @param type cache type.
+ * @param size cache size.
+ * @return TRUE/FALSE.
+ **/
+boolean InitHiviewCache(HiviewCache *cache, HiviewCacheType type, uint16 size);
+
+/**
+ * Write data to cache.
+ * @param cache Operation object.
+ * @param data Data to be written to the cache.
+ * @param wLen The length of the data to be written.
+ * @return Length write.
+ **/
+int32 WriteToCache(HiviewCache *cache, const uint8 *data, uint16 wLen);
+
+/**
+ * Read data form cache.
+ * @param cache Operation object.
+ * @param data Read buffer.
+ * @param rLen The length of the data to be read.
+ * @return Length read.
+ **/
+int32 ReadFromCache(HiviewCache *cache, uint8 *data, uint16 rLen);
+
+/**
+ * Preread data form cache.
+ * Use this method when you don't want to modify the read status of the cache.
+ * @param cache Operation object.
+ * @param data Read buffer.
+ * @param rLen The length of the data to be read.
+ * @return Length read.
+ * @attention The value of rCursor will not be changed.
+ **/
+int32 PrereadFromCache(HiviewCache *cache, uint8 *data, uint16 rLen);
+
+/**
+ * Discard all cache data.
+ * Use this method when an unrecoverable data exception is detected.
+ * @param cache Operation object.
+ **/
+void DiscardCacheData(HiviewCache *cache);
+
+/**
+ * Destroy the cache and release the memory.
+ * @param cache Operation object.
+ **/
+void DestroyCache(HiviewCache *cache);
+
+#ifdef __cplusplus
+#if __cplusplus
+}
+#endif
+#endif /* End of #ifdef __cplusplus */
+
+#endif /* End of #ifndef HOS_LITE_HIVIEW_CACHE_H */
diff --git a/base/hiviewdfx/hiview_lite/hiview_config.c b/base/hiviewdfx/hiview_lite/hiview_config.c
new file mode 100755
index 00000000..5e4cd804
--- /dev/null
+++ b/base/hiviewdfx/hiview_lite/hiview_config.c
@@ -0,0 +1,34 @@
+/*
+ * Copyright (c) 2020 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "ohos_types.h"
+#include "ohos_init.h"
+#include "hiview_config.h"
+
+HiviewConfig g_hiviewConfig = {
+    .outputOption = OUTPUT_OPTION_FLOW,
+    .level = 1,    /* Control log output level. HILOG_LV_XXX, default is HILOG_LV_DEBUG */
+    .logSwitch = HIVIEW_FEATURE_ON,
+    .dumpSwitch = HIVIEW_FEATURE_OFF,
+    .eventSwitch = HIVIEW_FEATURE_OFF,
+};
+
+static void HiviewConfigInit(void)
+{
+    g_hiviewConfig.hiviewInited = FALSE;
+    g_hiviewConfig.logOutputModule = UINT64_MAX;
+    g_hiviewConfig.writeFailureCount = 0;
+}
+CORE_INIT_PRI(HiviewConfigInit, 0);
diff --git a/base/hiviewdfx/hiview_lite/hiview_config.h b/base/hiviewdfx/hiview_lite/hiview_config.h
new file mode 100755
index 00000000..8769d850
--- /dev/null
+++ b/base/hiviewdfx/hiview_lite/hiview_config.h
@@ -0,0 +1,89 @@
+/*
+ * Copyright (c) 2020 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef HOS_LITE_HIVIEW_CONFIG_H
+#define HOS_LITE_HIVIEW_CONFIG_H
+
+#include <stdint.h>
+
+#include "ohos_types.h"
+
+#ifdef __cplusplus
+#if __cplusplus
+extern "C" {
+#endif
+#endif /* End of #ifdef __cplusplus */
+
+/* Set the following parameters for different products based on their own resources. */
+#define HIVIEW_FILE_DIR                    ""
+/* file path config */
+#define HIVIEW_FILE_PATH_LOG               HIVIEW_FILE_DIR"debug.log"
+#define HIVIEW_FILE_PATH_FAULT_EVENT       HIVIEW_FILE_DIR"fault.event"
+#define HIVIEW_FILE_PATH_UE_EVENT          HIVIEW_FILE_DIR"ue.event"
+#define HIVIEW_FILE_PATH_STAT_EVENT        HIVIEW_FILE_DIR"stat.event"
+#define HIVIEW_FILE_PATH_DUMP              HIVIEW_FILE_DIR"dump.dat"
+
+/* file size config */
+#define HIVIEW_LOG_FILE_SIZE               (8 * 1024)
+#define FAULT_EVENT_FILE_SIZE              (1 * 1024)
+#define UE_EVENT_FILE_SIZE                 (1 * 1024)
+#define STAT_EVENT_FILE_SIZE               (1 * 1024)
+
+/* cache size config */
+#define LOG_STATIC_CACHE_SIZE              1024            /* Must be greater than HIVIEW_FILE_BUF_SIZE. */
+#define EVENT_CACHE_SIZE                   256             /* Must be greater than HIVIEW_FILE_BUF_SIZE. */
+#define JS_LOG_CACHE_SIZE                  512
+#define HIVIEW_FILE_BUF_SIZE               128
+
+/* RAM dump config */
+#define HIVIEW_DUMP_PRE_SIZE               (384 * 1024)
+#define HIVIEW_DUMP_HEADER_OFFSET          0x400
+#define HIVIEW_DUMP_RAM_ADDR               0x10000400      /* 10000000 ~ 100003FF reserved for NVIC, no need save */
+#define HIVIEW_DUMP_RAM_SIZE               (HIVIEW_DUMP_PRE_SIZE - HIVIEW_DUMP_HEADER_OFFSET)
+
+/* feature switch */
+#define HIVIEW_FEATURE_ON                  1
+#define HIVIEW_FEATURE_OFF                 0
+
+#pragma pack(1)
+typedef struct {
+    const uint8 outputOption : 4; /* Control log output mode. Cannot be modified during running. */
+    uint8 hiviewInited : 1;       /* Indicates whether the hiview service is inited. */
+    uint8 level : 3;              /* Control log output level. HILOG_LV_XXX */
+    uint8 logSwitch : 1;          /* Indicates whether to enable the log component. */
+    uint8 eventSwitch : 1;        /* Indicates whether to enable the event component. */
+    uint8 dumpSwitch : 1;         /* Indicates whether to enable the dump component. */
+    uint64 logOutputModule;       /* Control log output module. */
+    uint16 writeFailureCount;
+} HiviewConfig;
+#pragma pack()
+
+typedef enum {
+    OUTPUT_OPTION_DEBUG = 0,    /* Output to the UART without buffer. Commercial versions are forbidden. */
+    OUTPUT_OPTION_FLOW,         /* Output to UART via SAMR */
+    OUTPUT_OPTION_TEXT_FILE,
+    OUTPUT_OPTION_BIN_FILE,
+    OUTPUT_OPTION_MAX
+} HiviewOutputOption;
+
+extern HiviewConfig g_hiviewConfig;
+
+#ifdef __cplusplus
+#if __cplusplus
+}
+#endif
+#endif /* End of #ifdef __cplusplus */
+
+#endif /* End of #ifndef HOS_LITE_HIVIEW_CONFIG_H */
diff --git a/base/hiviewdfx/hiview_lite/hiview_def.h b/base/hiviewdfx/hiview_lite/hiview_def.h
new file mode 100755
index 00000000..babe81a8
--- /dev/null
+++ b/base/hiviewdfx/hiview_lite/hiview_def.h
@@ -0,0 +1,94 @@
+/*
+ * Copyright (c) 2020 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef HOS_LITE_HIVIEW_DEF_H
+#define HOS_LITE_HIVIEW_DEF_H
+
+#include "ohos_types.h"
+
+#ifdef __cplusplus
+#if __cplusplus
+extern "C" {
+#endif
+#endif /* End of #ifdef __cplusplus */
+
+#define HIVIEW_SERVICE                     "hiview"
+#define LOG_INFO_HEAD                      0xEC
+#define EVENT_INFO_HEAD                    0xEA
+#define MS_PER_SECOND                      1000
+#define SECONDS_PER_DAY                    86400
+#define SECONDS_PER_HOUR                   3600
+#define SECONDS_PER_MINUTE                 60
+#define LOG_FMT_MAX_LEN                    128
+#define LOG_CONTENT_MAX_LEN                96
+#define LOG_MODULE_NAME_LEN                16
+#define LOG_TIME_STR_SIZE                  10
+#define TAIL_LINE_BREAK                    2
+#define READ_FILE_BUF_MAX_SIZE             1024
+
+/**
+ * Event id : eventPrefix + eventId
+ * eventPrefix: 9520/9521/9522
+ * eventId: 0-65535
+ **/
+#define FAULT_EVENT_PREFIX   9520
+#define UE_EVENT_PREFIX      9521
+#define STAT_EVENT_PREFIX    9522
+
+typedef enum {
+    LOG_MULTI_PARA_0 = 0,
+    LOG_MULTI_PARA_1 = 1,
+    LOG_MULTI_PARA_2 = 2,
+    LOG_MULTI_PARA_3 = 3,
+    LOG_MULTI_PARA_4 = 4,
+    LOG_MULTI_PARA_5 = 5,
+    LOG_MULTI_PARA_MAX = 6
+} LogMultiParaIndex;
+
+#pragma pack(1)
+typedef struct {
+    uint8 id;
+    const char *name; /* LOG_MODULE_NAME_LEN */
+} HiLogModuleInfo;
+
+typedef struct {
+    uint8 head;
+    uint8 module;
+    uint8 level : 4;
+    uint8 valueNumber : 4;
+    uint8 task;
+    uint32 time;    /* seconds */
+    const char *fmt;
+} HiLogCommon;
+
+typedef struct {
+    HiLogCommon commonContent;
+    uint32 values[LOG_MULTI_PARA_MAX];
+} HiLogContent;
+#pragma pack()
+
+typedef struct {
+    uint8 last : 1;   /* Indicates whether the last parameter. */
+    uint8 id : 4;
+    uint8 len : 3;
+} HiEventTag;
+
+#ifdef __cplusplus
+#if __cplusplus
+}
+#endif
+#endif /* End of #ifdef __cplusplus */
+
+#endif /* End of #ifndef HOS_LITE_HIVIEW_DEF_H */
diff --git a/base/hiviewdfx/hiview_lite/hiview_file.c b/base/hiviewdfx/hiview_lite/hiview_file.c
new file mode 100755
index 00000000..8169b5da
--- /dev/null
+++ b/base/hiviewdfx/hiview_lite/hiview_file.c
@@ -0,0 +1,267 @@
+/*
+ * Copyright (c) 2020 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "securec.h"
+#include "ohos_types.h"
+#include "hiview_def.h"
+#include "hiview_util.h"
+#include "hiview_file.h"
+
+/* Refresh the file header information after every 10 file operations. */
+#define FILE_HEADER_UPDATE_CTL   10
+
+static uint16 GetReadCursor(HiviewFile *fp);
+
+boolean InitHiviewFile(HiviewFile *fp, HiviewFileType type, uint32 size)
+{
+    if (fp == NULL || fp->path == NULL) {
+        return FALSE;
+    }
+
+    fp->fhandle = HIVIEW_FileOpen(fp->path);
+    if (fp->fhandle < 0) {
+        return FALSE;
+    }
+    fp->type = (uint8)type;
+    fp->headerUpdateCtl = 0;
+    HiviewFileHeader *pHeader = &(fp->header);
+    FileHeaderCommon *pCommon = &(pHeader->common);
+    pHeader->size = size + sizeof(HiviewFileHeader);
+    // Create file for the first time
+    if (ReadFileHeader(fp) == FALSE) {
+        switch (fp->type) {
+            case HIVIEW_LOG_TEXT_FILE:
+                pCommon->prefix = HIVIEW_FILE_HEADER_PREFIX_TEXT;
+                break;
+            case HIVIEW_LOG_BIN_FILE:
+                pCommon->prefix = HIVIEW_FILE_HEADER_PREFIX_LOG;
+                break;
+            case HIVIEW_FAULT_EVENT_FILE:
+            case HIVIEW_UE_EVENT_FILE:
+            case HIVIEW_STAT_EVENT_FILE:
+                pCommon->prefix = HIVIEW_FILE_HEADER_PREFIX_EVENT;
+                break;
+            default:
+                break;
+        }
+        pCommon->codeMainVersion = HIVIEW_FILE_HEADER_MAIN_VERSION;
+        pCommon->codeSubVersion = HIVIEW_FILE_HEADER_SUB_VERSION;
+        pCommon->defineFileVersion = HIVIEW_FILE_HEADER_DEFINE_FILE_VER;
+        pHeader->createTime = (uint32)(HIVIEW_GetCurrentTime() / MS_PER_SECOND);
+        pHeader->usedSize = sizeof(HiviewFileHeader);
+        pHeader->wCursor = sizeof(HiviewFileHeader);
+        if (WriteFileHeader(fp) == FALSE) {
+            return FALSE;
+        }
+    } else {
+        // Version number may change after system upgrade
+        pCommon->codeMainVersion = HIVIEW_FILE_HEADER_MAIN_VERSION;
+        pCommon->codeSubVersion = HIVIEW_FILE_HEADER_SUB_VERSION;
+        pCommon->defineFileVersion = HIVIEW_FILE_HEADER_DEFINE_FILE_VER;
+    }
+
+    return TRUE;
+}
+
+boolean WriteFileHeader(HiviewFile *fp)
+{
+    if (fp == NULL || fp->fhandle < 0) {
+        return FALSE;
+    }
+
+    int32 ret;
+    if (HIVIEW_FileSeek(fp->fhandle, 0, HIVIEW_SEEK_SET) >= 0) {
+        ret = HIVIEW_FileWrite(fp->fhandle, (uint8 *)&(fp->header), sizeof(HiviewFileHeader));
+        if (ret == sizeof(HiviewFileHeader)) {
+            return TRUE;
+        }
+    }
+
+    return FALSE;
+}
+
+boolean ReadFileHeader(HiviewFile *fp)
+{
+    HiviewFileHeader h = { 0 };
+
+    if (fp == NULL || fp->fhandle < 0) {
+        return FALSE;
+    }
+
+    int32 ret;
+    uint32 t = (uint32)(HIVIEW_GetCurrentTime() / MS_PER_SECOND);
+    if (HIVIEW_FileSeek(fp->fhandle, 0, HIVIEW_SEEK_SET) < 0) {
+        return FALSE;
+    }
+    ret = HIVIEW_FileRead(fp->fhandle, (uint8 *)&h, sizeof(HiviewFileHeader));
+    if ((ret == sizeof(HiviewFileHeader)) && (h.createTime < t) &&
+        ((h.common.prefix & 0xFFFFFF00) == HIVIEW_FILE_HEADER_PREFIX_MASK)) {
+        memcpy_s(&(fp->header), sizeof(HiviewFileHeader), (void *)&h, sizeof(HiviewFileHeader));
+        return TRUE;
+    } else {
+        return FALSE;
+    }
+}
+
+int32 WriteToFile(HiviewFile *fp, const uint8 *data, uint32 len)
+{
+    if (fp == NULL || fp->fhandle < 0 || len == 0 || GetFileFreeSize(fp) < len) {
+        return 0;
+    }
+    int32 wLen = 0;
+    int32 firstLen, secondLen;
+    HiviewFileHeader *h = &(fp->header);
+    // overflow
+    if (h->wCursor + len > h->size) {
+        firstLen = h->size - h->wCursor;
+        if (firstLen > 0) {
+            if ((HIVIEW_FileSeek(fp->fhandle, h->wCursor, HIVIEW_SEEK_SET) < 0) ||
+                firstLen != HIVIEW_FileWrite(fp->fhandle, data, firstLen)) {
+                return 0;
+            }
+            h->wCursor += firstLen;
+            h->usedSize += firstLen;
+            wLen += firstLen;
+        }
+        // jump file header
+        h->wCursor = sizeof(HiviewFileHeader);
+        secondLen = len - firstLen;
+        if ((HIVIEW_FileSeek(fp->fhandle, h->wCursor, HIVIEW_SEEK_SET) > 0) && (secondLen > 0) &&
+            (secondLen == HIVIEW_FileWrite(fp->fhandle, data + firstLen, secondLen))) {
+            h->wCursor += secondLen;
+            h->usedSize += secondLen;
+            wLen += secondLen;
+        }
+    } else {
+        if (HIVIEW_FileSeek(fp->fhandle, h->wCursor, HIVIEW_SEEK_SET) < 0) {
+            return 0;
+        }
+        if ((int32)len == HIVIEW_FileWrite(fp->fhandle, data, len)) {
+            h->wCursor += len;
+            h->usedSize += len;
+            wLen += len;
+        }
+    }
+    if (fp->headerUpdateCtl >= FILE_HEADER_UPDATE_CTL) {
+        fp->headerUpdateCtl = 0;
+        if (WriteFileHeader(fp) == FALSE) {
+            return 0;
+        }
+    } else {
+        fp->headerUpdateCtl++;
+    }
+    return wLen;
+}
+
+int32 ReadFromFile(HiviewFile *fp, uint8 *data, uint32 readLen)
+{
+    if (fp == NULL || data == NULL || fp->fhandle < 0 || readLen == 0) {
+        return 0;
+    }
+
+    uint32 usedSize = GetFileUsedSize(fp);
+    if (usedSize < readLen) {
+        return 0;
+    }
+    int32 rLen = 0;
+    int32 firstLen, secondLen;
+    HiviewFileHeader *h = &(fp->header);
+    uint32 rCursor = GetReadCursor(fp);
+    // overflow
+    if (rCursor + readLen > h->size) {
+        firstLen = h->size - rCursor;
+        if (firstLen > 0) {
+            if ((HIVIEW_FileSeek(fp->fhandle, rCursor, HIVIEW_SEEK_SET) < 0) ||
+                (firstLen != HIVIEW_FileRead(fp->fhandle, data, firstLen))) {
+                return 0;
+            }
+            h->usedSize -= firstLen;
+            rLen += firstLen;
+        }
+        secondLen = readLen - firstLen;
+        // jump file header
+        if ((HIVIEW_FileSeek(fp->fhandle, sizeof(HiviewFileHeader), HIVIEW_SEEK_SET) > 0) &&
+            (secondLen > 0) && (secondLen == HIVIEW_FileRead(fp->fhandle, data + firstLen, secondLen))) {
+            h->usedSize -= secondLen;
+            rLen += secondLen;
+        }
+    } else {
+        if (HIVIEW_FileSeek(fp->fhandle, rCursor, HIVIEW_SEEK_SET) < 0) {
+            return 0;
+        }
+        if ((int32)readLen == HIVIEW_FileRead(fp->fhandle, data, readLen)) {
+            h->usedSize -= readLen;
+            rLen += readLen;
+        }
+    }
+    if (fp->headerUpdateCtl >= FILE_HEADER_UPDATE_CTL) {
+        fp->headerUpdateCtl = 0;
+        if (WriteFileHeader(fp) == FALSE) {
+            return 0;
+        }
+    } else {
+        fp->headerUpdateCtl++;
+    }
+    return rLen;
+}
+
+uint32 GetFileUsedSize(HiviewFile *fp)
+{
+    if (fp == NULL || fp->fhandle < 0) {
+        return 0;
+    }
+
+    HiviewFileHeader *h = &(fp->header);
+    if (h->usedSize > sizeof(HiviewFileHeader)) {
+        return h->usedSize - sizeof(HiviewFileHeader);
+    } else {
+        return 0;
+    }
+}
+
+uint32 GetFileFreeSize(HiviewFile *fp)
+{
+    if (fp == NULL || fp->fhandle < 0) {
+        return 0;
+    }
+
+    return (fp->header.size - fp->header.usedSize);
+}
+
+int32 CloseHiviewFile(HiviewFile *fp)
+{
+    if (fp != NULL && fp->fhandle > 0) {
+        if (WriteFileHeader(fp) == FALSE) {
+            return -1;
+        }
+        return HIVIEW_FileClose(fp->fhandle);
+    }
+
+    return -1;
+}
+
+static uint16 GetReadCursor(HiviewFile *fp)
+{
+    if (fp == NULL || fp->fhandle < 0) {
+        return 0;
+    }
+
+    HiviewFileHeader *h = &(fp->header);
+    if (h->wCursor >= h->usedSize) {
+        return sizeof(HiviewFileHeader) + (h->wCursor - h->usedSize);
+    } else {
+        return (h->size - (h->usedSize - h->wCursor));
+    }
+}
diff --git a/base/hiviewdfx/hiview_lite/hiview_file.h b/base/hiviewdfx/hiview_lite/hiview_file.h
new file mode 100755
index 00000000..af0ab4fb
--- /dev/null
+++ b/base/hiviewdfx/hiview_lite/hiview_file.h
@@ -0,0 +1,148 @@
+/*
+ * Copyright (c) 2020 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef HOS_LITE_HIVIEW_FILE_H
+#define HOS_LITE_HIVIEW_FILE_H
+
+#include "ohos_types.h"
+
+#ifdef __cplusplus
+#if __cplusplus
+extern "C" {
+#endif
+#endif /* End of #ifdef __cplusplus */
+
+#define HIVIEW_FILE_HEADER_PREFIX_LOG      0x48565701      /* HVW ASCii + 0x01 */
+#define HIVIEW_FILE_HEADER_PREFIX_EVENT    0x48565702      /* HVW ASCii + 0x02 */
+#define HIVIEW_FILE_HEADER_PREFIX_TEXT     0x48565703      /* HVW ASCii + 0x03 */
+#define HIVIEW_FILE_HEADER_PREFIX_MASK     0x48565700      /* HVW ASCii + 0x00 */
+#define HIVIEW_FILE_HEADER_MAIN_VERSION    1               /* Main version:1 */
+#define HIVIEW_FILE_HEADER_SUB_VERSION     10              /* Sub version:10 (lite) */
+#define HIVIEW_FILE_HEADER_DEFINE_FILE_VER 200602001       /* XML file version:200602001 */
+#define HIVIEW_CONF_PRODUCT_VER_STR        "1.0.0"
+
+typedef enum {
+    HIVIEW_LOG_TEXT_FILE = 0,
+    HIVIEW_LOG_BIN_FILE,
+    HIVIEW_DUMP_FILE,
+    HIVIEW_FAULT_EVENT_FILE,
+    HIVIEW_UE_EVENT_FILE,
+    HIVIEW_STAT_EVENT_FILE,
+} HiviewFileType;
+
+#pragma pack(1)
+typedef struct {
+    uint32 prefix;
+    uint8 codeMainVersion;
+    uint8 codeSubVersion;
+    uint32 defineFileVersion;
+} FileHeaderCommon;
+
+typedef struct {
+    FileHeaderCommon common;
+    uint32 createTime;
+    uint32 wCursor;
+    uint32 usedSize;
+    uint32 size;    /* Max size. Include the file header. */
+} HiviewFileHeader;
+
+typedef struct {
+    HiviewFileHeader header;
+    const char *path;
+    int32 fhandle;  /* Circular file */
+    uint8 type;     /* HiviewFileType */
+    uint8 headerUpdateCtl;
+} HiviewFile;
+#pragma pack()
+
+/**
+ * Initializes the file object.
+ *
+ * @param fp The address of hivew file object.
+ * @param type file type.
+ * @param size file size.
+ * @return TRUE if success, otherwise FALSE.
+ **/
+boolean InitHiviewFile(HiviewFile *fp, HiviewFileType type, uint32 size);
+
+/**
+ * Writes the file header to file.
+ *
+ * @param fp the pointer of hiview file object.
+ * @return TRUE if success, otherwise FALSE.
+ **/
+boolean WriteFileHeader(HiviewFile *fp);
+
+/**
+ * Reads the file header info.
+ *
+ * @param fp the pointer of hiview file object.
+ * @return TRUE if the file contains the correct header info, otherwise FALSE.
+ **/
+boolean ReadFileHeader(HiviewFile *fp);
+
+/**
+ * Writes data to file.
+ *
+ * @param fp the pointer of hiview file object.
+ * @param data bytes to be written to the file.
+ * @param len the length of the data to be written. The length should be a multiple of a structure.
+ * @return length of bytes written.
+ * @attention Avoid calling this function too frequently, the watchdog may timeout otherwise.
+ **/
+int32 WriteToFile(HiviewFile *fp, const uint8 *data, uint32 len);
+
+/**
+ * Reads data from file.
+ *
+ * @param fp the pointer of hiview file object.
+ * @param data buffer for holding reading data.
+ * @param readLen the length of the data to be read. The length should be a multiple of a structure.
+ * @return length of bytes read.
+ * @attention Avoid calling this function too frequently, the watchdog may timeout otherwise.
+ **/
+int32 ReadFromFile(HiviewFile *fp, uint8 *data, uint32 readLen);
+
+/**
+ * Gets used size of file, excluding the size of file header
+ *
+ * @param fp the pointer of hiview file object.
+ * @return used size.
+ **/
+uint32 GetFileUsedSize(HiviewFile *fp);
+
+/**
+ * Gets free size of file, excluding the size of file header
+ *
+ * @param fp the pointer of hiview file object.
+ * @return free size.
+ **/
+uint32 GetFileFreeSize(HiviewFile *fp);
+
+/**
+ * Closes the file.
+ *
+ * @param fp the pointer of hiview file object.
+ * @return 0 if success, otherwise -1.
+ **/
+int32 CloseHiviewFile(HiviewFile *fp);
+
+#ifdef __cplusplus
+#if __cplusplus
+}
+#endif
+#endif /* End of #ifdef __cplusplus */
+
+#endif /* End of #ifndef HOS_LITE_HIVIEW_FILE_H */
diff --git a/base/hiviewdfx/hiview_lite/hiview_service.c b/base/hiviewdfx/hiview_lite/hiview_service.c
new file mode 100755
index 00000000..7d51e26d
--- /dev/null
+++ b/base/hiviewdfx/hiview_lite/hiview_service.c
@@ -0,0 +1,139 @@
+/*
+ * Copyright (c) 2020 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "ohos_init.h"
+#include "samgr_lite.h"
+#include "service.h"
+#include "common.h"
+#include "hiview_def.h"
+#include "hiview_config.h"
+#include "hiview_service.h"
+#include "hiview_util.h"
+
+static const char *GetName(Service *service);
+static BOOL Initialize(Service *service, Identity identity);
+static TaskConfig GetTaskConfig(Service *service);
+static BOOL MessageHandle(Service *service, Request *request);
+static void Output(IUnknown *iUnknown, int16 msgId, uint16 type);
+
+static HiviewService g_hiviewService = {
+    .GetName = GetName,
+    .Initialize = Initialize,
+    .MessageHandle = MessageHandle,
+    .GetTaskConfig = GetTaskConfig,
+    DEFAULT_IUNKNOWN_ENTRY_BEGIN,
+    .Output = Output,
+    DEFAULT_IUNKNOWN_ENTRY_END,
+};
+
+static HiviewInitFunc g_hiviewInitFuncList[HIVIEW_CMP_TYPE_MAX] = { NULL };
+static HiviewMsgHandle g_hiviewMsgHandleList[HIVIEW_MSG_MAX] = { NULL };
+static void InitHiviewComponent(void);
+
+static void Init(void)
+{
+    SAMGR_GetInstance()->RegisterService((Service *)&g_hiviewService);
+    SAMGR_GetInstance()->RegisterDefaultFeatureApi(HIVIEW_SERVICE, GET_IUNKNOWN(g_hiviewService));
+    InitHiviewComponent();
+}
+SYS_SERVICE_INIT(Init);
+
+static const char *GetName(Service *service)
+{
+    (void)service;
+    return HIVIEW_SERVICE;
+}
+
+static BOOL Initialize(Service *service, Identity identity)
+{
+    HiviewService *hiviewService = NULL;
+
+    if (service == NULL) {
+        return FALSE;
+    }
+    hiviewService = (HiviewService *)service;
+    hiviewService->identity = identity;
+    /* The communication of task can be use after the service is running. */
+    g_hiviewConfig.hiviewInited = TRUE;
+    HIVIEW_UartPrint("hiview init success.");
+
+    return TRUE;
+}
+
+static BOOL MessageHandle(Service *service, Request *request)
+{
+    (void)service;
+    if ((request == NULL) || (request->msgId >= HIVIEW_MSG_MAX)) {
+        return TRUE;
+    }
+    if (g_hiviewMsgHandleList[request->msgId] != NULL) {
+        (*(g_hiviewMsgHandleList[request->msgId]))(request);
+    }
+
+    return TRUE;
+}
+
+static TaskConfig GetTaskConfig(Service *service)
+{
+    (void)service;
+    TaskConfig config = { LEVEL_LOW, PRI_NORMAL, 0x800, 10, SINGLE_TASK };
+    return config;
+}
+
+static void Output(IUnknown *iUnknown, int16 msgId, uint16 type)
+{
+    HiviewService *service = GET_OBJECT(iUnknown, HiviewService, iUnknown);
+    Request request = {
+        .msgId =  msgId,
+        .msgValue = type,
+        .data = NULL,
+        .len = 0
+    };
+    SAMGR_SendRequest(&(service->identity), &request, NULL);
+}
+
+static void InitHiviewComponent(void)
+{
+    uint8 i;
+    for (i = 0; i < HIVIEW_CMP_TYPE_MAX; i++) {
+        if (g_hiviewInitFuncList[i] != NULL) {
+            (*(g_hiviewInitFuncList[i]))();
+        }
+    }
+}
+
+void HiviewRegisterInitFunc(HiviewComponentType type, HiviewInitFunc func)
+{
+    g_hiviewInitFuncList[type] = func;
+}
+
+void HiviewRegisterMsgHandle(HiviewInnerMessage type, HiviewMsgHandle func)
+{
+    g_hiviewMsgHandleList[type] = func;
+}
+
+void HiviewSendMessage(const char *srvName, int16 msgId, uint16 msgValue)
+{
+    static HiviewInterface *hiviewInfterface = NULL;
+
+    if (hiviewInfterface == NULL) {
+        IUnknown *hiviewDefApi = SAMGR_GetInstance()->GetDefaultFeatureApi(srvName);
+        if (hiviewDefApi == NULL) {
+            return;
+        }
+        hiviewDefApi->QueryInterface(hiviewDefApi, 0, (void **)&hiviewInfterface);
+    }
+    hiviewInfterface->Output((IUnknown *)hiviewInfterface, msgId, msgValue);
+}
\ No newline at end of file
diff --git a/base/hiviewdfx/hiview_lite/hiview_service.h b/base/hiviewdfx/hiview_lite/hiview_service.h
new file mode 100755
index 00000000..dd0fac44
--- /dev/null
+++ b/base/hiviewdfx/hiview_lite/hiview_service.h
@@ -0,0 +1,70 @@
+/*
+ * Copyright (c) 2020 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef HOS_LITE_HIVIEW_SERVICE_H
+#define HOS_LITE_HIVIEW_SERVICE_H
+
+#include <service.h>
+#include <iunknown.h>
+#include "ohos_types.h"
+
+#ifdef __cplusplus
+#if __cplusplus
+extern "C" {
+#endif
+#endif /* End of #ifdef __cplusplus */
+
+typedef enum {
+    HIVIEW_CMP_TYPE_DUMP = 0,
+    HIVIEW_CMP_TYPE_LOG,
+    HIVIEW_CMP_TYPE_LOG_LIMIT,
+    HIVIEW_CMP_TYPE_EVENT,
+    HIVIEW_CMP_TYPE_MAX
+} HiviewComponentType;
+
+typedef enum {
+    HIVIEW_MSG_OUTPUT_LOG_FLOW = 0,
+    HIVIEW_MSG_OUTPUT_LOG_TEXT_FILE,
+    HIVIEW_MSG_OUTPUT_LOG_BIN_FILE,
+    HIVIEW_MSG_OUTPUT_EVENT_FLOW,
+    HIVIEW_MSG_OUTPUT_EVENT_BIN_FILE,
+    HIVIEW_MSG_MAX
+} HiviewInnerMessage;
+
+typedef struct {
+    INHERIT_IUNKNOWN;
+    void (*Output)(IUnknown *iUnknown, int16 msgId, uint16 type);
+} HiviewInterface;
+
+typedef struct {
+    INHERIT_SERVICE;
+    INHERIT_IUNKNOWNENTRY(HiviewInterface);
+    Identity identity;
+} HiviewService;
+
+typedef void (* HiviewInitFunc)(void);
+typedef void (* HiviewMsgHandle)(const Request *request);
+
+void HiviewRegisterInitFunc(HiviewComponentType type, HiviewInitFunc func);
+void HiviewRegisterMsgHandle(HiviewInnerMessage type, HiviewMsgHandle func);
+void HiviewSendMessage(const char *srvName, int16 msgId, uint16 msgValue);
+
+#ifdef __cplusplus
+#if __cplusplus
+}
+#endif
+#endif /* End of #ifdef __cplusplus */
+
+#endif /* End of #ifndef HOS_LITE_HIVIEW_SERVICE_H */
diff --git a/base/hiviewdfx/hiview_lite/hiview_util.c b/base/hiviewdfx/hiview_lite/hiview_util.c
new file mode 100755
index 00000000..3e6cca46
--- /dev/null
+++ b/base/hiviewdfx/hiview_lite/hiview_util.c
@@ -0,0 +1,136 @@
+/*
+ * Copyright (c) 2020 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "hiview_util.h"
+#include <string.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include "cmsis_os.h"
+#include "utils_file.h"
+
+extern void HAL_NVIC_SystemReset(void);
+extern void __disable_irq(void);
+extern void __enable_irq(void);
+
+#define HIVIEW_WAIT_FOREVER           0xFFFFFFFF
+#define HIVIEW_MS_PER_SECOND          1000
+
+void *HIVIEW_MemAlloc(uint8 modId, uint32 size)
+{
+    (void)modId;
+    return malloc(size);
+}
+
+void HIVIEW_MemFree(uint8 modId, void *pMem)
+{
+    (void)modId;
+    free(pMem);
+}
+
+uint32 HIVIEW_GetCurrentTime()
+{
+    uint32 perSec = osKernelGetTickFreq();
+
+    if (perSec) {
+        return osKernelGetTickCount() * (HIVIEW_MS_PER_SECOND / perSec);
+    } else {
+        return 0;
+    }
+}
+
+int32 HIVIEW_RtcGetCurrentTime(uint64 *val, HIVIEW_RtcTime *time)
+{
+    (void)val;
+    (void)time;
+    return OHOS_SUCCESS;
+}
+
+HiviewMutexId_t HIVIEW_MutexInit()
+{
+    return (HiviewMutexId_t)osMutexNew(NULL);
+}
+
+void HIVIEW_MutexLock(HiviewMutexId_t mutex)
+{
+    osMutexAcquire((osMutexId_t)mutex, HIVIEW_WAIT_FOREVER);
+}
+
+void HIVIEW_MutexUnlock(HiviewMutexId_t mutex)
+{
+    osMutexRelease((osMutexId_t)mutex);
+}
+
+uint32 HIVIEW_GetTaskId()
+{
+    return (uint32)osThreadGetId();
+}
+
+void HIVIEW_UartPrint(const char *str)
+{
+    printf("%s", str);
+}
+
+void HIVIEW_Sleep(uint32 ms)
+{
+    osDelay(ms / HIVIEW_MS_PER_SECOND);
+}
+
+/* Create the directory */
+int32 HIVIEW_FileMakeDir(const char *dir)
+{
+    return UtilsFileOpen(dir, O_CREAT_FS, O_RDWR_FS);
+}
+
+int32 HIVIEW_FileOpen(const char *path)
+{
+    return UtilsFileOpen(path, O_RDWR_FS | O_CREAT_FS, O_RDWR_FS);
+}
+
+int32 HIVIEW_FileClose(int32 handle)
+{
+    return UtilsFileClose(handle);
+}
+
+int32 HIVIEW_FileRead(int32 handle, uint8 *buf, uint32 len)
+{
+    return UtilsFileRead(handle, (char *)buf, len);
+}
+
+int32 HIVIEW_FileWrite(int32 handle, const uint8 *buf, uint32 len)
+{
+    return UtilsFileWrite(handle, (const char *)buf, len);
+}
+
+int32 HIVIEW_FileSeek(int32 handle, int32 offset, int32 whence)
+{
+    return UtilsFileSeek(handle, offset, whence);
+}
+
+int32 HIVIEW_FileUnlink(const char *path)
+{
+    return UtilsFileDelete(path);
+}
+
+void HIVIEW_WatchDogSystemReset()
+{
+    /* reset MCU Core */
+    HAL_NVIC_SystemReset();
+}
+
+uint8 HIVIEW_WdgResetFlag()
+{
+    /* Depend:HAL_WdgGetResetFlag */
+    return 1;
+}
diff --git a/base/hiviewdfx/hiview_lite/hiview_util.h b/base/hiviewdfx/hiview_lite/hiview_util.h
new file mode 100755
index 00000000..8f7a1071
--- /dev/null
+++ b/base/hiviewdfx/hiview_lite/hiview_util.h
@@ -0,0 +1,88 @@
+/*
+ * Copyright (c) 2020 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef HOS_LITE_HIVIEW_UTIL_H
+#define HOS_LITE_HIVIEW_UTIL_H
+
+#include "ohos_types.h"
+
+#ifdef __cplusplus
+#if __cplusplus
+extern "C" {
+#endif
+#endif /* End of #ifdef __cplusplus */
+
+/* The definition value is consistent with MEM_POOL_COMMON_ID. */
+#define MEM_POOL_HIVIEW_ID     0
+
+#ifndef HIVIEW_SEEK_SET
+#define HIVIEW_SEEK_SET 0
+#endif
+
+#ifndef HIVIEW_SEEK_CUR
+#define HIVIEW_SEEK_CUR 1
+#endif
+
+#ifndef HIVIEW_SEEK_END
+#define HIVIEW_SEEK_END 2
+#endif
+
+typedef void *HiviewMutexId_t;
+
+typedef struct {
+    uint8 minutes;
+    uint8 hour;
+    uint8 day;
+    uint8 month;
+    uint8 weekday;
+    uint8 seconds;
+    uint16 year;
+    uint16 millisecond;
+} HIVIEW_RtcTime;
+
+uint32 HIVIEW_GetCurrentTime(void);
+int32 HIVIEW_RtcGetCurrentTime(uint64 *val, HIVIEW_RtcTime *time);
+
+void *HIVIEW_MemAlloc(uint8 modId, uint32 size);
+void HIVIEW_MemFree(uint8 modId, void *pMem);
+HiviewMutexId_t HIVIEW_MutexInit(void);
+void HIVIEW_MutexLock(HiviewMutexId_t mutex);
+void HIVIEW_MutexUnlock(HiviewMutexId_t mutex);
+uint32 HIVIEW_GetTaskId(void);
+void HIVIEW_UartPrint(const char *str);
+void HIVIEW_Sleep(uint32 ms);
+
+/* File system */
+int32 HIVIEW_FileMakeDir(const char *path);
+int32 HIVIEW_FileOpen(const char *path);
+int32 HIVIEW_FileClose(int32 handle);
+int32 HIVIEW_FileRead(int32 handle, uint8 *buf, uint32 len);
+int32 HIVIEW_FileWrite(int32 handle, const uint8 *buf, uint32 len);
+int32 HIVIEW_FileSeek(int32 handle, int32 offset, int32 whence);
+int32 HIVIEW_FileSize(const char *path);
+int32 HIVIEW_FileUnlink(const char *path);
+
+uint8 *HIVIEW_GetStackBegin(void);
+uint32 HIVIEW_GetStackSize(void);
+void HIVIEW_WatchDogSystemReset(void);
+uint8 HIVIEW_WdgResetFlag(void);
+
+#ifdef __cplusplus
+#if __cplusplus
+}
+#endif
+#endif /* End of #ifdef __cplusplus */
+
+#endif /* End of #ifndef HOS_LITE_HIVIEW_UTIL_H */
diff --git a/base/powermgr/powermgr_lite/LICENSE b/base/powermgr/powermgr_lite/LICENSE
new file mode 100755
index 00000000..4a459866
--- /dev/null
+++ b/base/powermgr/powermgr_lite/LICENSE
@@ -0,0 +1,177 @@
+
+                                 Apache License
+                           Version 2.0, January 2004
+                        http://www.apache.org/licenses/
+
+   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
+
+   1. Definitions.
+
+      "License" shall mean the terms and conditions for use, reproduction,
+      and distribution as defined by Sections 1 through 9 of this document.
+
+      "Licensor" shall mean the copyright owner or entity authorized by
+      the copyright owner that is granting the License.
+
+      "Legal Entity" shall mean the union of the acting entity and all
+      other entities that control, are controlled by, or are under common
+      control with that entity. For the purposes of this definition,
+      "control" means (i) the power, direct or indirect, to cause the
+      direction or management of such entity, whether by contract or
+      otherwise, or (ii) ownership of fifty percent (50%) or more of the
+      outstanding shares, or (iii) beneficial ownership of such entity.
+
+      "You" (or "Your") shall mean an individual or Legal Entity
+      exercising permissions granted by this License.
+
+      "Source" form shall mean the preferred form for making modifications,
+      including but not limited to software source code, documentation
+      source, and configuration files.
+
+      "Object" form shall mean any form resulting from mechanical
+      transformation or translation of a Source form, including but
+      not limited to compiled object code, generated documentation,
+      and conversions to other media types.
+
+      "Work" shall mean the work of authorship, whether in Source or
+      Object form, made available under the License, as indicated by a
+      copyright notice that is included in or attached to the work
+      (an example is provided in the Appendix below).
+
+      "Derivative Works" shall mean any work, whether in Source or Object
+      form, that is based on (or derived from) the Work and for which the
+      editorial revisions, annotations, elaborations, or other modifications
+      represent, as a whole, an original work of authorship. For the purposes
+      of this License, Derivative Works shall not include works that remain
+      separable from, or merely link (or bind by name) to the interfaces of,
+      the Work and Derivative Works thereof.
+
+      "Contribution" shall mean any work of authorship, including
+      the original version of the Work and any modifications or additions
+      to that Work or Derivative Works thereof, that is intentionally
+      submitted to Licensor for inclusion in the Work by the copyright owner
+      or by an individual or Legal Entity authorized to submit on behalf of
+      the copyright owner. For the purposes of this definition, "submitted"
+      means any form of electronic, verbal, or written communication sent
+      to the Licensor or its representatives, including but not limited to
+      communication on electronic mailing lists, source code control systems,
+      and issue tracking systems that are managed by, or on behalf of, the
+      Licensor for the purpose of discussing and improving the Work, but
+      excluding communication that is conspicuously marked or otherwise
+      designated in writing by the copyright owner as "Not a Contribution."
+
+      "Contributor" shall mean Licensor and any individual or Legal Entity
+      on behalf of whom a Contribution has been received by Licensor and
+      subsequently incorporated within the Work.
+
+   2. Grant of Copyright License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      copyright license to reproduce, prepare Derivative Works of,
+      publicly display, publicly perform, sublicense, and distribute the
+      Work and such Derivative Works in Source or Object form.
+
+   3. Grant of Patent License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      (except as stated in this section) patent license to make, have made,
+      use, offer to sell, sell, import, and otherwise transfer the Work,
+      where such license applies only to those patent claims licensable
+      by such Contributor that are necessarily infringed by their
+      Contribution(s) alone or by combination of their Contribution(s)
+      with the Work to which such Contribution(s) was submitted. If You
+      institute patent litigation against any entity (including a
+      cross-claim or counterclaim in a lawsuit) alleging that the Work
+      or a Contribution incorporated within the Work constitutes direct
+      or contributory patent infringement, then any patent licenses
+      granted to You under this License for that Work shall terminate
+      as of the date such litigation is filed.
+
+   4. Redistribution. You may reproduce and distribute copies of the
+      Work or Derivative Works thereof in any medium, with or without
+      modifications, and in Source or Object form, provided that You
+      meet the following conditions:
+
+      (a) You must give any other recipients of the Work or
+          Derivative Works a copy of this License; and
+
+      (b) You must cause any modified files to carry prominent notices
+          stating that You changed the files; and
+
+      (c) You must retain, in the Source form of any Derivative Works
+          that You distribute, all copyright, patent, trademark, and
+          attribution notices from the Source form of the Work,
+          excluding those notices that do not pertain to any part of
+          the Derivative Works; and
+
+      (d) If the Work includes a "NOTICE" text file as part of its
+          distribution, then any Derivative Works that You distribute must
+          include a readable copy of the attribution notices contained
+          within such NOTICE file, excluding those notices that do not
+          pertain to any part of the Derivative Works, in at least one
+          of the following places: within a NOTICE text file distributed
+          as part of the Derivative Works; within the Source form or
+          documentation, if provided along with the Derivative Works; or,
+          within a display generated by the Derivative Works, if and
+          wherever such third-party notices normally appear. The contents
+          of the NOTICE file are for informational purposes only and
+          do not modify the License. You may add Your own attribution
+          notices within Derivative Works that You distribute, alongside
+          or as an addendum to the NOTICE text from the Work, provided
+          that such additional attribution notices cannot be construed
+          as modifying the License.
+
+      You may add Your own copyright statement to Your modifications and
+      may provide additional or different license terms and conditions
+      for use, reproduction, or distribution of Your modifications, or
+      for any such Derivative Works as a whole, provided Your use,
+      reproduction, and distribution of the Work otherwise complies with
+      the conditions stated in this License.
+
+   5. Submission of Contributions. Unless You explicitly state otherwise,
+      any Contribution intentionally submitted for inclusion in the Work
+      by You to the Licensor shall be under the terms and conditions of
+      this License, without any additional terms or conditions.
+      Notwithstanding the above, nothing herein shall supersede or modify
+      the terms of any separate license agreement you may have executed
+      with Licensor regarding such Contributions.
+
+   6. Trademarks. This License does not grant permission to use the trade
+      names, trademarks, service marks, or product names of the Licensor,
+      except as required for reasonable and customary use in describing the
+      origin of the Work and reproducing the content of the NOTICE file.
+
+   7. Disclaimer of Warranty. Unless required by applicable law or
+      agreed to in writing, Licensor provides the Work (and each
+      Contributor provides its Contributions) on an "AS IS" BASIS,
+      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
+      implied, including, without limitation, any warranties or conditions
+      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
+      PARTICULAR PURPOSE. You are solely responsible for determining the
+      appropriateness of using or redistributing the Work and assume any
+      risks associated with Your exercise of permissions under this License.
+
+   8. Limitation of Liability. In no event and under no legal theory,
+      whether in tort (including negligence), contract, or otherwise,
+      unless required by applicable law (such as deliberate and grossly
+      negligent acts) or agreed to in writing, shall any Contributor be
+      liable to You for damages, including any direct, indirect, special,
+      incidental, or consequential damages of any character arising as a
+      result of this License or out of the use or inability to use the
+      Work (including but not limited to damages for loss of goodwill,
+      work stoppage, computer failure or malfunction, or any and all
+      other commercial damages or losses), even if such Contributor
+      has been advised of the possibility of such damages.
+
+   9. Accepting Warranty or Additional Liability. While redistributing
+      the Work or Derivative Works thereof, You may choose to offer,
+      and charge a fee for, acceptance of support, warranty, indemnity,
+      or other liability obligations and/or rights consistent with this
+      License. However, in accepting such obligations, You may act only
+      on Your own behalf and on Your sole responsibility, not on behalf
+      of any other Contributor, and only if You agree to indemnify,
+      defend, and hold each Contributor harmless for any liability
+      incurred by, or claims asserted against, such Contributor by reason
+      of your accepting any such warranty or additional liability.
+
+   END OF TERMS AND CONDITIONS
\ No newline at end of file
diff --git a/base/powermgr/powermgr_lite/README.md b/base/powermgr/powermgr_lite/README.md
new file mode 100755
index 00000000..ca81e3e6
--- /dev/null
+++ b/base/powermgr/powermgr_lite/README.md
@@ -0,0 +1,80 @@
+# Lite Power Manager<a name="EN-US_TOPIC_0000001126247025"></a>
+
+-   [Introduction](#section11660541593)
+-   [Directory Structure](#section19472752217)
+-   [Usage](#section146636391856)
+    -   [Available APIs](#section481251394)
+    -   [Usage Guidelines](#section12620311012)
+
+-   [Repositories Involved](#section63151229062)
+
+## Introduction<a name="section11660541593"></a>
+
+The lite power manager provides the following capabilities:
+
+1.  Querying the battery level
+2.  Keeping the device screen always on using a lock
+
+**Figure  1**  Lite power manager architecture<a name="fig106301571239"></a>
+
+
+![](figures/en-us_image_0000001079710638.png)
+
+## Directory Structure<a name="section19472752217"></a>
+
+```
+base/powermgr/powermgr_lite
+├── interfaces		# APIs
+│   └── kits
+│       └── battery		# API for querying the battery level
+└── services		        # Services
+    ├── include
+    └── source
+```
+
+## Usage<a name="section146636391856"></a>
+
+### Available APIs<a name="section481251394"></a>
+
+The following table lists the JavaScript APIs provided by the lite power manager.
+
+<a name="table45171237103112"></a>
+<table><thead align="left"><tr id="row12572123793117"><th class="cellrowborder" valign="top" width="38.71%" id="mcps1.1.3.1.1"><p id="p19572937163116"><a name="p19572937163116"></a><a name="p19572937163116"></a><strong id="b98969616388"><a name="b98969616388"></a><a name="b98969616388"></a>API</strong></p>
+</th>
+<th class="cellrowborder" valign="top" width="61.29%" id="mcps1.1.3.1.2"><p id="p157213711313"><a name="p157213711313"></a><a name="p157213711313"></a><strong id="b17930187133810"><a name="b17930187133810"></a><a name="b17930187133810"></a>Description</strong></p>
+</th>
+</tr>
+</thead>
+<tbody><tr id="row14574143723119"><td class="cellrowborder" valign="top" width="38.71%" headers="mcps1.1.3.1.1 "><p id="p67351028124111"><a name="p67351028124111"></a><a name="p67351028124111"></a>battery.getStatus(OBJECT)</p>
+</td>
+<td class="cellrowborder" valign="top" width="61.29%" headers="mcps1.1.3.1.2 "><p id="p105741337153115"><a name="p105741337153115"></a><a name="p105741337153115"></a>Obtains the battery level.</p>
+</td>
+</tr>
+</tbody>
+</table>
+
+### Usage Guidelines<a name="section12620311012"></a>
+
+**Obtaining the battery level**
+
+Use the JavaScript API to obtain the battery level.
+
+The sample code is as follows:
+
+```
+battery.getStatus({
+  success: function(data) {
+    console.log('success get battery level:' + data.level);
+  },
+  fail: function(data, code) {
+    console.log('fail to get battery level code:' + code + ', data: ' + data);
+  },
+});
+```
+
+## Repositories Involved<a name="section63151229062"></a>
+
+Power management subsystem
+
+**hmf/powermgr/powermgr\_lite**
+
diff --git a/base/powermgr/powermgr_lite/README_zh.md b/base/powermgr/powermgr_lite/README_zh.md
new file mode 100755
index 00000000..60145e8b
--- /dev/null
+++ b/base/powermgr/powermgr_lite/README_zh.md
@@ -0,0 +1,81 @@
+# 轻量级电源管理组件<a name="ZH-CN_TOPIC_0000001126247025"></a>
+
+-   [简介](#section11660541593)
+-   [目录](#section19472752217)
+-   [说明](#section146636391856)
+    -   [接口说明](#section481251394)
+    -   [使用说明](#section12620311012)
+
+-   [相关仓](#section63151229062)
+
+## 简介<a name="section11660541593"></a>
+
+轻量级电源组件提供如下功能：
+
+1.  电池电量查询。
+2.  亮灭屏控制锁。
+
+**图 1**  轻量级电源管理组件架构图<a name="fig106301571239"></a>
+
+
+![](figures/en-us_image_0000001079710638.png)
+
+## 目录<a name="section19472752217"></a>
+
+```
+base/powermgr/powermgr_lite
+├── interfaces		# 轻量级电源管理组件接口层
+│   └── kits
+│       └── battery		# 电池查询接口
+└── services		        # 电源管理组件服务
+    ├── include
+    └── source
+```
+
+## 说明<a name="section146636391856"></a>
+
+### 接口说明<a name="section481251394"></a>
+
+轻量电源管理服务对外提供的JS接口，如下表：
+
+<a name="table45171237103112"></a>
+<table><thead align="left"><tr id="row12572123793117"><th class="cellrowborder" valign="top" width="38.71%" id="mcps1.1.3.1.1"><p id="p19572937163116"><a name="p19572937163116"></a><a name="p19572937163116"></a><strong id="b18552135014316"><a name="b18552135014316"></a><a name="b18552135014316"></a>接口名</strong></p>
+</th>
+<th class="cellrowborder" valign="top" width="61.29%" id="mcps1.1.3.1.2"><p id="p157213711313"><a name="p157213711313"></a><a name="p157213711313"></a><strong id="b193891558123118"><a name="b193891558123118"></a><a name="b193891558123118"></a>描述</strong></p>
+</th>
+</tr>
+</thead>
+<tbody><tr id="row14574143723119"><td class="cellrowborder" valign="top" width="38.71%" headers="mcps1.1.3.1.1 "><p id="p67351028124111"><a name="p67351028124111"></a><a name="p67351028124111"></a>battery.getStatus(OBJECT)</p>
+</td>
+<td class="cellrowborder" valign="top" width="61.29%" headers="mcps1.1.3.1.2 "><p id="p105741337153115"><a name="p105741337153115"></a><a name="p105741337153115"></a>获取电池电量</p>
+</td>
+</tr>
+</tbody>
+</table>
+
+### 使用说明<a name="section12620311012"></a>
+
+**获取电池电量信息**
+
+提供了获取电池电量的接口。
+
+JS代码示例如下：
+
+```
+battery.getStatus({
+  success: function(data) {
+    console.log('success get battery level:' + data.level);
+  },
+  fail: function(data, code) {
+    console.log('fail to get battery level code:' + code + ', data: ' + data);
+  },
+});
+
+```
+
+## 相关仓<a name="section63151229062"></a>
+
+电源管理子系统
+
+**hmf/powermgr/powermgr\_lite**
+
diff --git a/base/powermgr/powermgr_lite/figures/en-us_image_0000001079710638.png b/base/powermgr/powermgr_lite/figures/en-us_image_0000001079710638.png
new file mode 100755
index 0000000000000000000000000000000000000000..e6b94cdee5de58a7c19c40acbc747e9daf9bff3e
GIT binary patch
literal 16063
zcmeIZby(B=|1b)O3W|cLbh`mcC@7r<(jZ8;Y>I^R=n$J4GE&kT1Vl<kw~B1{K$$cn
z70}5>NQ{P^H+YAB&$-TZo$EaRJiq7rAAI(XSNA*ent|q#LtKYwXlRaTYh5v>p`j(v
z(9j)VH~_wIU@13gXas1quUs?<pq<UccihAUj*nB{!82{ojXH>!xt-IV*;zQqA=54t
zAvinz&=Vdjjx9IBe`2(YabRO?;!ya+fuLWxof@BLd0TKOTDJY}J}+w_iB>J{uEm@`
zj{P}{vC8<-)Vi8UEKwzn1&#ZVGhQiXA2ugynyQ#m3YS!~tye<}5Yj*H(a;Of&@!k$
zXNX7;GGaUg{-mK}x%=iWJdk1U2O7GE3<88p4vdF?{-lmp-p6uxcUQzE`loJ!uOB@8
zd4zyv)?b^|1?jY^SuEaN+C7Pe{;4?r?@L%{A=V7yHw1TYq@mMFcKW$O;Mx-!lmvb9
z>z@bHLORa>T)`rGg$Bn)r)%*ODjL*R&b_N?8BPe@g&&T9ivNV32Diwx2R9A<p=0Xk
zhi_Qf_O2EHXdL(ljSCWl&DD8k5fPErOeOzAUpOBX7-k<GD6{A1Qw^ylU)HoG@08oc
z@vHHT1(8d7JkthBtZN<-@!8p9lk|J%4W0T_42KFtYTauJSzi<|N(#tBsrd1G@nMnr
z%6l+cq^MV*`jE!nluqM@7S^*6>w9OUcJXz)zx%_{e)~d<&)M{^Ydf3s^UY&@1MNYY
zoY@7P&1KQsRTK+;t~d-)npeerbzVCBh{_7Wi>r0gC<Lobd?nkshlqm;oxV=LarwEX
zqF8&*1|<D0!9tq``x+%fUhJnX>0Y!pd|^mx^l`g{X`g@HetB?2VsQtIpX+i)3Jg>B
zu}6`t;<(HN7~s%ApO#om&-&02XJKR2Ssq+}Hp0?^SeUCy>6W@PkG6gILk*dothr#7
z<27T1cHt(Hen>sqEFUy=5-%P0ey}G4HyJL75KaeP2|Se9mT<_Rf#5n&I=gd?B!oDD
zM`f~p9_+3=8!j_5Iy)GW1Mdk`@S7PfpR~bF)Jtgoq}L;L9~8yBIoUL*@;2uEsTbJf
z;)hCAHbY)PF>J0Q50SWYNyWo$s!!csyj9p0Iz>isVPU52nWED;K2$=ovpsK;WpVk~
z;Nr%<2vXZXAe6l07$c7?ugh0<wC>y!H3v>QeeIQ}@(>5=PWMForwOq+R{V8rPK<Xt
z>g8rMA`~AQ<gX}OAb+*(M+VPjtf&iinZs0-O|F{Av&Z-L<F|Fts3*-qvC@%G#8tH0
zCn71fb1THcNm)fqW*(fqEO%ri8#9?ga@BJ`PHr#&B)7FkTzDjZ7T*dp;jPhCgV!=6
z_r&{Jmil#+{=?*na*Imct%bPo#^cX+>Mk+r7)Lo8TX&o;K<-c0G4q0GU<ah4K3?*z
zYd2AwGqA<3=D<}nt9+OSe4Y`%NRgT?-<Q{_{zJs;C>3VbXw7$NL0@~Hxpaj7RG2qF
z6IV7UJ>eM>EaL5dsU1=9E<AoFFpHhEr=V{X7<|PDKIfjF`P&izC8Za;_}A)IphAcK
zQKA1Kmf(LN8mSTlxv>D4yn+Iu2{FgMswPZ(Q2xVuUBEVF08d#$jBQ-U6U!&`+K6HN
zYV6nXIIGp!>@;Kr)Vc@GariIR3j@QQ-{&B{C#auJ(n5y&yrnt!Wa(uj4XVUh=C7r`
z8Z<b+stmmYd+Ol=jIpcL5e(g)S+@li*j7R$A!5%!qyg`dW_G`P&pfM}1D9dmfrIY}
z)bsydw@3H?@5KBd{6nl|gS^j!;|J4B_<>v0=f?!nX;2@pYP7L2h}Ja+EZmc03OFE~
zMY|pI!wN}*vPH_MNT>rhNqe8!ax<G2(x5JM$X0+rbH8VWQGl?`$VU72AWkx!_;d!{
zI9+m%77~4BO`x3037l!dHP&WJoNCxsKrL{3p5ETx8_fuE|BtQprJmCyn^i~N>;gpJ
z_b;uF8&ab(o99OADxz~I{}|ZbTwU!)h{r+s`ed6;<O=YEw>pSge&P2t)PGz=cij3@
z7%Il8qo;^Tf%|T6P`*s}6f_Jc&!oQSu6H>HwbVU-(qU$pSZ)}~kjlD}I<@^)a3$9Z
z89To1rL0SX6FR1<1yFxFL&z}Nc%_Xqh}85>f=d*NHlCQWAf&?arz|L6I21AE?{{Q&
zq;Rj08__qf`@}BDQy<WvMzbA`v4lLG5m|SPtoQ~|62_js_LyY#Wb97<0P$oo=GcBN
z{3J)gToH03rojusjpJ3-L~A`@X5A%SuzVa(#Z@0v-;_j)Xs(p#V+gs-32NSy14opW
zz34Na6C2gW21sF4arrm3WKl{XNcgIV1wB3gUpo^}CuySn#`%x%qKflUbyj9;#>W`_
zNdB*`AAYLSw*YNl)6pQIrOHoP_TZF~pUwo&H_0__kct{_cz)yj<kL0rm<^JiqKh;w
zvcz%S)o>wPm8us{${4n~XM{$c>LU5)KKAQC%Ji9UP|8TI%5x$rLE^}0xW3T5g${bY
zky`SlfGYpv(c3xBPfK^<OJTw_c13|W%>LzpmSj@m+6aasQSB=-?Tz(mD9<J5cQ03M
zUbAkC4j;L|hF^VJtUbjWFV0V&ymsyZ*vwZb!(^*%c9?6wpB9?cex#73IQQTr-d>k~
zV{~Q^X*!F=uwVne3tmA#X2_HPL}bIwQJc=&vuA(g%qvSvDE5!>a^euwI33H_iNLmF
zAVnKd&)NsPe0iczc0fN5^5L#3VpaC`2@xi5B?WeYJ^4yd6~?upD%S!k&3o1L(^p5@
z&depkw;P5lo4blKo7u8hThurL<YM6Zb8DKAXn4FhN+s-8UBG)`XwkHl+fHTya(Z4t
zf?$CqI@@AnlscdE<?tMzO??fsj%y7SB4`n7i2za|OGxlYvGiH13RI@t9jjFxAa<7E
zIM;TMpLVi>QDFD~_?ek2-tTF&R-T+=tWpKKvwNYf+VN0nI>;vD;Z8*mhk`E}Xqh}|
zh;@(4xnu%;P{NFT=={Qu=#<VKsxb9i6}dGoY;pN>iz-DVJScoEcVK>obh^`HbWP8!
zfk*o*X0st%mEUfCHjb*6sgj(r_A0%9pvq$FD|Nl4A$5Ew`tjvCdG8HnL*5;!D1zFn
zbjG`Ixr*N5)Z1~W?bxCLKk0IM4E+>3p!gzs<D3BQTZrfrm?80{Yg>FJOa;;qKA^bb
zAx3t3FyKx9bjG`Q+L@Nl`f0JBr;$9WklJ%$b{WFgx6m{YMrA%Q8-|#*^&GiDY9{I0
zDe91-mgeo(nHy?4Oe6`@itQiEO}?ojB+KjV<2n$wXEDe{li((V;ZpPxBF4XY{jGBd
zUJN4|*lFMw!T-&mULBn&4(VA-eZvM3Th~%XJ%OCupU{rWi83~6urQPoe;ZI5<R!=B
zpC^@-=X4Ci;gVZcXga=)?7MCm5*$KO>oi1+WN$=HKAF|cK4mFwAV~{J*NqC&XZdb~
zW_|7-rf6jh6N)sBAsSsByP;!TSm}FKM}Jmz_2JpM_xWfkXX_x6;X;nZWF0wgyWTb<
zZet;1GN5|_6WF$rhmUtVKK(rEq7dOsa>PZRX!SUhez*v?#%(W4Ek&ybk0IQ{-)$%-
zm2_+tpq4m2FNr@z<>KDnG%B91doUfu`iG-|cE7i2rmtSTS%y5a+c9<_ex^LkaWn2d
zeA9kX|D)$&RO|%mdCpyMe_*1K8-Lp$K9ORW9+kHB$+In04Q18!?2})0WJ`#yZH8FE
za#G2rvx@yG!V<MBVTVOW?Nnp(sk`tLn7-j*mce^)DEs^(L{!&^t~a#9SqIH(o|yWe
zu<XT2e?7FM|46h>|8`I#siWnvnPmuep-wIC7|u?wbVnEVn>$z*B`o`+jr7=xn&*-n
zT2|&Z3%ZluZ&Aw0mYr-#Ez&FQ-g@ZLBI)QKLQ0lZ2=P^Jm|``u5RNc}nKXEWZ7MY=
zyt<=U#*sUvV9#EYEtZ@{i?WTnuq}S+xg0L}gogW!Xzz$@)4*kP^p?DT7b9xck@MLD
z;Dsve8#<FR{i26d3})qt7>_Cy6vdDSdl|^1;H5-45OVODqf2yNFW1JqU3b3G_g08t
zy3n&;zN>`RR<EPt;Bngt!yd|z;rStV?_0YHOxO+&EzUk>*8yUZj`IA1{S1F8EM1{+
z!(m8zY*ds4i~6or5+bB|pWKUZI^5`f>b{avJdYF&N<~QTQi<VTsy~3gk{v^X3ww93
z;^<#zx#<@&;rc7NVs6St7^6ZdedY(p&OO1u*|pni<NMsFU;YL_;!`(W#>Dcu@wT^*
zsq9(%yFWdXd^*F)V^e7W?%=#qPvvwFX>d!vjP6*>uXzWM-=UAb`}scnu*e?}Wt9G1
zPlD_(?z!WeJfuO~BS=h-1~+H;nt?%8tJ;%Q=iMm+JwwW!;{dn6+*X4d@_)^d*XX_+
z*_RcujaMI5`+6sq4_94f7xOdU<^q8rx0U##pJjwQfarHh*mL&^1QCxwAoz$a`j5S&
zL){t#g4X1=+k08Y^WB2MA8n2=f5x3`AnxoBlCs*1J8y&1z@6LW96z&@N+1OPr(P#t
z10N5VjQuh-1z+v2vmc?R((`;iM<h;A2JF=a@B@KlLzQf7)cKRyo1t4adMYBWqc!0!
zs#(@(8N)~A7k`#o{<jI$KkBS3Ok!KVcBB|m`E{46Oupp)k}vB^#J2TU%oGH5XL};F
zi*_%5uGD?5jZ+O-^As`Xog{Z=Dz#F`1CK#%2Q!>;`6t?Df}dW%q1T&wQl`$}(5-qn
z&m()eiYv=)1N6=-KRxty8q)!)=F&!#rM=8%-stP*jqM5cmfE7+rL&>ay1Di$)^mK9
z6YKWRhjsHJteShxhqFZf%D%He3FD*?PG4GAL-vuOV+^IcEG?8buOzrIMnXF&4@H@O
zoa>923mcVPiATD+&5YdN%Z#cSFPyd%thwFf(<`N8fDl)Ulxl{^&qG!jWiZ!Obk8Rh
zlN9V`u*5U|*5efcFn-BNhCP@=S#F!5F&<wmtGx~?3d>bRzl$Lv3t=b9H-8xP4n)oS
zq_lA;j+>XtUZ3rjx7j0rdN6%jirbaB%%V0ZqgC^Cmr}=R9I5%?Y;Ao(N*gD%XsJAf
zoWH#}1mkt>Q2D8M>FVaFK4UGb9g^8Zg<e52@Fxr8kqbz$TnVZ>ka;GXi+vSu_&M8d
z-G46;5np1;po;jWOQa>Z)fefd=u208nsC3+pTHwAaT@okc_QT7`D{WH@AXv)gElV}
z?C_}8j^>@7#S2%vA9NgMx#k_ZFtL9(qd5_FV7US#76-`MR|$~_PvR~(O>5uaH~S$x
zC%4{9E?p-m8*cio41t(4Kcj`M^ffi4s9c?o%6(}nhwLa<u*(32!hHw$(aC`ap1Or)
zxfr9<>`pw_NS$Mgz3A=3%bR-+p$b*%kdiQj7KPaiY+JnMyKI$(@l`>xivVw`{rU-0
zr<Samp^O+|>$I_t7${-lvYBZ*l=p$JMM8uSv)*EGhpq5iA!+$jge~|J_>!ejg*T{Z
zPT>#Uy_p3fkZh)SH&rngGhoyu6C93lX2iRNNnb&)7r(SrpoQoz68F84#)Fj2@R62m
z_DLDBUoYnT=L+ch60O5CCmP&0k;{;Dd{kNzu;?8Siz^45e!Bv-wNCT;!+8+SCkUcG
zI%#}tXPilxsc^zSN|*D<T2E=&D)Sj_@b{pElg(hYK@`%DDO^HVInNmneMuPEYjb6`
ztBxP$K2bn1Z^1sPp>P01|As;x3FlW1@D#@BxS)oIa!je_r8b;)!LwB<SDs6e_q|nR
ztVvv!82oc&mF0`HQdb@R@Gn?-9>bj>h!U{2iKR^)RfFOYq6acHPiqa<_jgfvor=fO
zJ(}ytnm6s&+s*y%$RIW2_%hc8o(Bg7i*xyK*>4B9k*Jth?p6T1ecI!MqPE$Ew!v4q
zJ2v@Vuav{oBV#0O>wRy1a4Bj=s7YLR`)J57+8vm`+M{sw(W@e6NRVqr_V$dEeU$Uj
zSLvmF%?kx?6OA7|$eO<p?=uI=bTRf_<bYy|dZL5GT?=!Z#aGGep(3zRe`{!X)lwDd
zWhrFw?Lq#GcH>o3^VRV{VrGw*LfFvQC7%%8(<NnI^`)CnCL?{!>Nev46z7gJ^)fBp
zjK5F9y7onS#GOT|C6h;BS&pJ!E=MK#i^{y7UF7jm91GyZ%OFj*rsZpbVt-+q%@wpk
zzfP&aj-vl!49*%+b=gFvDd`QxFI4+7F-WOS2}vp{0X7E47_!`@S&(C9-R3<KIuRv3
z$Ug44TpMD-9~9i2mC%0uYS!an(#vYLELhv(@`zNEHL}}$^fJ?A2=6eH3RYe?WqV3Q
zjZhMcB~>dTKiUG!${j~bvVRq41r)+KPE%y0{Cx?W1n1RoUN0;eJCk66=tacL`$SJY
zrKeDeF%!*wDPu5H-(V;A_&qI+0t+u>DLXd3+G|`fEqCJk?8;+gTKeQ#D^Bnc%=P4a
z-qJPYw*JQ)UMAVowaSK|Jb*u+eZf6$;CGS3qKXn6^tzi1a#`I@Jn7sv<KDLW(aNmG
z1JUgBzqE=xgXykI2;|Xq%iSbhr--|cMx#vYAP%S7%K4+p>RFqIf|;U-sy&%5G3=Y#
z#ILT{MZ}!c%JIOMDt_+A{y8p1fzM)xl<bi3kMLsqxzMdXwO^$6oH<$wr}PZ-z9d-Z
z&CY#pXi$}rbc#b}1|sH?uQ)$;qny4s8%A1v&6>Q4&`T;1is@E3VIQhciiJxBHD^V)
zpR_jaZz>-|e#wQcE2?1XFw(0fi@U^!F=6|;rblizXD=bV+=weY_#HdmU$i?_%o1u0
zwdio08G7f%8~t{`Wir?ZZo~!4LDTn|N%hLkU0AL1ZyYJh?P>NcX;vOfyr`I5IkN2<
z!`A?tRt#+jvl8iCU}-&#3knrdqVN-WHjOM}@}zxCo?-u3nO3e2`Bm6>E~9labYALo
z2WbXkUU2U}cD(j@nT9kQ_GU6_GsfN{Ux=f@&uv~>#w_;hwUFr6SsC`KXrDfn6xWoj
zxeQnxsjcp%o<{|TQa<cjjC^?2g0eDFzF8E*G42JkO)7AG;fmGAW+zW8uDo53ru_xY
zK@m&V$quD<8)1~~8Nx_)Z-e}58bR<^Q|cFXY1QD|+?a3HoU|(&4J@6?!{Z1H?LP)i
zfG`OeSPTAGUgpINb!d;PI4a`<3@nZX_pKu5)>jZ<QgKbU7TlcOevvF1kcC^bj;8r&
z{JIik>(`a7N!-6c2m)t6-5hJ5(*M}(8s(%L`m2(FT)|!2*R}KHe{9xYa4Yoq#m<1>
zo*)tF{;^KzS1j3ZrKhtbD8DiVWGD^Lt`Y_F|JW?kR*~2In-__O*FfrJh*7^11#Hd_
zsP2{fMVfcZ{mEBqzS;c8=7AIV<c+Jp(_s|#y+1?jKQ^aL5RAuvp@TXjZf9}0^$qs{
z71ez{swV_~!6*-+B*NL1Jc@|L-&MWvfs_5WvyKh%c)1lypll_d2@<|q^jyEOn`^mi
zC;EJg0trqo3m@(PM@F^&F0mBAt=5nRn^KUrfYc3SLgJ`Vlqm7TNgSKORY7Ick#q8Q
zK-E(N?eo4OuUgBm&gSu6D*SLaA#8vebv_eANo2%a3V?7scn<9*O>p89C*3>oGv0Ma
zagx}ytV6r`5nyx1d2@)hJm<q7TC#6GSKir$sq+{<c}R%x)th&(czRO!ClwW(N<n@l
zedtTP+ugU$!@DqLp30J_(m;27RfII~xCWg8iP$cuy*mNDzras`Obk?6t9M~i(p0u~
ziH4_iAhi4x`j<^oe@f%m3?LKlaH0=1(X<B&_Hs5qB;X+%PBMkOSBoj!Eyx09w<`d-
zeVAax5C`AKWH7u36AzHHU4jn$O;GFPnFJBTM@8mkM?tI8X)Hz3mWxj%=)x4k6)E?T
zS}!ZLrp`#OE=7En3b*@Mqrymo|5?}K(z11zF)p&k=9r_>Z?v#ZaXay%P0;zPj%bog
z&}=FcnS84hPI-HANu!i~bA|3VAUAQ6y+V37U%1Y?H%(Fu%+XOwUpzu4xt&Tu2=RLO
zH0gV_;zsjEg1~sl(#IaZvc|=BPY`_c@P1Q`&%eo6Gf}5D>uY+J_kJ7Ce6ZcOHw(ov
zzY~#=0u`gRyu?=AcDvltZn{&Z$*iGP%&bw&yfh=MsW>cW1Vb{MRaHs$El#dfqkq51
zp&ObPigg9#8)$de@{?Fx4)&!3IE_RGtrp~J$Ov<3i)o^hpYNZwaG76|N^Y09S`&#F
z9n-{`^N#B7FAXMPLjwznRJ*H@oa9YDY~0NbgO%^oPSOIX%qy2Ky3$um63WMM`AW*#
zn8k`GJ`mvehD8@l&?McQ3VDS4mwdFYMj#(9$jx~s)Yx!yd`Jc`tKn~EX;~AhvT11e
zf_7&CR=$=+=QfI;itL(*b~Fh*foSv_Hh~)%NF~n~HA8l~H2G(dQIqI^n91HyNbm}I
z^iL88@po~Ysf0t74jW$b$w4~C7@Gz*8bH6VEO5Zqn_(kO!K=$fb}4NzE-I)a3@b|7
zvl~Wp{mwr$9BM`_H&#x0;#*>Sr*ojKl%JX^nlzjW?=wJOS0mx+^x~Y0m$dxc+(=?b
znOP6=z;6KTQbR37M+5f7vXnpM$6HR$I-7TiPr6-4&8=H(4G{&9^!89aPakMe>dvR<
z<#|hdWS@>zAmsmO<RBXE%JyhV#Bx9xQxbdRcU{li;T=h1jdy?!$zavTowASoW*=q<
zSL&-RmV-@0?{r93mm<1+B7Qe2{V5*?*i^RT)Q<mVEeHz_qHcdisqXs?m8as;+Be@(
z*3L)#rm?(+FP|KcoCdM>@AfLeMA+tk`-2lv#jLCz9Lp<AAJ%DdvSsW7fg9x$agkAf
z{s2yd2n`|Ub3S*gvIEz|@=tzKo!xlMliT%o-z>{|LFi6+Cdj}3&3cBz7O%d!Qw%bc
zU$UNItxr!Xw-J|q^+Rr(IBwdSa*!JRlZAjP(5Z{3x>p7mfAh1mA|CW37_Q%ZYIQ7q
ztk$r-$Z!7hzd-(-&;9?S<ntHs@b%dnpO4(n%8F3n_uFN#jVaoGXUzYx{aQs$fd2<|
z*T&wWN+2%Kq3V`kvhxwjjT@aIV4<0{Et*OxYf;)-=07;bEB$Fm$Z|?r<XKPkho$@Q
zC8$D;FlzRidsWEoi|CuIkckNL2uOW9O`XDmf&GpSjRrpWtqtd=<`3sV?`dzj23l*S
z?aLKexzmEttuZ$$d2;LU=UWm!nx6%6!LA$MIK?qlo52&;#)bQ)>+P-&4%%zQaN^&T
z)0<!Bfhd`0uFwAb#OUX4{7SG~`q7GCMqa<$+|q}EHm&MZd6)H$Q8vt5e%1J1UG00d
zOIZ?-^s~4+83GQSAh8lbkL%QZ@Ps}r59Iy-o)%*JVIF=yE5i7l^(jfz$CRm&Gysnf
zA%<Q_?sQ4K)^tMVkKXg=Rs+BJqt{7$zzSLVp#fZpudN#6{>4xB)Z0#d9SLDa%*eb!
z007EB*1l=?C`(9(f$Svb_vy<A|MPrG;`3*^n@S^q7)pc?iV%Sbx6?)Tf0U4raNc8d
zDZFUId^}irt3MXcq_%<U=?Rup^4<EY!DQW9L!J0iH_R8+<hT9@^#O6-ek){+<j+S`
zD>>*wI@pp(laK2DyS5N0>ptFW>&AmkwU3li3;5xHy;vS6h2glY?31b*xCq}ZHh9jD
zHFZhxoQVrv2~(vg6Fa$ad|Frk;K1F|k=5yQj9HaDa{)Vqf`_k65L-v76uH)duvKzv
zS@Vi}01q)!Qo^$1j4)z6AwZWwM2^v*FL?QTm*;eMUdjt-r1mw|E|cNVRaewZf!g-;
z#mUG?O8xg%Z<{g;Ctc8PwkuUIbcF=d;&fgPHSJ*fTpM5`IIFa=^&MRH*!b)<sL`y2
z+HNn%Po*VrcEg=W-bgM+x)<e^_9&9<@A;=kA8Ph(@D<st2w$@(r7kYb&rNN(+6Va8
zQa>Lg2HLIm+ghPn`;)}X5Aee78O#SC{EDEI>a9X2<;FvNYQC{8nS`ziM#v{4jYOkL
z0$B6OwIeytP%%T8^3hr^SZ(m?oO4Dfs~JCE3-%e`WG!?fF@0kt6=v^clXY3#U+r7I
zRCL5V`DOD3)sLq;)sWhu*xFaCL#}1BLxDEsCD;jRURd2muQIPWEGkCXu0}36&ODS{
zvS`6Z1pW`wAeY2b#e%cDhBgW@LZe>!*KTZBIQDfdf~uM3JgDYL(7q}iD(W;D>CVYG
zK917=x}n>$M7%#n{l+||Mrv)Wgl9rlq3R-zBI5xn{bQ^7?_X{j(HDM_NftdvA#XU3
zUbt9f!`jWEd{p=CWL8=c=4-vPjct)KQmm<89<~`!qDoP{a3F5|KC|jz-#`^MCjeEp
z@o9Z9b!5!PM1|1+rcaKG)u5<oV!iFzN{QdSv3`w}&1EWaFy8nXqwDxF2d(Po@Z9GR
z%XvG*xZ_T^+Q!1vJiHHsG7X)*2elck`4h%pm1&Kpu8&dqR4MCa^Y2~W?krK)I-j|Y
zmu&~ET8D?G)h7MOP;TP(LLsD0SgWQ&@YoAoq-NBsghsMunA+ACW`C5YqhFvKOt4Px
zPSfz199!Q&0K~HD8CN>=%bMz$6%)%dEHw)j*bQ%9URy(Kp{mJQ%(3G>#?+x>VQXI=
zJ3+WNf7ESuS2@1laSR!V!zLo!ih{hhygu@@l8eI}#Z&l~p1@aw7G6HoTDgbnn=|Q7
z{2{JK{gOcc{Y8;C?(89-Y&gui?KK=~u5A`th@9*f?w9A&tscm9OIuFtZJIN9?VN+W
zgF#iZmc!oXUfJHB4-Xfa2^c536bu@%)+2F25;)|?>#&O36C9`bvo(cXCO4<0R&rB!
z+AWBv;`S;@XQm`_t5LhOZ3Bne3NMz(Y?)<U%s$yBJ7=yLE}--tf@%6w0j2UvbM?Sw
zG<#w(oLJ^}9cOg`Rk}m6_=<8I!EGqc!9(%r{wff?ZM3h&wQTjzWsz&kxZ;wFv)^R8
zwNT_PpKVFV)Nz;M#J*4KkE7Tm>vXRoc#8Nt5Lwl6IK`}jS>KYyWwPV^0n=s=$yY>X
zHs_f_FY7ChF?kB7tNn7uk_tk<E3QnA7C9F2H}&vVwTqkM&oAl{xhIR%`jR+Q=H;33
z63FwI=<WB4s&VBZ^QoE;a<R$I6ZlyHODbQVJ>e>jlodXI=9msjQ73gHqSxpWsG#xc
zu2QO>gsSP7ZEsEFb?Aqf7AxeVD3ddpcgW$kJPEh-?n*tIA6CiNwwB6wd?k*F-ELdD
z5Qv3`z6^B>9xI<sm@#RY^C&JWR49ziV<Uf8jy;vUp;GKuKJgTJ`D+yWWPo0MN~uOn
znNN7t+)6x!BTjzhLN#m+gx+IPaa#R^ms`hn?Oj-2uFqjJ=}1)4HK@)&jR~T+)XXEv
zGAp^TJ+#ytx9mFK9R97P1yKj<uMLicrJ;)X$#GOAf*-YhP+LyF*QnUp(LBdj$UnHx
zpN^sey)homXo=WPdePpqhMcW-2HY7cfc00kyfU$lJB5@$wl0L4G@V{AG*FydR*Wt2
zjuYv`O-6+%A4n-InF}oCGjBgLdwpPoa6Y|K852h&bqv^X+XrV%TXcK3J=xA9e^cNi
zKY?dHZ0C=6dj!vwmkg4WvMOeeJ$5s!i$k|s2||FWjp<Sm<*Zr9Yt&4pzrUD!@cjWv
zQF1j@_bny!Y0rja4U^5>mC{8~h;1B{TrOoTJ_mDiGomXc=6?IU@IIILDySTJb81D=
zg~^?}qetPifw+H+?}w~{bv@e#LrQLaa<Jm~g)l{a+oF=qX!6U=4PLJ)o(`Euf4aDh
zD&t{1pr>Ae_XU05Cvd3qwm>yHI_X1=009P3cC4i0Pkbx>V~QJ^-ji>_3sI72gQW-%
z9zq(Xj-r#BpU%im8R^hVU@4_$4fY>TjqWc~k%I)gB^h8ZqqV9BTb{*$;>nP-WkvX`
z)wXFRl65|9G7{8(oKN#L(C@im>S03}oLbb~C2#)jr!(cIioDD}r$pl2Fy}udEXU7O
zo`|!(w;OeQ)OzicU~I^kR+l(@L$b|pZmGCsikPGc3I@AlBm~?o<$b!0o{?cs-LeGY
zj1KR9PLFpW3g<ytMM5iET5Vj85LNLr@FmJ$QOwM4gpo&Idqqu4)*j{Kx_8cb)|rtP
zl~*QSF#DnF@NY(l&obSbgZ4rkt>jDq)l;$8Y$QQKh<0a5<iBtoj!cnqcM?%v4ZJ0i
zUS{_*P`W9SzQDA+EJ*)v^yGH+US@h?kj|$MdE316f1PfgGIMr|V7+fXj5B0Cc>H5H
zms5W)bJ%Ix5BfTJ7>$vYhcy_k&d@ASf<jxFqSsqr2-6=0)fWb*BR8rBMNldkhDg(W
zIKF6zmzl^lE3}SY<Bd-p=g$#aX_W|DzK{QEut1?oB7$AXynY`4(L0H^^pGw>sQ#8P
zXrQZf3TwQ6t17bLR)j08h#=bhw~h#=2Z|DdxPPxy#k>9YK+xm*FAewldjA!h-IgLK
zVgBDV<vD-I*!H<KC+bSe>#UP%JxK-kT^>D#7g-)U0LFo@(6uZph4Y<Nc&wfPDhUZ4
znCF6@)WCcPmCNJCBQ3wfMIU$sKM8;jpL3+9Qox8v%2UsMbSy6;z_js=lN_x!bXtCr
z7l%L>TLb(kWWiVuN}&zsJnKOZeGz<7Ht2l?YQQDIp&Y#QvS2RM-EX=fO&&GtqVSA~
zegllUZ(4Rp;OTMhfs|)T^k+cHRLqX&Q8K77-^$Gqq8E4#0p~&PY@7j;CCNg%HsD<Z
zm_JcE%pWTTHj7y@Jffv#$bjC3;}<`_(g$-Y9}%!#mhV|KsM)YcIjM_~hRB<@P%O9O
zKw9nbkz=6)4D591)$XHZFah(nX0I8TZh*?O61N~Nc)Y+0Xu$aDy-gZu9;eA~gP9CV
z@P$qIj45ann>DL5G1FOtt7_^OLqBrkR;sc-9H1Ko^GT!PU-L!o!R4B^^!Vr~tm<e=
z>5)?%pk)l&&d2FkES`e%SY&Naf?2TWKcMI61<pODL1kW!tF8i@tBUC-!K;~0@TZff
zXO}1-_V;&EZVb!d&XwkO!>RnJQH<hwU4{$55y{rTnF7FsEN{d+2|$WaK>lqR2l^#2
zp0&;t3Er`s0JDsT)uB@p0MCg(r&;J&{seUL5j86C1H@T5=@`N?2(D=8dN}Vkq*Yz9
z|E40#_lJO5H=#8u%#emziqi_q%VfYZKWC0X1;9d|H#uOq=QR)5v|Bz0KqSL-;o$NE
zfNuNv^ozjx|A>>8Z1?9zQ*cvX5^RL!JFrl*ArW%YV1P0H;jJ{5+p&NRciK4SIl$hl
z4}-x=CK3RYr2B>j3E06$D<lZmFbNzF)=B66S4NZ5{|{61ZeNHK*&(E!sfZgKYk}j`
zC3m&npkiZm)jLNUaG*E+;9m2f9gH`99c1OCV@bUTsuXuMdt3lEF3I;Iz^r>b4J!76
zyhjoM2l16dj$RQkOUeFotR6GY9sb8NVR{#lAAR%6d||VP=a1S4|EOvB!wOAZdOJQh
z7fw-9dl`BthMDdxxZ$kemji%02O?U+7nZ)5@8-oVJBIVj=F}hQ_aVVwnOhXLipImk
z{q4Ut3Vh-M%pHo7vSaYo``i+~)MfCJb*79u7Od2z(^!u`OeX<kN1~Jq_DH>eK5RGJ
zE>NXXGHsw%O^EG^a0m9`X_UX31Y~%d_54MKN)3UzTUF899^>GL{zKA3S~R$;T)QJR
zMaMst_BB}gl^2~oxGz;3U{9~*!=V0ojlME{n>{=D@pu~_zr-<ipl$324EzDnZqN;V
z+!>>;>4vcfbDWep1IQs}|6GE3zR%pAH=y;d({rlRbE5KNc(C0lhL}IKG0}E-?A&M0
z?`xc&@PYWVkl`hgtg0NO;~<kNoI+(1AYhKmw0fif{;RzeGV15RRj22222O&83?m2Q
z>h6L=$0^{M*KWxpWo-A6SC(pM(DE@gFefB>a`XHBSy6$1_L`+uLJ8J2?nm(1YHH`}
zcVCI6oVDlUQwt0ErpkT?5Dnr08KHujuh<9tbyVNA)g)8-laDHami>MGoc2A}le5PQ
z{mO?vlEmy<mQSLa=P2eMyx5h^>}P$cU|P9ha&Vw+NJc3OS&uBMR7Q&QPlf<X0Hr<k
zWe3caD`oC87bA#R9`5U2sv26$^PwV5?G<$E%WWvVW6}mt?%|@+P0wsaOj(J9cS<l1
z&ngh(Z4nDdJJ%_~cA#gHv34h&-a!XvtJ{iJFH4n#+bl$4k3q@R*OjiPG=#4z$R17c
z;sJ!$exp@O1%)*vvBh-$n@&Gk&%cnXac;fYKaH&b=_SGiO;64f$Zww<z&mr7Vu9-K
z92aN385=(nuwzY`Q^jF2UqHFT{kiZGmIF%&F0~}L5lX&*iQLLDd~R)zpG^yBfuZik
zds0D=7OJpX5+;)5z;kUxDt{5oM)`ziZr<nLa#*E!Z`I2s&8S)$%))ziYE{9em28K2
zQP&taGx1%U>r8^1RkEGy>tv4;g)P!%+a@_i=+c5<SXtpB2dtQP)ecD4->5WaY?`&4
z7dAMe)2+9Ex-6~_b9Ua!^jk_>QJH^_+AE#?g%%59uo?vaw7l{oQN(J87a;uKtTQ0K
z>C=H!tTh;9Yc90Cwe)^W(!Td9p&h(Db8IMuS-qZ<lQ4wU^I@IAfDe7lgU#J%2fjyN
z(9>!BOB=VY3p$<*dVnQ=i%Nly0F*@(%#8nyRdl}5y~_^Z;*#^UYC+4lYkjA?zmIEx
z{+ow<wS2Zpu<S@<ppWRW%|RG+Y&{$F3p4kfj!-uOZ@9J?T_YhLIMsk3pJT3ND+fy3
zGzB4QLpN8RZR*BEs**y?y!-d#*z|MhAHTT(-fuZgWPnOOsTrN|KsQrypmC~RfH2LY
z#Yi6oWEmkma#^U)z|4N0<Z3746xv6oj_6}+5Azk3`PG-L0wEofQOfuGR8QRLUi4Ki
z#d>W!G5vdZLl_-T!Y4scP%{du@1OVVGgufIYk?(sf_VT7)EQl9dbRoXV8O7?C%%@>
z$<&bS$qhUQDzh^pQT_R@XV~5T6w2<OTb?y%eVZ-oAt?xE9D{I-F+sno@o?gTHMA6Z
z)n-fv;ki%}X;&GKMgY3|HNCGfR3ye1!=KF=pR|@LwW;&2Z|F1VnW!{rI!>vYn)XS_
zn;iLj>h0|6jNrcrcR=fxw7x!tPZ}75VLbgFSfWRw7uWbi45|+lqHN`6J3tew+3C=~
zI9l6ZN*pw1%tuEnVMOtjc8y4T;#KXUe}~`VLcQ&<OAq1yFu6aT{yOLEp2#XCPm#xm
zH?rObOk!e3m2|o%mgh`w?zj-{OnMb7#~vg5G|%}wg8w59wsPzGI47NqvDm8@&pevq
zXyNix(e2rOUzUuR+bk3q4R_=B|A6Gj{!w4p%bPt}kLUb_n(m9~s5mHb+y?_YVeeM9
z`IuyhEM&TlJ5x$lyp_0S5y*8O8M}nYJ`b_J5X;I#*8|*PJ&t+(O?V_Q0R}{M9f50!
zzzE^a#!pSdMv1>N+I{h|>JR$~@Cc|!;VCP_2@slSFX}=9H!M~aE~7PiMBfUY1A$a&
z`qoqCt(1UYw89d##j2g9+8^5a^k2mw3#(1-qe6G9<bMlxGNk1Ssvz!vAb8t979P>!
z)v5S5zHGN!re18HKDY1ZqfGTo5c6e{-@W|#2yPz;X6|di5B+=`Dgu<3Sby%!-qP=P
zfst}J_Ka?C%(WNz+5S4om_vJS?snglC|O*||M^fFv8&dlhjaIyb4P&5biz@#_|re%
h-2J~^7eQq{vyF~0S-55h9;VZ1YZzQ9z2tE3{{ng{aTNdn

literal 0
HcmV?d00001

diff --git a/base/powermgr/powermgr_lite/interfaces/kits/battery/js/builtin/BUILD.gn b/base/powermgr/powermgr_lite/interfaces/kits/battery/js/builtin/BUILD.gn
new file mode 100644
index 00000000..5c94b1a5
--- /dev/null
+++ b/base/powermgr/powermgr_lite/interfaces/kits/battery/js/builtin/BUILD.gn
@@ -0,0 +1,34 @@
+# Copyright (c) 2021 Huawei Device Co., Ltd.
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+import("//build/ohos.gni")
+
+ohos_static_library("libnativeapi_battery_simulator") {
+  public_configs = [ ":nativeapi_battery_simulator_config" ]
+
+  sources = [ "src/battery_module.cpp" ]
+  include_dirs = [
+    "//third_party/bounds_checking_function/include",
+    "include",
+    "//foundation/ace/ace_engine_lite/interfaces/innerkits/builtin/jsi",
+    "//foundation/ace/ace_engine_lite/interfaces/innerkits/builtin/base",
+  ]
+  cflags = [ "-Wno-unused-variable" ]
+  deps = []
+}
+
+config("nativeapi_battery_simulator_config") {
+  include_dirs = [
+    "//base/powermgr/powermgr_lite/interfaces/kits/battery/js/builtin/include",
+  ]
+}
diff --git a/base/powermgr/powermgr_lite/interfaces/kits/battery/js/builtin/CMakeLists.txt b/base/powermgr/powermgr_lite/interfaces/kits/battery/js/builtin/CMakeLists.txt
new file mode 100755
index 00000000..3c0fd090
--- /dev/null
+++ b/base/powermgr/powermgr_lite/interfaces/kits/battery/js/builtin/CMakeLists.txt
@@ -0,0 +1,35 @@
+# Copyright (c) 2021 Huawei Device Co., Ltd.
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+cmake_minimum_required(VERSION 3.16.5)
+
+project(nativeapi_battery)
+
+set(MODULE_NAME nativeapi_battery)
+
+set(CMAKE_CXX_STANDARD 11)
+set(CMAKE_CXX_STANDARD_REQUIRED ON)
+set(CMAKE_INCLUDE_CURRENT_DIR ON)
+
+# header files
+include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include
+                    ${CMAKE_CURRENT_SOURCE_DIR}/../../../../../../../third_party/bounds_checking_function/include)
+
+# source files
+aux_source_directory(${CMAKE_CURRENT_SOURCE_DIR}/src BATTERY)
+
+add_library(${MODULE_NAME} STATIC
+    ${BATTERY}
+    )
+target_link_libraries(${MODULE_NAME} ui jsfwk)
+target_include_directories(${MODULE_NAME} PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/include)
\ No newline at end of file
diff --git a/base/powermgr/powermgr_lite/interfaces/kits/battery/js/builtin/include/battery_impl.h b/base/powermgr/powermgr_lite/interfaces/kits/battery/js/builtin/include/battery_impl.h
new file mode 100755
index 00000000..31adcb92
--- /dev/null
+++ b/base/powermgr/powermgr_lite/interfaces/kits/battery/js/builtin/include/battery_impl.h
@@ -0,0 +1,35 @@
+/*
+ * Copyright (c) 2021 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef BATTERY_IMPL_H
+#define BATTERY_IMPL_H
+
+#include <stdint.h>
+
+#ifdef __cplusplus
+#if __cplusplus
+extern "C" {
+#endif
+#endif /* __cplusplus */
+
+int32_t GetBatteryStatus(bool* charging, double* level);
+
+#ifdef __cplusplus
+#if __cplusplus
+}
+#endif
+#endif  /* __cplusplus */
+
+#endif /* BATTERY_IMPL_H */
diff --git a/base/powermgr/powermgr_lite/interfaces/kits/battery/js/builtin/include/battery_module.h b/base/powermgr/powermgr_lite/interfaces/kits/battery/js/builtin/include/battery_module.h
new file mode 100755
index 00000000..975c86be
--- /dev/null
+++ b/base/powermgr/powermgr_lite/interfaces/kits/battery/js/builtin/include/battery_module.h
@@ -0,0 +1,35 @@
+/*
+ * Copyright (c) 2021 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef BATTERY_MODULE_H
+#define BATTERY_MODULE_H
+
+#include "jsi.h"
+
+namespace OHOS {
+namespace ACELite {
+using namespace OHOS::ACELite;
+class BatteryModule {
+public:
+    BatteryModule() {}
+    ~BatteryModule() {}
+    static JSIValue GetStatus(const JSIValue thisVal, const JSIValue* args, uint8_t argsNum);
+};
+
+void InitBatteryModule(JSIValue exports);
+} // namespace ACELite
+} // namespace OHOS
+
+#endif  // BATTERY_MODULE_H
\ No newline at end of file
diff --git a/base/powermgr/powermgr_lite/interfaces/kits/battery/js/builtin/src/battery_module.cpp b/base/powermgr/powermgr_lite/interfaces/kits/battery/js/builtin/src/battery_module.cpp
new file mode 100755
index 00000000..6083bc13
--- /dev/null
+++ b/base/powermgr/powermgr_lite/interfaces/kits/battery/js/builtin/src/battery_module.cpp
@@ -0,0 +1,65 @@
+/*
+ * Copyright (c) 2021 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "battery_module.h"
+#include "battery_impl.h"
+
+namespace OHOS {
+namespace ACELite {
+using namespace OHOS::ACELite;
+void SuccessCallBack(const JSIValue thisVal, const JSIValue args, JSIValue jsiValue)
+{
+    if (JSI::ValueIsUndefined(args)) {
+        return;
+    }
+    JSIValue success = JSI::GetNamedProperty(args, CB_SUCCESS);
+    JSIValue complete = JSI::GetNamedProperty(args, CB_COMPLETE);
+    if (!JSI::ValueIsUndefined(success)) {
+        if (JSI::ValueIsUndefined(jsiValue)) {
+            JSI::CallFunction(success, thisVal, nullptr, 0);
+        } else {
+            JSI::CallFunction(success, thisVal, &jsiValue, ARGC_ONE);
+        }
+    }
+    if (!JSI::ValueIsUndefined(complete)) {
+        JSI::CallFunction(complete, thisVal, nullptr, 0);
+    }
+    JSI::ReleaseValueList(success, complete, ARGS_END);
+}
+
+JSIValue BatteryModule::GetStatus(const JSIValue thisVal, const JSIValue* args, uint8_t argsNum)
+{
+    JSIValue undefValue = JSI::CreateUndefined();
+    if ((args == nullptr) || (argsNum == 0) || JSI::ValueIsUndefined(args[0])) {
+        return undefValue;
+    }
+
+    double level = 0;
+    bool charging = false;
+    (void)GetBatteryStatus(&charging, &level);
+    JSIValue result = JSI::CreateObject();
+    JSI::SetBooleanProperty(result, "charging", charging);
+    JSI::SetNumberProperty(result, "level", level);
+    SuccessCallBack(thisVal, args[0], result);
+    JSI::ReleaseValue(result);
+    return undefValue;
+}
+
+void InitBatteryModule(JSIValue exports)
+{
+    JSI::SetModuleAPI(exports, "getStatus", BatteryModule::GetStatus);
+}
+} // namespace ACELite
+} // namespace OHOS
diff --git a/base/powermgr/powermgr_lite/services/BUILD.gn b/base/powermgr/powermgr_lite/services/BUILD.gn
new file mode 100755
index 00000000..43c135d3
--- /dev/null
+++ b/base/powermgr/powermgr_lite/services/BUILD.gn
@@ -0,0 +1,68 @@
+# Copyright (c) 2021 Huawei Device Co., Ltd.
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+import("//build/lite/config/component/lite_component.gni")
+shared_library("pmslite") {
+  cflags = [ "-Wall" ]
+  cflags_cc = cflags
+  sources = [
+    "source/power_manage_feature.cpp",
+    "source/power_manage_service.cpp",
+  ]
+
+  include_dirs = [
+    "include",
+    "//drivers/peripheral/input/interfaces/include",
+    "//third_party/bounds_checking_function/include",
+    "//utils/native/lite/include",
+    "//foundation/distributedschedule/samgr_lite/samgr/adapter/",
+    "//foundation/distributedschedule/samgr_lite/interfaces/kits/samgr",
+    "//foundation/distributedschedule/samgr_lite/interfaces/kits/registry",
+    "//foundation/distributedschedule/samgr_lite/interfaces/kits/communication/broadcast",
+    "//foundation/distributedschedule/samgr_lite/samgr_endpoint/source",
+    "//foundation/distributedschedule/samgr_lite/interfaces/kits/registry",
+    "//foundation/distributedschedule/samgr_lite/interfaces/kits/samgr",
+    "//foundation/communication/ipc_lite/interfaces/kits",
+    "${aafwk_lite_path}/interfaces/kits/want_lite",
+    "${aafwk_lite_path}/interfaces/kits/ability_lite/include",
+    "${appexecfwk_lite_path}/interfaces/kits/bundle_lite",
+    "${aafwk_lite_path}/interfaces/kits/ability_lite",
+    "${aafwk_lite_path}/frameworks/ability_lite/include",
+    "${aafwk_lite_path}/interfaces/innerkits/abilitymgr_lite",
+    "${aafwk_lite_path}/interfaces/kits/ability_lite",
+    "${aafwk_lite_path}/interfaces/kits/want_lite",
+    "${appexecfwk_lite_path}/interfaces/kits/bundle_lite",
+    "${appexecfwk_lite_path}/interfaces/innerkits/bundlemgr_lite",
+    "//foundation/graphic/ui/interfaces/innerkits",
+    "//foundation/graphic/ui/interfaces/kits",
+  ]
+  defines = [
+    "ENABLE_WINDOW=1",
+    "ABILITY_WINDOW_SUPPORT",
+    "OHOS_APPEXECFWK_BMS_BUNDLEMANAGER",
+  ]
+
+  deps = [
+    "${aafwk_lite_path}/frameworks/ability_lite:aafwk_abilitykit_lite",
+    "${appexecfwk_lite_path}/frameworks/bundle_lite:bundle",
+    "//base/hiviewdfx/hilog_lite/frameworks/featured:hilog_shared",
+    "//foundation/communication/ipc_lite:liteipc_adapter",
+    "//foundation/distributedschedule/samgr_lite/samgr:samgr",
+    "//foundation/graphic/wms:lite_wms",
+    "//third_party/bounds_checking_function:libsec_shared",
+  ]
+}
+
+lite_component("power_manage_service") {
+  features = [ ":pmslite" ]
+}
diff --git a/base/powermgr/powermgr_lite/services/config.gni b/base/powermgr/powermgr_lite/services/config.gni
new file mode 100755
index 00000000..4b2c6e4c
--- /dev/null
+++ b/base/powermgr/powermgr_lite/services/config.gni
@@ -0,0 +1,17 @@
+# Copyright (c) 2021 Huawei Device Co., Ltd.
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+
+declare_args() {
+  enable_screensaver = false
+}
diff --git a/base/powermgr/powermgr_lite/services/include/power_manage_feature.h b/base/powermgr/powermgr_lite/services/include/power_manage_feature.h
new file mode 100755
index 00000000..48e505fc
--- /dev/null
+++ b/base/powermgr/powermgr_lite/services/include/power_manage_feature.h
@@ -0,0 +1,99 @@
+/*
+ * Copyright (c) 2021 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef POWER_MANAGE_FEATURE_H
+#define POWER_MANAGE_FEATURE_H
+
+#include <pthread.h>
+#include <log.h>
+#include <ability_info.h>
+#include <ability_slice.h>
+#include <bundle_manager.h>
+#include <element_name.h>
+#include <module_info.h>
+#include <want.h>
+#include <components/ui_view.h>
+#include <unistd.h>
+
+#include "feature.h"
+#include "iunknown.h"
+#include "ohos_init.h"
+#include "samgr_lite.h"
+#include "iproxy_server.h"
+#include "iproxy_client.h"
+#include "hilog/log.h"
+#include "app_info.h"
+#include "ability_context.h"
+#include "ability_service_interface.h"
+#include "input_event_listener_proxy.h"
+#include "power_manage_service.h"
+
+static const char * const PERM_INNER = "power_feature";
+
+namespace OHOS::PowerMgr {
+typedef int32 (*InvokeFunc)(const void *origin, IpcIo *req);
+
+enum PowerApi {
+    LOCK_INVOKE,
+    UNLOCK_INVOKE,
+    IS_ALWAYS_ON_INVOKE,
+    FUNC_SIZE
+};
+
+class PowerManageFeature : public Feature, public InputEventListenerProxy::RawEventListener {
+public:
+    static int32 Invoke(IServerProxy *iProxy, int funcId, void *origin, IpcIo *req, IpcIo *reply);
+    static void AcqurieLock();
+    static void ReleaseLock();
+    static int32 IsAlwaysOn();
+
+    ~PowerManageFeature() = default;
+    static const char *GetFeatureName(Feature *feature);
+    static void OnFeatureInitialize(Feature *feature, Service *parent, Identity identity);
+    static void OnFeatureStop(Feature *feature, Identity identity);
+    static BOOL OnFeatureMessage(Feature *feature, Request *request);
+
+    class UserActivity : public InputEventListenerProxy::RawEventListener {
+    public:
+        void OnRawEvent(const RawEvent& event)override;
+        static UserActivity* GetInstance()
+        {
+            static UserActivity activity;
+            return &activity;
+        }
+    };
+
+private:
+    static int32 LockInvoke(const void *origin, IpcIo *req);
+    static int32 UnLockInvoke(const void *origin, IpcIo *req);
+    static int32 IsAlwaysOnInvoke(const void *origin, IpcIo *req);
+    static InvokeFunc invokeFuncList[FUNC_SIZE];
+    PowerManageFeature();
+};
+
+struct PmsInterface {
+    INHERIT_SERVER_IPROXY;
+    void (*Lock)();
+    void (*UnLock)();
+    int32 (*IsStayOn)();
+};
+
+typedef struct {
+    INHERIT_FEATURE;
+    INHERIT_IUNKNOWNENTRY(PmsInterface);
+    Identity identity_;
+} PowerMgrFeatureImpl;
+}
+#endif
diff --git a/base/powermgr/powermgr_lite/services/include/power_manage_service.h b/base/powermgr/powermgr_lite/services/include/power_manage_service.h
new file mode 100755
index 00000000..529f391d
--- /dev/null
+++ b/base/powermgr/powermgr_lite/services/include/power_manage_service.h
@@ -0,0 +1,50 @@
+/*
+ * Copyright (c) 2021 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef POWER_MANAGE_SERVICE_H
+#define POWER_MANAGE_SERVICE_H
+
+#include "service.h"
+#include "ohos_init.h"
+#include "samgr_lite.h"
+#include "hilog/log.h"
+
+static const char * const POWER_MANAGE_SERVICE = "power_service";
+
+namespace OHOS::PowerMgr {
+class PowerMgrService : public Service {
+public:
+    static PowerMgrService *GetInstance()
+    {
+        static PowerMgrService instance;
+        return &instance;
+    }
+    PowerMgrService(const PowerMgrService&) = delete;
+    PowerMgrService& operator=(const PowerMgrService&) = delete;
+    PowerMgrService(PowerMgrService &&) = delete;
+    PowerMgrService& operator=(PowerMgrService &&) = delete;
+    ~PowerMgrService() = default;
+private:
+    PowerMgrService();
+    static const char *GetServiceName(Service *service);
+    static BOOL ServiceInitialize(Service *service, Identity identity);
+    static TaskConfig GetServiceTaskConfig(Service *service);
+    static BOOL ServiceMessageHandle(Service *service, Request *request);
+
+private:
+    Identity identity_;
+};
+} // namespace OHOS
+#endif
diff --git a/base/powermgr/powermgr_lite/services/source/power_manage_feature.cpp b/base/powermgr/powermgr_lite/services/source/power_manage_feature.cpp
new file mode 100755
index 00000000..0d6c3e13
--- /dev/null
+++ b/base/powermgr/powermgr_lite/services/source/power_manage_feature.cpp
@@ -0,0 +1,213 @@
+/*
+ * Copyright (c) 2021 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "power_manage_feature.h"
+
+using namespace OHOS;
+using namespace OHOS::PowerMgr;
+using namespace OHOS::HiviewDFX;
+
+namespace {
+static const int SLEEP_OUT_TIME_SEC = 300;
+static const int REGISTER_WAIT_TIME_SEC = 20;
+static const int POWER_ERROR = -1;
+static const int PM_INVOKE_SUCCESS = 1;
+}
+
+static int32 g_lockNum = 0;
+static bool g_isSleep = false;
+static int g_count = 0;
+static int g_targetTime = SLEEP_OUT_TIME_SEC;
+static pthread_mutex_t g_numMutex = PTHREAD_MUTEX_INITIALIZER;
+static pthread_t g_powerThread = -1;
+
+static void *SleepListen(void *args);
+static constexpr HiLogLabel LABEL = {LOG_CORE, 0, "PowerMgrService"};
+
+PowerManageFeature::PowerManageFeature() : Feature() {}
+
+void PowerManageFeature::AcqurieLock()
+{
+    pthread_mutex_lock(&g_numMutex);
+    HiLog::Debug(LABEL, "AcqurieLock.");
+    g_lockNum++;
+    pthread_mutex_unlock(&g_numMutex);
+}
+
+void PowerManageFeature::ReleaseLock()
+{
+    pthread_mutex_lock(&g_numMutex);
+    HiLog::Debug(LABEL, "ReleaseLock.");
+    g_lockNum--;
+    g_count = 0;
+    pthread_mutex_unlock(&g_numMutex);
+}
+
+int32 PowerManageFeature::IsAlwaysOn()
+{
+    HiLog::Debug(LABEL, "IsAlwaysOn.");
+    return g_lockNum;
+}
+
+void PowerManageFeature::UserActivity::OnRawEvent(const RawEvent& event)
+{
+    pthread_mutex_lock(&g_numMutex);
+    HiLog::Debug(LABEL, "User touch the screen, refresh time now.");
+    g_count = 0;
+    if (g_isSleep) {
+        g_isSleep = false;
+    }
+    pthread_mutex_unlock(&g_numMutex);
+}
+
+PowerMgrFeatureImpl g_pmsImpl = {
+    GetName : PowerManageFeature::GetFeatureName,
+    OnInitialize : PowerManageFeature::OnFeatureInitialize,
+    OnStop : PowerManageFeature::OnFeatureStop,
+    OnMessage : PowerManageFeature::OnFeatureMessage,
+    SERVER_IPROXY_IMPL_BEGIN,
+    Invoke : PowerManageFeature::Invoke,
+    Lock : PowerManageFeature::AcqurieLock,
+    UnLock : PowerManageFeature::ReleaseLock,
+    IsStayOn : PowerManageFeature::IsAlwaysOn,
+    IPROXY_END,
+    identity_ : { -1, -1, NULL },
+};
+
+InvokeFunc PowerManageFeature::invokeFuncList[FUNC_SIZE] {
+    PowerManageFeature::LockInvoke,
+    PowerManageFeature::UnLockInvoke,
+    PowerManageFeature::IsAlwaysOnInvoke,
+};
+
+int32 PowerManageFeature::Invoke(IServerProxy *iProxy, int funcId, void *origin, IpcIo *req, IpcIo *reply)
+{
+    HiLog::Debug(LABEL, "IPC Invoke called.");
+    if (req == nullptr) {
+        return POWER_ERROR;
+    }
+    if (funcId >= 0 && funcId < FUNC_SIZE) {
+        if (funcId == IS_ALWAYS_ON_INVOKE) {
+            IpcIoPushInt32(reply, g_lockNum);
+        }
+        invokeFuncList[funcId](origin, req);
+    }
+    return PM_INVOKE_SUCCESS;
+}
+
+int32 PowerManageFeature::LockInvoke(const void *origin, IpcIo *req)
+{
+    PowerManageFeature::AcqurieLock();
+    return PM_INVOKE_SUCCESS;
+}
+
+int32 PowerManageFeature::UnLockInvoke(const void *origin, IpcIo *req)
+{
+    PowerManageFeature::ReleaseLock();
+    return PM_INVOKE_SUCCESS;
+}
+
+int32 PowerManageFeature::IsAlwaysOnInvoke(const void *origin, IpcIo *req)
+{
+    return PowerManageFeature::IsAlwaysOn();
+}
+
+const char *PowerManageFeature::GetFeatureName(Feature *feature)
+{
+    return PERM_INNER;
+}
+
+void PowerManageFeature::OnFeatureInitialize(Feature *feature, Service *parent, Identity identity)
+{
+    g_pmsImpl.identity_ = identity;
+    HiLog::Debug(LABEL, "OnInitialize called.");
+    pthread_create(&g_powerThread, nullptr, SleepListen, nullptr);
+    g_lockNum = 0;
+    g_isSleep = false;
+    g_count = 0;
+    g_targetTime = SLEEP_OUT_TIME_SEC;
+}
+
+static bool GetAmsInterface(struct AmsInterface **amsInterface)
+{
+    IUnknown *iUnknown = SAMGR_GetInstance()->GetFeatureApi(AMS_SERVICE, AMS_FEATURE);
+    if (iUnknown == NULL) {
+        HiLog::Debug(LABEL, "GetFeatureApi failed.");
+        return false;
+    }
+
+    int32_t errCode = iUnknown->QueryInterface(iUnknown, DEFAULT_VERSION, (void **)amsInterface);
+    if (errCode != EC_SUCCESS) {
+        HiLog::Debug(LABEL, "QueryInterface failed.");
+        return false;
+    }
+    return true;
+}
+
+static void *SleepListen(void *args)
+{
+    sleep(REGISTER_WAIT_TIME_SEC);
+    HiLog::Debug(LABEL, "Register ims touch event now.");
+    InputEventListenerProxy::GetInstance()->RegisterInputEventListener(PowerManageFeature::UserActivity::GetInstance());
+    while (true) {
+        pthread_mutex_lock(&g_numMutex);
+        if (g_lockNum == 0 && g_count == g_targetTime) {
+            HiLog::Debug(LABEL, "Five minutes passed, It is time to call screen saver.");
+            Want want = { nullptr };
+            ElementName element = { nullptr };
+            SetElementBundleName(&element, "com.huawei.screensaver");
+            SetElementAbilityName(&element, "ScreensaverAbility");
+            SetWantElement(&want, element);
+            SetWantData(&want, "WantData", strlen("WantData") + 1);
+            struct AmsInterface *amsInterface = nullptr;
+            if (!GetAmsInterface(&amsInterface)) {
+                ClearWant(&want);
+            }
+            amsInterface->StartAbility(&want);
+            ClearElement(&element);
+            ClearWant(&want);
+        }
+        pthread_mutex_unlock(&g_numMutex);
+        g_count++;
+        sleep(1);
+    }
+}
+
+void PowerManageFeature::OnFeatureStop(Feature *feature, Identity identity)
+{
+    (void)feature;
+    (void)identity;
+}
+
+BOOL PowerManageFeature::OnFeatureMessage(Feature *feature, Request *request)
+{
+    return ((feature != nullptr) && (request != nullptr));
+}
+
+static void GInit()
+{
+    HiLog::Debug(LABEL, "SYS_FEATURE_INIT called.");
+    BOOL result = SAMGR_GetInstance()->RegisterFeature(POWER_MANAGE_SERVICE, (Feature *)&g_pmsImpl);
+    if (result == FALSE) {
+        HiLog::Debug(LABEL, "RegisterFeature failed.");
+        return;
+    }
+    BOOL apiResult = SAMGR_GetInstance()->RegisterFeatureApi(POWER_MANAGE_SERVICE, PERM_INNER, GET_IUNKNOWN(g_pmsImpl));
+    if (apiResult == FALSE) {
+        HiLog::Debug(LABEL, "RegisterFeatureApi failed.");
+        return;
+    }
+}
+SYSEX_FEATURE_INIT(GInit);
diff --git a/base/powermgr/powermgr_lite/services/source/power_manage_service.cpp b/base/powermgr/powermgr_lite/services/source/power_manage_service.cpp
new file mode 100755
index 00000000..142ca0e7
--- /dev/null
+++ b/base/powermgr/powermgr_lite/services/source/power_manage_service.cpp
@@ -0,0 +1,68 @@
+/*
+ * Copyright (c) 2021 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "power_manage_service.h"
+
+using namespace OHOS;
+using namespace OHOS::PowerMgr;
+
+namespace {
+static const int STACK_SIZE = 0x800;
+static const int QUEUE_SIZE = 20;
+}
+
+PowerMgrService::PowerMgrService() : Service(), identity_()
+{
+    this->Service::GetName = PowerMgrService::GetServiceName;
+    this->Service::Initialize = PowerMgrService::ServiceInitialize;
+    this->Service::MessageHandle = PowerMgrService::ServiceMessageHandle;
+    this->Service::GetTaskConfig = PowerMgrService::GetServiceTaskConfig;
+}
+
+static void GInit()
+{
+    SamgrLite *sm = SAMGR_GetInstance();
+    if (sm == nullptr) {
+        return;
+    }
+    sm->RegisterService(PowerMgrService::GetInstance());
+}
+SYSEX_SERVICE_INIT(GInit);
+
+const char *PowerMgrService::GetServiceName(__attribute__((unused))Service *service)
+{
+    return POWER_MANAGE_SERVICE;
+}
+
+BOOL PowerMgrService::ServiceInitialize(Service *service, Identity identity)
+{
+    if (service == nullptr) {
+        return FALSE;
+    }
+    PowerMgrService *powerService = static_cast<PowerMgrService *>(service);
+    powerService->identity_ = identity;
+    return TRUE;
+}
+
+BOOL PowerMgrService::ServiceMessageHandle(Service *service, Request *request)
+{
+    return (request != nullptr);
+}
+
+TaskConfig PowerMgrService::GetServiceTaskConfig(Service *service)
+{
+    TaskConfig config = {LEVEL_HIGH, PRI_NORMAL, STACK_SIZE, QUEUE_SIZE, SINGLE_TASK};
+    return config;
+}
diff --git a/base/security/appverify/LICENSE b/base/security/appverify/LICENSE
new file mode 100644
index 00000000..4a459866
--- /dev/null
+++ b/base/security/appverify/LICENSE
@@ -0,0 +1,177 @@
+
+                                 Apache License
+                           Version 2.0, January 2004
+                        http://www.apache.org/licenses/
+
+   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
+
+   1. Definitions.
+
+      "License" shall mean the terms and conditions for use, reproduction,
+      and distribution as defined by Sections 1 through 9 of this document.
+
+      "Licensor" shall mean the copyright owner or entity authorized by
+      the copyright owner that is granting the License.
+
+      "Legal Entity" shall mean the union of the acting entity and all
+      other entities that control, are controlled by, or are under common
+      control with that entity. For the purposes of this definition,
+      "control" means (i) the power, direct or indirect, to cause the
+      direction or management of such entity, whether by contract or
+      otherwise, or (ii) ownership of fifty percent (50%) or more of the
+      outstanding shares, or (iii) beneficial ownership of such entity.
+
+      "You" (or "Your") shall mean an individual or Legal Entity
+      exercising permissions granted by this License.
+
+      "Source" form shall mean the preferred form for making modifications,
+      including but not limited to software source code, documentation
+      source, and configuration files.
+
+      "Object" form shall mean any form resulting from mechanical
+      transformation or translation of a Source form, including but
+      not limited to compiled object code, generated documentation,
+      and conversions to other media types.
+
+      "Work" shall mean the work of authorship, whether in Source or
+      Object form, made available under the License, as indicated by a
+      copyright notice that is included in or attached to the work
+      (an example is provided in the Appendix below).
+
+      "Derivative Works" shall mean any work, whether in Source or Object
+      form, that is based on (or derived from) the Work and for which the
+      editorial revisions, annotations, elaborations, or other modifications
+      represent, as a whole, an original work of authorship. For the purposes
+      of this License, Derivative Works shall not include works that remain
+      separable from, or merely link (or bind by name) to the interfaces of,
+      the Work and Derivative Works thereof.
+
+      "Contribution" shall mean any work of authorship, including
+      the original version of the Work and any modifications or additions
+      to that Work or Derivative Works thereof, that is intentionally
+      submitted to Licensor for inclusion in the Work by the copyright owner
+      or by an individual or Legal Entity authorized to submit on behalf of
+      the copyright owner. For the purposes of this definition, "submitted"
+      means any form of electronic, verbal, or written communication sent
+      to the Licensor or its representatives, including but not limited to
+      communication on electronic mailing lists, source code control systems,
+      and issue tracking systems that are managed by, or on behalf of, the
+      Licensor for the purpose of discussing and improving the Work, but
+      excluding communication that is conspicuously marked or otherwise
+      designated in writing by the copyright owner as "Not a Contribution."
+
+      "Contributor" shall mean Licensor and any individual or Legal Entity
+      on behalf of whom a Contribution has been received by Licensor and
+      subsequently incorporated within the Work.
+
+   2. Grant of Copyright License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      copyright license to reproduce, prepare Derivative Works of,
+      publicly display, publicly perform, sublicense, and distribute the
+      Work and such Derivative Works in Source or Object form.
+
+   3. Grant of Patent License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      (except as stated in this section) patent license to make, have made,
+      use, offer to sell, sell, import, and otherwise transfer the Work,
+      where such license applies only to those patent claims licensable
+      by such Contributor that are necessarily infringed by their
+      Contribution(s) alone or by combination of their Contribution(s)
+      with the Work to which such Contribution(s) was submitted. If You
+      institute patent litigation against any entity (including a
+      cross-claim or counterclaim in a lawsuit) alleging that the Work
+      or a Contribution incorporated within the Work constitutes direct
+      or contributory patent infringement, then any patent licenses
+      granted to You under this License for that Work shall terminate
+      as of the date such litigation is filed.
+
+   4. Redistribution. You may reproduce and distribute copies of the
+      Work or Derivative Works thereof in any medium, with or without
+      modifications, and in Source or Object form, provided that You
+      meet the following conditions:
+
+      (a) You must give any other recipients of the Work or
+          Derivative Works a copy of this License; and
+
+      (b) You must cause any modified files to carry prominent notices
+          stating that You changed the files; and
+
+      (c) You must retain, in the Source form of any Derivative Works
+          that You distribute, all copyright, patent, trademark, and
+          attribution notices from the Source form of the Work,
+          excluding those notices that do not pertain to any part of
+          the Derivative Works; and
+
+      (d) If the Work includes a "NOTICE" text file as part of its
+          distribution, then any Derivative Works that You distribute must
+          include a readable copy of the attribution notices contained
+          within such NOTICE file, excluding those notices that do not
+          pertain to any part of the Derivative Works, in at least one
+          of the following places: within a NOTICE text file distributed
+          as part of the Derivative Works; within the Source form or
+          documentation, if provided along with the Derivative Works; or,
+          within a display generated by the Derivative Works, if and
+          wherever such third-party notices normally appear. The contents
+          of the NOTICE file are for informational purposes only and
+          do not modify the License. You may add Your own attribution
+          notices within Derivative Works that You distribute, alongside
+          or as an addendum to the NOTICE text from the Work, provided
+          that such additional attribution notices cannot be construed
+          as modifying the License.
+
+      You may add Your own copyright statement to Your modifications and
+      may provide additional or different license terms and conditions
+      for use, reproduction, or distribution of Your modifications, or
+      for any such Derivative Works as a whole, provided Your use,
+      reproduction, and distribution of the Work otherwise complies with
+      the conditions stated in this License.
+
+   5. Submission of Contributions. Unless You explicitly state otherwise,
+      any Contribution intentionally submitted for inclusion in the Work
+      by You to the Licensor shall be under the terms and conditions of
+      this License, without any additional terms or conditions.
+      Notwithstanding the above, nothing herein shall supersede or modify
+      the terms of any separate license agreement you may have executed
+      with Licensor regarding such Contributions.
+
+   6. Trademarks. This License does not grant permission to use the trade
+      names, trademarks, service marks, or product names of the Licensor,
+      except as required for reasonable and customary use in describing the
+      origin of the Work and reproducing the content of the NOTICE file.
+
+   7. Disclaimer of Warranty. Unless required by applicable law or
+      agreed to in writing, Licensor provides the Work (and each
+      Contributor provides its Contributions) on an "AS IS" BASIS,
+      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
+      implied, including, without limitation, any warranties or conditions
+      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
+      PARTICULAR PURPOSE. You are solely responsible for determining the
+      appropriateness of using or redistributing the Work and assume any
+      risks associated with Your exercise of permissions under this License.
+
+   8. Limitation of Liability. In no event and under no legal theory,
+      whether in tort (including negligence), contract, or otherwise,
+      unless required by applicable law (such as deliberate and grossly
+      negligent acts) or agreed to in writing, shall any Contributor be
+      liable to You for damages, including any direct, indirect, special,
+      incidental, or consequential damages of any character arising as a
+      result of this License or out of the use or inability to use the
+      Work (including but not limited to damages for loss of goodwill,
+      work stoppage, computer failure or malfunction, or any and all
+      other commercial damages or losses), even if such Contributor
+      has been advised of the possibility of such damages.
+
+   9. Accepting Warranty or Additional Liability. While redistributing
+      the Work or Derivative Works thereof, You may choose to offer,
+      and charge a fee for, acceptance of support, warranty, indemnity,
+      or other liability obligations and/or rights consistent with this
+      License. However, in accepting such obligations, You may act only
+      on Your own behalf and on Your sole responsibility, not on behalf
+      of any other Contributor, and only if You agree to indemnify,
+      defend, and hold each Contributor harmless for any liability
+      incurred by, or claims asserted against, such Contributor by reason
+      of your accepting any such warranty or additional liability.
+
+   END OF TERMS AND CONDITIONS
\ No newline at end of file
diff --git a/base/security/appverify/README.md b/base/security/appverify/README.md
new file mode 100644
index 00000000..e0cfc72a
--- /dev/null
+++ b/base/security/appverify/README.md
@@ -0,0 +1,8 @@
+# Application Signature Verification<a name="EN-US_TOPIC_0000001121676905"></a>
+
+To ensure the integrity and trustworthiness of the applications to be installed in OpenHarmony, the applications must be signed and their signatures must be verified.
+
+In application development: After developing an application, you need to sign its installation package to ensure that the installation package is not tampered with when it is released on devices. To sign the application package, you can use the signature tools and the public key certificates and follow the signing certificate generation specifications provided by the application integrity verification module. For your convenience, a public key certificate and a corresponding private key are preset in OpenHarmony. You need to replace the public key certificate and private key in your commercial version of OpenHarmony.
+
+In application installation: the application framework subsystem of OpenHarmony installs applications. Upon receiving the application installation package, the application framework subsystem parses the signature of the installation package, and verifies the signature using the APIs provided by the application integrity verification module. The application can be installed only after the verification succeeds. The application integrity verification module uses the preset public key certificate to verify the signature.
+
diff --git a/base/security/appverify/README_zh.md b/base/security/appverify/README_zh.md
new file mode 100644
index 00000000..c6e1d575
--- /dev/null
+++ b/base/security/appverify/README_zh.md
@@ -0,0 +1,8 @@
+# 应用签名验签子系统<a name="ZH-CN_TOPIC_0000001121676905"></a>
+
+OpenHarmony允许应用安装。为了确保应用的完整性和来源可靠，需要对安装的应用进行签名和验签。
+
+应用开发阶段：开发者完成开发并生成安装包后，需要开发者对安装包进行签名，以证明安装包发布到设备的过程中没有被篡改。OpenHarmony的应用完整性校验模块提供了签名工具、签名证书生成规范，以及签名所需的公钥证书等完整的机制，支撑开发者对应用安装包签名。为了方便开源社区开发者，版本中预置了公钥证书和对应的私钥，为开源社区提供离线签名和校验能力；在商用版本中应替换此公钥证书和对应的私钥。
+
+应用安装阶段：OpenHarmony程序框架子系统负责应用的安装。在接收到应用安装包之后，应用程序框架子系统需要解析安装包的签名数据，然后使用应用完整性校验模块的API对签名进行验证，只有校验成功之后才允许安装此应用.  应用完整性校验模块在校验安装包签名数据时，会使用系统预置的公钥证书进行验签。
+
diff --git a/base/security/appverify/interfaces/innerkits/appverify_lite/BUILD.gn b/base/security/appverify/interfaces/innerkits/appverify_lite/BUILD.gn
new file mode 100644
index 00000000..fe3cfcfd
--- /dev/null
+++ b/base/security/appverify/interfaces/innerkits/appverify_lite/BUILD.gn
@@ -0,0 +1,52 @@
+# Copyright (c) 2020 Huawei Device Co., Ltd.
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+config("app_verify_config") {
+  include_dirs = [
+    "include",
+    "//third_party/bounds_checking_function/include",
+    "//third_party/cJSON",
+    "//base/security/appverify/interfaces/innerkits/appverify_lite",
+    "//base/security/appverify/interfaces/innerkits/appverify_lite/products/default",
+    "//base/security/appverify/interfaces/innerkits/appverify_lite/products/ipcamera",
+  ]
+
+  defines = [ "PARSE_PEM_FORMAT_SIGNED_DATA" ]
+  cflags = [ "-Wall" ]
+}
+
+shared_library("verify") {
+  sources = [
+    "src/app_centraldirectory.c",
+    "src/app_common.c",
+    "src/app_file.c",
+    "src/app_provision.c",
+    "src/app_verify.c",
+    "src/app_verify_hal.c",
+    "src/app_verify_hap.c",
+    "src/mbedtls_pkcs7.c",
+  ]
+  configs += [ ":app_verify_config" ]
+  public_deps = [
+    "//base/security/appverify/interfaces/innerkits/appverify_lite/products/ipcamera:verify_base",
+    "//build/lite/config/component/cJSON:cjson_shared",
+    "//third_party/bounds_checking_function:libsec_shared",
+    "//third_party/mbedtls:mbedtls_shared",
+  ]
+}
+
+if (ohos_build_type == "debug" && ohos_kernel_type == "liteos_a") {
+  group("unittest") {
+    deps = [ "//base/security/appverify/interfaces/innerkits/appverify_lite/unittest:unittest" ]
+  }
+}
diff --git a/base/security/appverify/interfaces/innerkits/appverify_lite/LICENSE b/base/security/appverify/interfaces/innerkits/appverify_lite/LICENSE
new file mode 100644
index 00000000..4a459866
--- /dev/null
+++ b/base/security/appverify/interfaces/innerkits/appverify_lite/LICENSE
@@ -0,0 +1,177 @@
+
+                                 Apache License
+                           Version 2.0, January 2004
+                        http://www.apache.org/licenses/
+
+   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
+
+   1. Definitions.
+
+      "License" shall mean the terms and conditions for use, reproduction,
+      and distribution as defined by Sections 1 through 9 of this document.
+
+      "Licensor" shall mean the copyright owner or entity authorized by
+      the copyright owner that is granting the License.
+
+      "Legal Entity" shall mean the union of the acting entity and all
+      other entities that control, are controlled by, or are under common
+      control with that entity. For the purposes of this definition,
+      "control" means (i) the power, direct or indirect, to cause the
+      direction or management of such entity, whether by contract or
+      otherwise, or (ii) ownership of fifty percent (50%) or more of the
+      outstanding shares, or (iii) beneficial ownership of such entity.
+
+      "You" (or "Your") shall mean an individual or Legal Entity
+      exercising permissions granted by this License.
+
+      "Source" form shall mean the preferred form for making modifications,
+      including but not limited to software source code, documentation
+      source, and configuration files.
+
+      "Object" form shall mean any form resulting from mechanical
+      transformation or translation of a Source form, including but
+      not limited to compiled object code, generated documentation,
+      and conversions to other media types.
+
+      "Work" shall mean the work of authorship, whether in Source or
+      Object form, made available under the License, as indicated by a
+      copyright notice that is included in or attached to the work
+      (an example is provided in the Appendix below).
+
+      "Derivative Works" shall mean any work, whether in Source or Object
+      form, that is based on (or derived from) the Work and for which the
+      editorial revisions, annotations, elaborations, or other modifications
+      represent, as a whole, an original work of authorship. For the purposes
+      of this License, Derivative Works shall not include works that remain
+      separable from, or merely link (or bind by name) to the interfaces of,
+      the Work and Derivative Works thereof.
+
+      "Contribution" shall mean any work of authorship, including
+      the original version of the Work and any modifications or additions
+      to that Work or Derivative Works thereof, that is intentionally
+      submitted to Licensor for inclusion in the Work by the copyright owner
+      or by an individual or Legal Entity authorized to submit on behalf of
+      the copyright owner. For the purposes of this definition, "submitted"
+      means any form of electronic, verbal, or written communication sent
+      to the Licensor or its representatives, including but not limited to
+      communication on electronic mailing lists, source code control systems,
+      and issue tracking systems that are managed by, or on behalf of, the
+      Licensor for the purpose of discussing and improving the Work, but
+      excluding communication that is conspicuously marked or otherwise
+      designated in writing by the copyright owner as "Not a Contribution."
+
+      "Contributor" shall mean Licensor and any individual or Legal Entity
+      on behalf of whom a Contribution has been received by Licensor and
+      subsequently incorporated within the Work.
+
+   2. Grant of Copyright License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      copyright license to reproduce, prepare Derivative Works of,
+      publicly display, publicly perform, sublicense, and distribute the
+      Work and such Derivative Works in Source or Object form.
+
+   3. Grant of Patent License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      (except as stated in this section) patent license to make, have made,
+      use, offer to sell, sell, import, and otherwise transfer the Work,
+      where such license applies only to those patent claims licensable
+      by such Contributor that are necessarily infringed by their
+      Contribution(s) alone or by combination of their Contribution(s)
+      with the Work to which such Contribution(s) was submitted. If You
+      institute patent litigation against any entity (including a
+      cross-claim or counterclaim in a lawsuit) alleging that the Work
+      or a Contribution incorporated within the Work constitutes direct
+      or contributory patent infringement, then any patent licenses
+      granted to You under this License for that Work shall terminate
+      as of the date such litigation is filed.
+
+   4. Redistribution. You may reproduce and distribute copies of the
+      Work or Derivative Works thereof in any medium, with or without
+      modifications, and in Source or Object form, provided that You
+      meet the following conditions:
+
+      (a) You must give any other recipients of the Work or
+          Derivative Works a copy of this License; and
+
+      (b) You must cause any modified files to carry prominent notices
+          stating that You changed the files; and
+
+      (c) You must retain, in the Source form of any Derivative Works
+          that You distribute, all copyright, patent, trademark, and
+          attribution notices from the Source form of the Work,
+          excluding those notices that do not pertain to any part of
+          the Derivative Works; and
+
+      (d) If the Work includes a "NOTICE" text file as part of its
+          distribution, then any Derivative Works that You distribute must
+          include a readable copy of the attribution notices contained
+          within such NOTICE file, excluding those notices that do not
+          pertain to any part of the Derivative Works, in at least one
+          of the following places: within a NOTICE text file distributed
+          as part of the Derivative Works; within the Source form or
+          documentation, if provided along with the Derivative Works; or,
+          within a display generated by the Derivative Works, if and
+          wherever such third-party notices normally appear. The contents
+          of the NOTICE file are for informational purposes only and
+          do not modify the License. You may add Your own attribution
+          notices within Derivative Works that You distribute, alongside
+          or as an addendum to the NOTICE text from the Work, provided
+          that such additional attribution notices cannot be construed
+          as modifying the License.
+
+      You may add Your own copyright statement to Your modifications and
+      may provide additional or different license terms and conditions
+      for use, reproduction, or distribution of Your modifications, or
+      for any such Derivative Works as a whole, provided Your use,
+      reproduction, and distribution of the Work otherwise complies with
+      the conditions stated in this License.
+
+   5. Submission of Contributions. Unless You explicitly state otherwise,
+      any Contribution intentionally submitted for inclusion in the Work
+      by You to the Licensor shall be under the terms and conditions of
+      this License, without any additional terms or conditions.
+      Notwithstanding the above, nothing herein shall supersede or modify
+      the terms of any separate license agreement you may have executed
+      with Licensor regarding such Contributions.
+
+   6. Trademarks. This License does not grant permission to use the trade
+      names, trademarks, service marks, or product names of the Licensor,
+      except as required for reasonable and customary use in describing the
+      origin of the Work and reproducing the content of the NOTICE file.
+
+   7. Disclaimer of Warranty. Unless required by applicable law or
+      agreed to in writing, Licensor provides the Work (and each
+      Contributor provides its Contributions) on an "AS IS" BASIS,
+      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
+      implied, including, without limitation, any warranties or conditions
+      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
+      PARTICULAR PURPOSE. You are solely responsible for determining the
+      appropriateness of using or redistributing the Work and assume any
+      risks associated with Your exercise of permissions under this License.
+
+   8. Limitation of Liability. In no event and under no legal theory,
+      whether in tort (including negligence), contract, or otherwise,
+      unless required by applicable law (such as deliberate and grossly
+      negligent acts) or agreed to in writing, shall any Contributor be
+      liable to You for damages, including any direct, indirect, special,
+      incidental, or consequential damages of any character arising as a
+      result of this License or out of the use or inability to use the
+      Work (including but not limited to damages for loss of goodwill,
+      work stoppage, computer failure or malfunction, or any and all
+      other commercial damages or losses), even if such Contributor
+      has been advised of the possibility of such damages.
+
+   9. Accepting Warranty or Additional Liability. While redistributing
+      the Work or Derivative Works thereof, You may choose to offer,
+      and charge a fee for, acceptance of support, warranty, indemnity,
+      or other liability obligations and/or rights consistent with this
+      License. However, in accepting such obligations, You may act only
+      on Your own behalf and on Your sole responsibility, not on behalf
+      of any other Contributor, and only if You agree to indemnify,
+      defend, and hold each Contributor harmless for any liability
+      incurred by, or claims asserted against, such Contributor by reason
+      of your accepting any such warranty or additional liability.
+
+   END OF TERMS AND CONDITIONS
\ No newline at end of file
diff --git a/base/security/appverify/interfaces/innerkits/appverify_lite/OpenHarmonyCer/OpenHarmony.cer b/base/security/appverify/interfaces/innerkits/appverify_lite/OpenHarmonyCer/OpenHarmony.cer
new file mode 100644
index 0000000000000000000000000000000000000000..1c856dd34df9ad5b864e265153d0430ab6d1e9f9
GIT binary patch
literal 527
zcmXqLV&XPvV%)HRnTe5!i6wXX9#I1xHV&;ek8`#x%uK8d2E~Tl2Apinp)72|OwN9W
zA_hVr4wo>ue?e-VM`BTKeqN=as(~^{lv`K^NmRilwJbF!zaTd?uS6jvH8Iyv-9Qzj
zj9FL?Sy^y?T1k0gQK~|4W_n&?Noi54fr2=%k%6Isp^1U9F%U&b@EaMJBMS_Svmy<I
z+1SBh!^8*;BxXi-W+w&~<!^QSth<xgIMz&myDH`Ly8Nq?ukJs)VeLeAt2IyTlrBrZ
zvU}mEx1+Fo9{1iUe5Z=%cQ32RKFRdC@qZ5g+MULG7wZ}57;pmvN0y%j81C#12C^Uy
zABz}^$nj){Pi{JL&1EZ+IgTa8$vq97V~QF{%<c>ZE=&sS5&u<>&8iovVHdvmMNn0(
z%4q+i@U!2x#LT^H|68GYHj{z?qitj8?ju^)pZh1t&aCg4o%p7q$cy33^Sc^V0jomG
E03H6L;s5{u

literal 0
HcmV?d00001

diff --git a/base/security/appverify/interfaces/innerkits/appverify_lite/OpenHarmonyCer/OpenHarmony.jks b/base/security/appverify/interfaces/innerkits/appverify_lite/OpenHarmonyCer/OpenHarmony.jks
new file mode 100644
index 0000000000000000000000000000000000000000..2b7d4c8a6d676e76ddc05ed099f67297e295af80
GIT binary patch
literal 1158
zcmXqLVrgPxWHxAGv1a4cYV&CO&dbQoxS)wehoy-{11PLw(8MT!BE`ta()iDy@wY+a
z4>oS779K7}rUm5&r3RX8TreS^snRSW|9;iH+__XFVs0Z_)Q)4T{i~Vcb}%tB91dXd
zFgl$2$zAT{l;#x?Y>|g2oPTC1ad)cA$=~nWPW;(n6tKto%<tbu&jjj)mQOsdFw=)C
z(<pw`1jl5ds3$JM8hNW*qM7g9Gb%j6Ygl054R;}@h@qXF4MRRd0YfT79zzC0B0~{F
zE|8zcP|2XcPz+?HF_bWrgT+(9BAE>7K-ol~Xem%_s(~WHFi}Gh7NL;L+*AcaGXo<t
z6Eh=YV<QVggC=GkxFUA81x-wU4VsvKGBGj$sZR(QMwIYi1BJ&VXD*?xC8hT-yIkkf
zFHqe)aouwPaCkH{G3_}2Q(OJZ%c-}U^|!a*+O%W4{Hr@lW3SmeZcZrFYT3Jk```6+
zUZ=us(KlaQySwIP#^#(#R|8#7*5&c~O!L*|-ak{6w3MB>At=2`<NE6*t-PIY-TiZv
zsx#Ho-+L8FTU$QQw5faMxLI<_)sIu|`V|!N94XzCQpb^RH<Nd*eAtwU{y_>ExohQ_
z(=NW}Qu=TG#z324|3a5-%S!YrZWsn%v{=>n-P<K?-7PUbmE|dKckjQq%I)8u*%P-;
zKOZS`VbY)ABMdnw6B+npC-QX5YR=SsX2AY~yXD*c!kHh<co--2FPb&=_uaOMBJIm`
z(zQ7=i{=W4hI!weac1AYQ<2yI3L7}KtMjBB$XqQa)j0WD8PCx_cK^0KRO5Ins<dkF
z-nC78kISELY4ksL@~Fmkdj{V}98)cheeV2s%vLq*@t2>AuR1UNcv528^ZXqq6I3ko
zXHM!A%e!`E#^V=JxoU3@U$bL2xjg&T6Pp^>yW484dU%ds?PZ#}v{v!j8Usf84P5T4
zq<EsEBYf7sweY{g|6k)ZmrG7^)&0e)bGE<x{Vm%|r<-{;+w#5ZbIfnv(feSfclFnf
z3%Pu3zuh`6vlZ>tcf8m9{=$MyMO)@dHXU$gSa&{ckLS-qHHox63m+U1yXOBgMDu^o
z>=PnVJe<6b_2RUWizlXjjyiCE+1m#@c0Os@bTN9y-Z!f32|u2c{g<-}3BNxh;~q!)
ze$CRPFp1u?<?TtOH{ZTq`*E3AQ2xC|MqB!iD+&p0=-u!;a+c|(Aj6aQbnlf+{9bx+
z)jq#W|B2ehR@;B=4-u~V+5cnvm4(ZV*&eQq+41(mnIBEZ-Uokd+J4NiN1=Z~n}Rl1
zqvk#Nx0{!~Uw=gXLjRI2{=Cx|RTAcXRarKJIrvw_v8C@P9of_@xy@ZOZ_=vEvbTP&
zp7*~r!0D#trksk^b<fhay{~NfDUxu)z|KI?fRl|?n~#}Eij{#yBvZ(4+j`A(>2}}T
q+e)uGqu1{{{DMV9!1T7}ncIP)yz@9Xxo<t_Ov|sl&BV;uwg3SCWA=Lh

literal 0
HcmV?d00001

diff --git a/base/security/appverify/interfaces/innerkits/appverify_lite/include/app_centraldirectory.h b/base/security/appverify/interfaces/innerkits/appverify_lite/include/app_centraldirectory.h
new file mode 100644
index 00000000..919554f8
--- /dev/null
+++ b/base/security/appverify/interfaces/innerkits/appverify_lite/include/app_centraldirectory.h
@@ -0,0 +1,97 @@
+/*
+ * Copyright (c) 2020 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef SECURITY_APP_CENTRALDIECTORY_H
+#define SECURITY_APP_CENTRALDIECTORY_H
+
+#include "mbedtls/pk.h"
+#include "app_verify_pub.h"
+#include "app_file.h"
+#include "app_common.h"
+
+#ifdef __cplusplus
+#if __cplusplus
+extern "C" {
+#endif
+#endif
+
+#define HAP_SIG_BLOCK_MAGIC_HI 3617552046287187010LL
+#define HAP_SIG_BLOCK_MAGIC_LO 2334950737560224072LL
+#define HAP_SIG_BLOCK_MIN_SIZE 32
+#define UINT16_MAX_VALUE 0xffff
+#define HAP_EOCD_MAGIC 0x06054b50
+#define HAP_FIRST_LEVEL_CHUNK_PREFIX 0x5a
+#define HAP_SECOND_LEVEL_CHUNK_PREFIX 0xa5
+
+typedef struct {
+    void *buffer;
+    int len;
+} HapBuf;
+
+#pragma pack(4)
+/* hw sign head */
+typedef struct {
+    unsigned int blockNum;
+    unsigned long long size;
+    unsigned long long magicLow;
+    unsigned long long magicHigh;
+    unsigned int version;
+} HwSignHead;
+#pragma pack()
+
+#pragma pack(2)
+typedef struct {
+    int magic;
+    short diskNum;
+    short startNum;
+    short coreDirNumOnDisk;
+    short coreDirNum;
+    int coreDirSize;
+    int coreDirOffset;
+    short commentLen;
+} MinEocd;
+#pragma pack()
+
+typedef struct {
+    MinEocd eocdHead;
+    char *comment;
+} HapEocd;
+
+typedef struct {
+    HwSignHead *signHead;
+    int fullSignBlockOffset;
+    int hapCoreDirOffset;
+    int hapEocdOffset;
+    int hapEocdSize;
+    int fileSize;
+    int version;
+    int certType;
+} SignatureInfo;
+
+bool FindSignature(const FileRead *hapFile, SignatureInfo *signInfo);
+bool CreateHapBuffer(HapBuf *hapBuffer, int len);
+int ReadFileFullyFromOffset(const HapBuf *buffer, int offset, const FileRead *file);
+void HapSetInt32(const HapBuf *buffer, int offset, int value);
+void ClearHapBuffer(HapBuf *hapBuffer);
+void HapPutByte(const HapBuf *hapBuffer, int offset, char value);
+void HapPutData(const HapBuf *hapBuffer, int offset, const unsigned char *data, int len);
+
+#ifdef __cplusplus
+#if __cplusplus
+}
+#endif
+#endif
+
+#endif
diff --git a/base/security/appverify/interfaces/innerkits/appverify_lite/include/app_common.h b/base/security/appverify/interfaces/innerkits/appverify_lite/include/app_common.h
new file mode 100644
index 00000000..ecddba01
--- /dev/null
+++ b/base/security/appverify/interfaces/innerkits/appverify_lite/include/app_common.h
@@ -0,0 +1,114 @@
+/*
+ * Copyright (c) 2020 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef SECURITY_APP_COMMON_H
+#define SECURITY_APP_COMMON_H
+
+#include "app_verify_base.h"
+#include "app_verify_pub.h"
+
+#ifdef __cplusplus
+#if __cplusplus
+extern "C" {
+#endif
+#endif
+
+#define MAX_PRINT_LEN 1024
+#define DOUBLE_SIZE  2
+#define MAX_CHARACTER  9
+#define BYTE_BITS  8
+#define MAX_MALLOC_SIZE 0x100000  /* 1M */
+#define MAX_HASH_SIZE 64
+
+#define P_NULL_RETURN_WTTH_LOG(v) \
+do { \
+    if ((v) == NULL) { \
+        LOG_ERROR(#v" is null"); \
+        return V_ERR; \
+    } \
+} \
+while (0)
+
+#define P_NULL_RETURN_RET_WTTH_LOG(v, ret) \
+do { \
+    if ((v) == NULL) { \
+        LOG_ERROR(#v" is null"); \
+        return ret; \
+    } \
+} \
+while (0)
+
+#define P_NULL_RETURN_NULL_WTTH_LOG(v) \
+do { \
+    if ((v) == NULL) { \
+        LOG_ERROR(#v" is null"); \
+        return NULL; \
+    } \
+} \
+while (0)
+
+#define P_ERR_RETURN_WTTH_LOG(v) \
+do { \
+    if ((v) != V_OK) { \
+        LOG_ERROR(#v" not ok"); \
+        return v; \
+    } \
+} \
+while (0)
+
+#define P_NULL_GOTO_WTTH_LOG(v) \
+do { \
+    if ((v) == NULL) { \
+        LOG_ERROR(#v" is null"); \
+        goto EXIT; \
+    } \
+} \
+while (0)
+
+#define P_ERR_GOTO_WTTH_LOG(v) \
+do { \
+    if ((v) != V_OK) { \
+        LOG_ERROR(#v" not ok"); \
+        goto EXIT; \
+    } \
+} \
+while (0)
+
+#define FREE_IF_NOT_NULL(p) \
+do { \
+    APPV_FREE(p); \
+} \
+while (0)
+
+#define APPV_MALLOC(size) malloc(size)
+#define APPV_FREE(buf) \
+do { \
+    if ((buf) != NULL) { \
+        free(buf); \
+        (buf) = NULL; \
+    } \
+} while (0)
+
+long long HapGetInt64(const unsigned char *buf, int len);
+int HapGetInt(const unsigned char *buf, int len);
+short HapGetShort(const unsigned char *buf, int len);
+void HapPutInt32(unsigned char *buf, int len, int value);
+#ifdef __cplusplus
+#if __cplusplus
+}
+#endif
+#endif
+
+#endif
\ No newline at end of file
diff --git a/base/security/appverify/interfaces/innerkits/appverify_lite/include/app_file.h b/base/security/appverify/interfaces/innerkits/appverify_lite/include/app_file.h
new file mode 100644
index 00000000..0d629340
--- /dev/null
+++ b/base/security/appverify/interfaces/innerkits/appverify_lite/include/app_file.h
@@ -0,0 +1,58 @@
+/*
+ * Copyright (c) 2020 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef SECURITY_APP_FILE_H
+#define SECURITY_APP_FILE_H
+
+#ifdef __cplusplus
+#if __cplusplus
+extern "C" {
+#endif
+#endif
+
+#define FILE_OPEN_FAIL_ERROR_NUM (-1)
+
+enum ReadFileErrorCode {
+    DEST_BUFFER_IS_NULL = -1,
+    FILE_IS_CLOSE = -2,
+    MMAP_COPY_FAILED = -3,
+    READ_OFFSET_OUT_OF_RANGE = -4,
+    MMAP_FAILED = -5,
+    MMAP_PARAM_INVALID = -6,
+};
+
+typedef struct {
+    int mmapPosition;
+    int readMoreLen;
+    int mmapSize;
+    char* mapAddr;
+} MmapInfo;
+
+typedef struct {
+    int fp;
+    int offset;
+    int len;
+} FileRead;
+
+int InitVerify(FileRead *file, const char *filePath, int *handle);
+int HapMMap(int bufCapacity, int offset, MmapInfo *mmapInfo, const FileRead *file);
+void HapMUnMap(char *mapAddr, int mmapSize);
+#ifdef __cplusplus
+#if __cplusplus
+}
+#endif
+#endif
+
+#endif
diff --git a/base/security/appverify/interfaces/innerkits/appverify_lite/include/app_provision.h b/base/security/appverify/interfaces/innerkits/appverify_lite/include/app_provision.h
new file mode 100644
index 00000000..63f51fbd
--- /dev/null
+++ b/base/security/appverify/interfaces/innerkits/appverify_lite/include/app_provision.h
@@ -0,0 +1,46 @@
+/*
+ * Copyright (c) 2020 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef SECURITY_APP_PROVISION_H
+#define SECURITY_APP_PROVISION_H
+
+#include "app_verify_pub.h"
+
+#ifdef __cplusplus
+#if __cplusplus
+extern "C" {
+#endif
+#endif
+
+#define APP_STORE "Huawei App Store"
+
+#define DEBUG_TYPE "debug"
+
+#define RELEASE_TYPE "release"
+
+#define MAX_UDID_NUM 100
+
+#define UDID_VERIFY_BYTES 64
+int ParseProfile(const char *buf, int len, ProfileProf *pf);
+void ProfFreeData(ProfileProf *pf);
+int VerifyProfileContent(const ProfileProf *pf);
+
+#ifdef __cplusplus
+#if __cplusplus
+}
+#endif
+#endif
+
+#endif
\ No newline at end of file
diff --git a/base/security/appverify/interfaces/innerkits/appverify_lite/include/app_verify.h b/base/security/appverify/interfaces/innerkits/appverify_lite/include/app_verify.h
new file mode 100644
index 00000000..7f5eccec
--- /dev/null
+++ b/base/security/appverify/interfaces/innerkits/appverify_lite/include/app_verify.h
@@ -0,0 +1,132 @@
+/*
+ * Copyright (c) 2020 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef SECURITY_APP_VERIFY_H
+#define SECURITY_APP_VERIFY_H
+
+#include "mbedtls/pk.h"
+#include "app_centraldirectory.h"
+#include "app_provision.h"
+#include "app_verify_pub.h"
+
+#ifdef __cplusplus
+#if __cplusplus
+extern "C" {
+#endif
+#endif
+
+#define HW_SH_VERSION_LEN  4
+#define HW_SH_RESERVE_LEN  4
+
+#define CONTENT_VERSION_LEN 4
+
+#define SHA256_SIZE (256 / 8)
+
+#define SHA384_SIZE (384 / 8)
+
+#define SHA512_SIZE (512 / 8)
+
+#define BUF_LEN  1024
+
+#define BUF_1M (1024 * 1024)
+
+#define MAX_PROFILE_SIZE  (1024 * 1024)
+
+#define MAX_BLOCK_NUM  (1024)
+
+#define NORMAL_HASH_SIZE 32
+
+#define MAX_KEY_PAIR_SIZE 4096
+
+#define MAX_PK_BUF (MBEDTLS_MPI_MAX_SIZE * 2 + 20)
+
+/* BlockHead->type */
+typedef enum {
+    SIGNATURE_BLOCK_TYPE = 0x20000000,
+    KEY_ROTATION_BLOCK_TYPE = 0x20000001,
+    PROFILE_BLOCK_WITHSIGN_TYPE = 0x20000002,
+    PROPERTY_BLOCK_TYPE = 0x20000003,
+} BockType;
+
+/* contentinfo tag */
+typedef enum {
+    DEFAULT_TAG = 0,
+    HASH_TAG,                   /* total file */
+    HASH_ROOT_1M_TAG = 0x80,
+    HASH_ROOT_512K_TAG,
+    HASH_ROOT_256K_TAG,
+    HASH_ROOT_128K_TAG,
+    HASH_ROOT_64K_TAG,
+    HASH_ROOT_32K_TAG,
+    HASH_ROOT_16K_TAG,
+    HASH_ROOT_8K_TAG,
+    HASH_ROOT_4K_TAG,
+} SignBlockTag;
+
+/* block head */
+typedef struct {
+    unsigned int type;
+    unsigned int length;
+    unsigned int offset;
+} BlockHead;
+
+/* sign content */
+typedef struct {
+    int version;  /* version */
+    int blockNum;
+    int size;
+    int algId;
+    int length;
+    char hash[NORMAL_HASH_SIZE];
+} ContentInfo;
+
+#define CERT_MAX_NAME_LEN 512
+#define CERT_TYPE_APPGALLARY  0
+#define CERT_TYPE_SYETEM      1
+#define CERT_TYPE_OTHER       2
+#define CERT_MAX_DEPTH        3
+
+/* trusted app list */
+typedef struct {
+    int  maxCertPath;
+    char *name;
+    char *appSignCert;
+    char *profileSignCert;
+    char *profileDebugSignCert;
+    char *issueCA;
+} TrustAppCert;
+
+typedef struct {
+    int issuerLen;
+    char *issuer;
+    int subjectLen;
+    char *subject;
+    mbedtls_pk_type_t pkType;
+    int pkLen;
+    char *pkBuf;
+} CertInfo;
+
+int GetAppid(ProfileProf *profile);
+int CalculateHash(const unsigned char *input, int len, int hashAlg, unsigned char *output);
+int GetHashUnitLen(int hashAlg);
+char *GetSignBlockByType(const SignatureInfo *signInfo, int fp, int blockType, int *len, BlockHead *blockHead);
+
+#ifdef __cplusplus
+#if __cplusplus
+}
+#endif
+#endif
+
+#endif
diff --git a/base/security/appverify/interfaces/innerkits/appverify_lite/include/app_verify_hal.h b/base/security/appverify/interfaces/innerkits/appverify_lite/include/app_verify_hal.h
new file mode 100755
index 00000000..a1dc6b02
--- /dev/null
+++ b/base/security/appverify/interfaces/innerkits/appverify_lite/include/app_verify_hal.h
@@ -0,0 +1,43 @@
+/*
+ * Copyright (c) 2020 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef SECURITY_APP_VERIFY_HAL_H
+#define SECURITY_APP_VERIFY_HAL_H
+
+
+#ifdef __cplusplus
+#if __cplusplus
+extern "C" {
+#endif
+#endif
+#define INQUIRY_UDID_OK 0
+#define INQUIRY_UDID_ERROR -1
+
+typedef int (*GetDeviceUdid)(unsigned char *udid, int size);
+
+typedef struct {
+    GetDeviceUdid devUdidFunc;
+} ProductDiff;
+
+void RegistHalFunc();
+int InquiryDeviceUdid(unsigned char *udid, int size);
+
+#ifdef __cplusplus
+#if __cplusplus
+}
+#endif
+#endif
+
+#endif
diff --git a/base/security/appverify/interfaces/innerkits/appverify_lite/include/app_verify_hap.h b/base/security/appverify/interfaces/innerkits/appverify_lite/include/app_verify_hap.h
new file mode 100644
index 00000000..1a35eef7
--- /dev/null
+++ b/base/security/appverify/interfaces/innerkits/appverify_lite/include/app_verify_hap.h
@@ -0,0 +1,57 @@
+/*
+ * Copyright (c) 2020 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef SECURITY_APP_VERIFY_HAP_H
+#define SECURITY_APP_VERIFY_HAP_H
+
+#include "app_centraldirectory.h"
+#include "app_common.h"
+#include "app_file.h"
+#include "app_verify.h"
+#include "app_verify_pub.h"
+#include "mbedtls/pk.h"
+
+#ifdef __cplusplus
+#if __cplusplus
+extern "C" {
+#endif
+#endif
+
+#define ALGORITHM_MASK 0x000f
+#define ALGORITHM_SHA256 0x01
+#define ALGORITHM_SHA384 0x02
+#define ALGORITHM_SHA512 0x03
+#define ALGORITHM_PKCS1_SHA256 0x04
+#define ALGORITHM_PKCS1_SHA384 0x05
+#define ALGORITHM_PKCS1_SHA512 0x06
+
+#define HAP_DIGEST_PRIFIX_LEN 5
+#define MAX_OID_LENGTH 128
+#define HASH_BLOB_LEN (1024 * 1024)
+#define ONCE_READ_LEN (1024 * 64)
+#define HASH_ALG_SHA256     MBEDTLS_MD_SHA256 /* sha256 */
+#define HASH_ALG_SHA384     MBEDTLS_MD_SHA384 /* sha384 */
+#define HASH_ALG_SHA512     MBEDTLS_MD_SHA512 /* sha512 */
+
+bool VerifyIntegrityChunk(int digestAlgorithm, int fp, const SignatureInfo *signInfo, const HapBuf *actualDigest);
+int GetDigestAlgorithmId(unsigned int signAlgorithm);
+
+#ifdef __cplusplus
+#if __cplusplus
+}
+#endif
+#endif
+
+#endif
diff --git a/base/security/appverify/interfaces/innerkits/appverify_lite/include/app_verify_pub.h b/base/security/appverify/interfaces/innerkits/appverify_lite/include/app_verify_pub.h
new file mode 100755
index 00000000..dfde0c79
--- /dev/null
+++ b/base/security/appverify/interfaces/innerkits/appverify_lite/include/app_verify_pub.h
@@ -0,0 +1,149 @@
+/*
+ * Copyright (c) 2020 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef SECURITY_APP_VERIFY_PUB_H
+#define SECURITY_APP_VERIFY_PUB_H
+
+#include <stdbool.h>
+
+#ifdef __cplusplus
+#if __cplusplus
+extern "C" {
+#endif
+#endif
+
+typedef enum {
+    V_OK = 0,
+
+    /* begin app sign parse */
+    V_ERR_GET_CERT_INFO = 0xef000002,
+    V_ERR_UNTRUSTED_CERT = 0xef000003,
+    V_ERR_INTEGRITY = 0xef000004,
+    V_ERR_GET_SIGNHEAD = 0xef000005,
+    V_ERR_GET_SIGN_BLOCK = 0xef000006,
+    V_ERR_GET_HASH_DIFF = 0xef000007,
+    V_ERR_INVALID_CONTENT_TAG = 0xef000008,
+    V_ERR_INVALID_HASH_ALG = 0xef000009,
+    V_ERR_GET_ROOT_HASH = 0xef00000a,
+    V_ERR_CALC_BLOCK_HASH = 0xef00000c,
+    V_ERR_PARSE_PKC7_DATA = 0xef00000d,
+    V_ERR_VERIFY_CERT_CHAIN = 0xef00000e,
+    V_ERR_VERIFY_SIGNATURE = 0xef00000f,
+    V_ERR_GET_CERT_TYPE = 0xef000010,
+
+    /* begin profile signparse */
+    V_ERR_GET_PROFILE_DATA = 0xef000011,
+    V_ERR_GET_PARSE_PROFILE = 0xef000012,
+    V_ERR_PROF_CONTENT_INVALID = 0xef000013,
+    V_ERR_VERFIY_PROF_CERT = 0xef000014,
+    V_ERR_GET_CERT_PK = 0xef000015,
+    V_ERR_GET_APPID = 0xef000016,
+    V_ERR_INVALID_DISP_TYPE = 0xef000017,
+    V_ERR_INVALID_APP_BUNDLE = 0xef000018,
+    V_ERR_INVALID_DATE = 0xef000019,
+    V_ERR_INVALID_DEVID = 0xef00001a,
+
+    /* begin file operation */
+    V_ERR_FILE_OPEN = 0xef00001b,
+    V_ERR_FILE_STAT = 0xef00001c,
+    V_ERR_FILE_LENGTH = 0xef00001d,
+
+    /* begin memory operation */
+    V_ERR_MEMSET = 0xef00001e,
+    V_ERR_MEMCPY = 0xef00001f,
+    V_ERR_MALLOC = 0xef000020,
+
+    /* default error */
+    V_ERR = 0xffffffff,
+} AppVErrCode;
+
+typedef struct {
+    int notBefore;
+    int notAfter;
+} ProfValidity;
+
+typedef struct {
+    char *developerId; /* developer-id */
+    unsigned char *devCert;     /* development-certificate */
+    unsigned char *releaseCert; /* distribution-certificate */
+    char *bundleName;  /* bundle-name */
+    char *appFeature;  /* app-feature : hos_system_app/hos_normal_app */
+} ProfBundleInfo;
+
+typedef struct {
+    int restricNum;
+    char **restricPermission;
+    int permissionNum;
+    char **permission;
+} ProfPermission;
+
+typedef struct {
+    char *devIdType;
+    int devidNum;
+    char **deviceId;
+} ProfDebugInfo;
+
+typedef struct {
+    int versionCode;  /* version */
+    char *versionName;  /* version description */
+    char *uuid;  /* uuid */
+    char *type;  /* debug/release */
+    char *appDistType;  /* app-distribution-type */
+    ProfValidity validity; /* validity */
+    ProfBundleInfo bundleInfo; /* bundle-info */
+    ProfPermission permission; /* permissions */
+    ProfDebugInfo  debugInfo;  /* debug-info */
+    char *issuer;     /* issuer */
+    char *appid;           /* bundle_name_pk(base64) */
+} ProfileProf;
+
+typedef struct {
+    char *pk;
+    int len;
+} AppSignPk;
+
+struct VfyRst;
+typedef int (*GetSignPk)(struct VfyRst *verifyRst, AppSignPk *pk);
+typedef void (*FreeSignPK)(AppSignPk *pk);
+typedef int (*MessageFunc)(unsigned char operationResult, const char *bundleName, unsigned char errCode);
+
+typedef struct VfyRst {
+    ProfileProf profile;   /* profile */
+} VerifyResult;
+
+/* verify app integrity, return 0 if OK, otherwise errcode AppVErrCode */
+int APPVERI_AppVerify(const char *filePath, VerifyResult *verifyRst);
+
+/* free the verify result of APPVERI_AppVerify returned */
+void APPVERI_FreeVerifyRst(VerifyResult *verifyRst);
+
+/* set debugmode */
+int APPVERI_SetDebugMode(bool mode);
+
+/* get unsigned file len without verify, return V_ERR if not OK */
+int APPVERI_GetUnsignedFileLength(const char *filePath);
+
+/* register msg func */
+void APPVERI_RegisterMsgFunc(MessageFunc messageFunc);
+void APPVERI_SetActsMode(bool mode);
+int APPVERI_IsActsMode(void);
+
+#ifdef __cplusplus
+#if __cplusplus
+}
+#endif
+#endif
+
+#endif
diff --git a/base/security/appverify/interfaces/innerkits/appverify_lite/include/mbedtls_pkcs7.h b/base/security/appverify/interfaces/innerkits/appverify_lite/include/mbedtls_pkcs7.h
new file mode 100644
index 00000000..e167763d
--- /dev/null
+++ b/base/security/appverify/interfaces/innerkits/appverify_lite/include/mbedtls_pkcs7.h
@@ -0,0 +1,274 @@
+/*
+ * Copyright (c) 2020 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef MBEDTLS_PKCS7_H
+#define MBEDTLS_PKCS7_H
+#include <stdbool.h>
+#include <mbedtls/asn1.h>
+#include <mbedtls/x509.h>
+#include <mbedtls/x509_crt.h>
+#include <mbedtls/x509_crl.h>
+#include <mbedtls/pem.h>
+#include <mbedtls/oid.h>
+
+#ifdef __cplusplus
+#if __cplusplus
+extern "C" {
+#endif
+#endif
+
+/*
+ * if the pkcs7 format is pem, add this define in this header file
+ * or in build env
+ * #define PARSE_PEM_FORMAT_SIGNED_DATA 1
+ */
+#define MAX_SIGNER_NAME_LEN 512
+
+typedef enum {
+    PKCS7_SUCC = 0,
+    PKCS7_PARSING_ERROR,
+    PKCS7_INVALID_PARAM,
+    PKCS7_INVALID_VALUE,
+    PKCS7_INVALID_CONTENT_TYPE_OR_NO_CONTENT,
+    PKCS7_CERTIFICATE_NOT_FOUND,
+    PKCS7_INVALID_VERSION,
+    PKCS7_INVALID_DIGEST_ALG,
+    PKCS7_INVALID_SIGNING_ALG,
+    PKCS7_MEMORY_EXHAUST,
+    PKCS7_ROOT_CA_NOT_VALID,
+    PKCS7_BUILD_CERT_PATH_FAIL,
+    PKCS7_HAS_NO_AUTH_ATTR_IN_SIGNER,
+    PKCS7_HAS_NO_SIGNER_INFO,
+    PKCS7_HAS_NO_SIGNER_CRT,
+    PKCS7_IS_REVOKED,
+    PKCS7_VERIFY_FAIL,
+} PKCS7_RetCode;
+
+typedef struct {
+    char issuer[MAX_SIGNER_NAME_LEN];
+    char subject[MAX_SIGNER_NAME_LEN];
+    int depth;
+} SignerResovledInfo;
+
+typedef struct {
+    SignerResovledInfo *signers;
+    int nrOfSigners;
+} SignersResovedInfo;
+
+/*
+ * The structure bellow used the mbedtls open source structure which definition is kernel-like style,
+ * We do not redefine it to Camel style
+ *
+ * the PKCS7 signer's cert path header
+ * depth is the signer's cert path depth
+ * crt is the certs list header, the lower ca cert is at front
+ */
+typedef struct {
+    int depth;
+    mbedtls_x509_crt *crt;
+} SignerCertPath;
+
+/*
+ * PKCS7 signer info structure, as defined in PKCS7
+ * rootCert is not defined in PKCS7, this is the signer's root cert preinstall in system
+ * certPath is for cert chain verify
+ * next is point to the next signer info, as PKCS7 definination, maybe there are multi signer
+ */
+typedef struct tagSignerInfo {
+    int version;
+    mbedtls_x509_buf serial;
+    mbedtls_x509_name issuer;
+    mbedtls_x509_crt *rootCert;
+    mbedtls_x509_buf issuerRaw;
+    mbedtls_x509_buf digestAlgId;
+    mbedtls_x509_buf authAttr;
+    mbedtls_x509_buf authAttrRaw;
+    mbedtls_x509_buf digestEncAlgId;
+    mbedtls_x509_buf signature;
+    mbedtls_x509_buf unAuthAttr;
+    SignerCertPath certPath;
+    struct tagSignerInfo *next;
+} SignerInfo;
+
+/*
+ * PKCS7 signed data content info
+ */
+typedef struct tagContent {
+    mbedtls_asn1_buf oid;
+    mbedtls_asn1_buf data;
+} Content;
+
+/*
+ * PKCS7 signed data digest algorithm identifiers
+ */
+typedef struct tagDigestAlgId {
+    mbedtls_asn1_buf algBuf;
+    struct tagDigestAlgId *next;
+} DigestAlgId;
+
+/*
+ * PKCS7 signed-data structure
+ */
+typedef struct {
+    int version;
+    DigestAlgId digestAlgIds;
+    Content content;
+    mbedtls_x509_crt *certs;
+    mbedtls_x509_crl crl;
+    SignerInfo signers;
+} SignedData;
+
+/*
+ * PKCS7 signed data total structure header
+ * contentTypeOid must be the pkcs7 signed-data oid 1.2.840.113549.1.7.2
+ */
+typedef struct {
+    mbedtls_asn1_buf contentTypeOid;
+    SignedData signedData;
+#ifdef PARSE_PEM_FORMAT_SIGNED_DATA
+    mbedtls_pem_context pem;
+#endif
+} Pkcs7;
+
+/*******************************************************************************
+ * Function    : PKCS7_ParseSignedData
+ * Description : parse the pkcs7 signed data, store the resolved data to pkcs7
+ * Input       : buf     - pkcs7 signed data
+ *               bufLen  - pkcs7 signed data length
+ * Output      : pkcs7   - resolved pkcs7 data, caller provide this arg, malloc
+ *                         from heap memory or use stack memory, if malloced
+ *                         from heap memory, caller must freed the memroy after
+ *                         called PKCS7_FreeRes
+ * Return      : 0 on success, others on fail
+ * Note        : need to call PKCS7_FreeRes to free the resource when success
+ *               parse and use, no need to call PKCS7_FreeRes when parse failed
+ *******************************************************************************/
+int PKCS7_ParseSignedData(const unsigned char *buf, size_t bufLen, Pkcs7 *pkcs7);
+
+/*******************************************************************************
+ * Function    : PKCS7_VerifyCertsChain
+ * Description : Verify all signer's cert chain
+ * Input       : pkcs7 -- the pkcs7 signed data header.
+ * Return      : 0 on success, others on fail
+ *******************************************************************************/
+int PKCS7_VerifyCertsChain(const Pkcs7 *pkcs7);
+
+/*******************************************************************************
+ * Function    : PKCS7_FreeRes
+ * Description : free the resource of resolved pkcs7 data
+ * Input       : pkcs7   - resolved pkcs7 data
+ * Return      : 0 on success, others on fail
+ * Note        : need to call PKCS7_FreeRes to free the resource when success
+ *               parse and use, no need to call PKCS7_FreeRes when parse failed
+ *******************************************************************************/
+void PKCS7_FreeRes(Pkcs7 *pkcs7);
+
+/*******************************************************************************
+ * Function    : PKCS7_CalcDigest
+ * Description : is a callback defined by upper layer user, calculate the
+ *               digest for final verify the signed data signature.
+ * Input       : pkcs7   - pkcs7 signed data header
+ *               signer  - pkcs7 signer info
+ *               algType - digest algorithm type, defined in mbedtls, exp:
+ *                         MBEDTLS_MD_SHA256/MBEDTLS_MD_SHA512
+ * Output      : hash    - the calcuated digest hash
+ *               hashLen - the length of calculated digest hash
+ * Return      : 0 on success, others on fail
+ *******************************************************************************/
+typedef int (*PKCS7_CalcDigest)(const Pkcs7 *pkcs7, const SignerInfo *signer,
+                                mbedtls_md_type_t algType, unsigned char *hash, size_t *hashLen);
+
+/*******************************************************************************
+ * Function    : PKCS7_GetContentData
+ * Description : get the content data of PKCS#7 signed-data content
+ * Input       : pkcs7   - pkcs7 signed data header
+ * Output      : data    - pointer to the content data
+ *                         user need not to free this var
+ *               dataLen - the content data length
+ * Return      : 0 on success, others on fail
+ *******************************************************************************/
+int PKCS7_GetContentData(const Pkcs7 *pkcs7, unsigned char **data, size_t *dataLen);
+
+/*******************************************************************************
+ * Function    : PKCS7_GetDigestInSignerAuthAttr
+ * Description : get the digest which stored in signer's auth attribute.
+ * Input       : signer  - pkcs7 signer info
+ * Output      : dig     - pointer to the digest stored in signer's auth attribute
+ *                         user need not to free this var
+ *               digLen  - digest length
+ * Return      : 0 on success, others on fail
+ *******************************************************************************/
+int PKCS7_GetDigestInSignerAuthAttr(const SignerInfo *signer, unsigned char **dig, size_t *digLen);
+
+/*******************************************************************************
+ * Function    : PKCS7_GetSignerAuthAttr
+ * Description : get the signer's auth attribute content, which maybe signed by
+ *               signer, so upper layer can call this to get to-be-signed data,
+ *               then caculate digest of it for signature verification
+ * Input       : signer  - pkcs7 signer info
+ * Output      : data    - pointer to signer's auth attribute start location
+ *                         user need not to free this var
+ *               dataLen - signer auth attribute data length
+ * Return      : 0 on success, others on fail
+ *******************************************************************************/
+int PKCS7_GetSignerAuthAttr(const SignerInfo *signer, unsigned char **data, size_t *dataLen);
+
+/*******************************************************************************
+ * Function    : PKCS7_VerifySignerSignature
+ * Description : Verify all of signer's signature
+ * Input       : pkcs7   - pkcs7 signed data header
+ *               calcDigest - callback function for upper layer user to caculate
+ *                            the digest of signature
+ * Output      : NA
+ * Return      : 0 on success, others on fail
+ *******************************************************************************/
+int PKCS7_VerifySignerSignature(const Pkcs7 *pkcs7, PKCS7_CalcDigest calcDigest);
+
+/*******************************************************************************
+ * Function    : PKCS7_GetAllSignersResolvedInfo
+ * Description : Get all signer's associate info, now including subject/issuer/
+ *               cert depth, used it for trustlist match.
+ * Input       : pkcs7   - pkcs7 signed data header
+ * Output      : the structure of associate signer's info
+ * Return      : non-NULL on success, and user need to call
+ *               PKCS7_FreeAllSignersResolvedInfo to free resource
+ *******************************************************************************/
+SignersResovedInfo *PKCS7_GetAllSignersResolvedInfo(const Pkcs7 *pkcs7);
+
+/*******************************************************************************
+ * Function    : PKCS7_FreeAllSignersResolvedInfo
+ * Description : Free the signer associate info.
+ * Input       : sri    - signer associate info
+ * Output      : NA
+ * Return      : void
+ *******************************************************************************/
+void PKCS7_FreeAllSignersResolvedInfo(SignersResovedInfo *sri);
+
+/*******************************************************************************
+ * Function    : PKCS7_EnableDebugMode
+ * Description : Enable or disable debug mode, so it can install the app that
+ *               signed by the test cert's private key.
+ * Input       : mode    - true:enable, false:disable
+ * Output      : NA
+ * Return      : 0 on success, others on error
+ *******************************************************************************/
+int PKCS7_EnableDebugMode(bool mode);
+
+#ifdef __cplusplus
+#if __cplusplus
+}
+#endif
+#endif
+#endif // MBEDTLS_PKCS7_H
diff --git a/base/security/appverify/interfaces/innerkits/appverify_lite/products/default/app_verify_default.c b/base/security/appverify/interfaces/innerkits/appverify_lite/products/default/app_verify_default.c
new file mode 100755
index 00000000..ab62e215
--- /dev/null
+++ b/base/security/appverify/interfaces/innerkits/appverify_lite/products/default/app_verify_default.c
@@ -0,0 +1,59 @@
+/*
+ * Copyright (c) 2020 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "app_verify_default.h"
+#include "app_verify_pub.h"
+#include "pms_common.h"
+#include "pms_inner.h"
+#include "pms_interface_inner.h"
+#include "iunknown.h"
+#include "samgr_lite.h"
+
+
+int GetUdidServer(unsigned char *udid, int size)
+{
+    IUnknown *iUnknown = SAMGR_GetInstance()->GetFeatureApi(PERMISSION_SERVICE, PERM_INNER);
+    if (iUnknown == NULL) {
+        return INQUIRY_UDID_ERROR;
+    }
+    PmsInnerApi *interface = NULL;
+    iUnknown->QueryInterface(iUnknown, DEFAULT_VERSION, (void **) &interface);
+    if (interface == NULL || interface->GetDevUdid == NULL) {
+        return INQUIRY_UDID_ERROR;
+    }
+    int ret = interface->GetDevUdid(udid, size);
+    return ret;
+}
+
+int GetUdidClient(unsigned char *udid, int size)
+{
+    return RequestDevUdid(udid, size);
+}
+
+int GetUdid(unsigned char *udid, int size)
+{
+    int ret;
+    if (APPVERI_IsActsMode() == false) {
+        ret = GetUdidServer(udid, size);
+    } else {
+        ret = GetUdidClient(udid, size);
+    }
+    return ret;
+}
+
+void RegistBaseDefaultFunc(ProductDiff *productFunc)
+{
+    productFunc->devUdidFunc = GetUdid;
+}
diff --git a/base/security/appverify/interfaces/innerkits/appverify_lite/products/default/app_verify_default.h b/base/security/appverify/interfaces/innerkits/appverify_lite/products/default/app_verify_default.h
new file mode 100755
index 00000000..1aa73674
--- /dev/null
+++ b/base/security/appverify/interfaces/innerkits/appverify_lite/products/default/app_verify_default.h
@@ -0,0 +1,34 @@
+/*
+ * Copyright (c) 2020 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef SECURITY_APP_VERIFY_DEFAULT_H
+#define SECURITY_APP_VERIFY_DEFAULT_H
+#include "app_verify_hal.h"
+
+#ifdef __cplusplus
+#if __cplusplus
+extern "C" {
+#endif
+#endif
+
+void RegistBaseDefaultFunc(ProductDiff *productFunc);
+
+#ifdef __cplusplus
+#if __cplusplus
+}
+#endif
+#endif
+
+#endif
\ No newline at end of file
diff --git a/base/security/appverify/interfaces/innerkits/appverify_lite/products/ipcamera/BUILD.gn b/base/security/appverify/interfaces/innerkits/appverify_lite/products/ipcamera/BUILD.gn
new file mode 100755
index 00000000..895c10d5
--- /dev/null
+++ b/base/security/appverify/interfaces/innerkits/appverify_lite/products/ipcamera/BUILD.gn
@@ -0,0 +1,39 @@
+# Copyright (c) 2020 Huawei Device Co., Ltd.
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+config("verify_base_config") {
+  include_dirs = [
+    "//base/security/appverify/interfaces/innerkits/appverify_lite/include",
+    "//base/startup/syspara_lite/interfaces/kits",
+    "//base/security/appverify/interfaces/innerkits/appverify_lite/products/ipcamera",
+    "//base/security/permission/services/permission_lite/pms_base/include",
+    "//foundation/distributedschedule/samgr_lite/interfaces/kits/samgr",
+    "//base/security/permission/services/permission_lite/pms/include",
+    "//base/security/permission/interfaces/innerkits/permission_lite",
+    "//base/security/permission/interfaces/kits/permission_lite",
+  ]
+  cflags = [ "-Wall" ]
+}
+
+shared_library("verify_base") {
+  sources = [
+    "../default/app_verify_default.c",
+    "app_verify_base.c",
+  ]
+  configs += [ ":verify_base_config" ]
+  public_deps = [
+    "//base/hiviewdfx/hilog_lite/frameworks/featured:hilog_shared",
+    "//base/startup/syspara_lite/frameworks/parameter:parameter",
+    "//foundation/distributedschedule/samgr_lite/samgr:samgr",
+  ]
+}
diff --git a/base/security/appverify/interfaces/innerkits/appverify_lite/products/ipcamera/app_verify_base.c b/base/security/appverify/interfaces/innerkits/appverify_lite/products/ipcamera/app_verify_base.c
new file mode 100644
index 00000000..d096c4a7
--- /dev/null
+++ b/base/security/appverify/interfaces/innerkits/appverify_lite/products/ipcamera/app_verify_base.c
@@ -0,0 +1,21 @@
+/*
+ * Copyright (c) 2020 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "app_verify_base.h"
+
+void RegistProductFunc(ProductDiff *productFunc)
+{
+}
+
diff --git a/base/security/appverify/interfaces/innerkits/appverify_lite/products/ipcamera/app_verify_base.h b/base/security/appverify/interfaces/innerkits/appverify_lite/products/ipcamera/app_verify_base.h
new file mode 100755
index 00000000..925460f4
--- /dev/null
+++ b/base/security/appverify/interfaces/innerkits/appverify_lite/products/ipcamera/app_verify_base.h
@@ -0,0 +1,40 @@
+/*
+ * Copyright (c) 2020 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef SECURITY_APP_VERIFY_BASE_H
+#define SECURITY_APP_VERIFY_BASE_H
+#include "app_verify_hal.h"
+#include "log.h"
+
+#ifdef __cplusplus
+#if __cplusplus
+extern "C" {
+#endif
+#endif
+
+#define LOG_INFO(fmt, args...) HILOG_INFO(LOG_CORE, "["__FILE__":%d] :"fmt, __LINE__, ##args)
+#define LOG_DEBUG(fmt, args...) HILOG_DEBUG(LOG_CORE, "["__FILE__":%d] :"fmt, __LINE__, ##args)
+#define LOG_WARN(fmt, args...) HILOG_WARN(LOG_CORE, "["__FILE__":%d] :"fmt, __LINE__, ##args)
+#define LOG_ERROR(fmt, args...) HILOG_ERROR(LOG_CORE, "["__FILE__":%d] :"fmt, __LINE__, ##args)
+#define LOG_PRINT_STR(fmt, args...) HILOG_INFO(LOG_CORE, "["__FILE__":%d] :"fmt, __LINE__, ##args)
+
+void RegistProductFunc(ProductDiff *productFunc);
+#ifdef __cplusplus
+#if __cplusplus
+}
+#endif
+#endif
+
+#endif
\ No newline at end of file
diff --git a/base/security/appverify/interfaces/innerkits/appverify_lite/src/app_centraldirectory.c b/base/security/appverify/interfaces/innerkits/appverify_lite/src/app_centraldirectory.c
new file mode 100755
index 00000000..26d926e5
--- /dev/null
+++ b/base/security/appverify/interfaces/innerkits/appverify_lite/src/app_centraldirectory.c
@@ -0,0 +1,182 @@
+/*
+ * Copyright (c) 2020 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "app_centraldirectory.h"
+#include <fcntl.h>
+#include <stdbool.h>
+#include <string.h>
+#include <sys/mman.h>
+#include <sys/stat.h>
+#include <sys/types.h>
+#include <unistd.h>
+#include "app_common.h"
+#include "mbedtls/base64.h"
+#include "mbedtls/md.h"
+#include "mbedtls/pk.h"
+#include "mbedtls/x509_crt.h"
+#include "mbedtls_pkcs7.h"
+#include "securec.h"
+
+void HapPutByte(const HapBuf *hapBuffer, int offset, char value)
+{
+    if (hapBuffer == NULL || hapBuffer->buffer == NULL) {
+        return;
+    }
+    if ((offset >= 0) && (hapBuffer->len - offset >= (int)(sizeof(value)))) {
+        *(char *)((char *)hapBuffer->buffer + offset) = value;
+    }
+    return;
+}
+
+void HapPutData(const HapBuf *hapBuffer, int offset, const unsigned char *data, int len)
+{
+    if (hapBuffer == NULL || hapBuffer->buffer == NULL) {
+        return;
+    }
+    if ((data != NULL) && (offset >= 0) && len > 0 && ((hapBuffer->len - offset) >= len)) {
+        if (memcpy_s((hapBuffer->buffer + offset), (hapBuffer->len - offset), data, len) != EOK) {
+            LOG_ERROR("memcpy_s fail");
+        }
+    }
+}
+
+void HapSetInt32(const HapBuf *buffer, int offset, int value)
+{
+    if (value < 0) {
+        LOG_ERROR("int32 value of out range: %d", value);
+        return;
+    }
+    if (buffer == NULL || buffer->buffer == NULL) {
+        return;
+    }
+    if ((offset >= 0) && ((buffer->len - offset) >= (int)(sizeof(value)))) {
+        HapPutInt32((unsigned char *)buffer->buffer + offset, buffer->len - offset, (int)(value));
+    }
+    return;
+}
+
+bool CreateHapBuffer(HapBuf *hapBuffer, int len)
+{
+    if (hapBuffer == NULL || len <= 0) {
+        LOG_ERROR("create buf fail, buf is null");
+        return false;
+    }
+    hapBuffer->buffer = APPV_MALLOC(len);
+    if (hapBuffer->buffer == NULL) {
+        LOG_ERROR("create buf fail");
+        return false;
+    }
+    hapBuffer->len = len;
+    return true;
+}
+
+void ClearHapBuffer(HapBuf *hapBuffer)
+{
+    if (hapBuffer == NULL || hapBuffer->buffer == NULL) {
+        return;
+    }
+    (void)memset_s(hapBuffer->buffer, hapBuffer->len, 0, hapBuffer->len);
+    APPV_FREE(hapBuffer->buffer);
+    hapBuffer->len = 0;
+}
+
+static bool GetEocd(const FileRead *hapFile, HapEocd *hapEocd, int *eocdOffset)
+{
+    MmapInfo mmapInfo = {0};
+    if (hapFile->len <= sizeof(MinEocd)) {
+        return false;
+    }
+    int ret = HapMMap(hapFile->len, 0, &mmapInfo, hapFile);
+    if (ret != V_OK) {
+        LOG_ERROR("mmap not ok");
+        return false;
+    }
+    char *fileStart = (char *)(mmapInfo.mapAddr + mmapInfo.readMoreLen);
+    if (HapGetShort((unsigned char*)fileStart + hapFile->len - sizeof(short), sizeof(short)) == 0 &&
+        HapGetInt((unsigned char*)fileStart + hapFile->len - sizeof(MinEocd), sizeof(int)) == HAP_EOCD_MAGIC) {
+        if (memcpy_s(&hapEocd->eocdHead, sizeof(MinEocd),
+            fileStart + hapFile->len - sizeof(MinEocd), sizeof(MinEocd)) != EOK) {
+            HapMUnMap(mmapInfo.mapAddr, mmapInfo.mmapSize);
+            LOG_ERROR("copy error");
+            return false;
+        }
+        HapMUnMap(mmapInfo.mapAddr, mmapInfo.mmapSize);
+        *eocdOffset = hapFile->len - sizeof(MinEocd);
+        return true;
+    }
+    // only a few haps have comment and use this branch
+    int maxReadLen = ((unsigned int)(hapFile->len - sizeof(MinEocd)) > UINT16_MAX_VALUE) ?
+        UINT16_MAX_VALUE : (hapFile->len - sizeof(MinEocd));
+    fileStart += hapFile->len - sizeof(MinEocd) - maxReadLen;
+    LOG_INFO("maxReadLen %d", maxReadLen);
+    for (int i = 0; i < maxReadLen; i++) {
+        if ((HapGetShort((unsigned char*)fileStart + i + sizeof(MinEocd) - sizeof(short),
+            sizeof(short)) == (maxReadLen - i)) &&
+            (HapGetInt((unsigned char*)fileStart + i, sizeof(int)) == HAP_EOCD_MAGIC)) {
+            if (memcpy_s(&hapEocd->eocdHead, sizeof(MinEocd),
+                fileStart + i, sizeof(MinEocd)) != EOK) {
+                HapMUnMap(mmapInfo.mapAddr, mmapInfo.mmapSize);
+                LOG_ERROR("copy error");
+                return false;
+            }
+            HapMUnMap(mmapInfo.mapAddr, mmapInfo.mmapSize);
+            LOG_INFO("comment num %d", maxReadLen - i);
+            *eocdOffset = hapFile->len - sizeof(MinEocd) - (maxReadLen - i);
+            return true;
+        }
+    }
+    LOG_ERROR("can not find eocd");
+    HapMUnMap(mmapInfo.mapAddr, mmapInfo.mmapSize);
+    return false;
+}
+
+bool FindSignature(const FileRead *hapFile, SignatureInfo *signInfo)
+{
+    if (hapFile == NULL || signInfo == NULL) {
+        return false;
+    }
+    int eocdOffset = 0;
+    HapEocd hapEocd = {0};
+    if (!GetEocd(hapFile, &hapEocd, &eocdOffset)) {
+        LOG_ERROR("find Eocd fail");
+        return false;
+    }
+    signInfo->hapEocdOffset = eocdOffset;
+    signInfo->hapEocdSize = hapFile->len - eocdOffset;
+    signInfo->hapCoreDirOffset = HapGetInt((unsigned char*)(&(hapEocd.eocdHead.coreDirOffset)), sizeof(int));
+    if (signInfo->hapCoreDirOffset <= 0 || signInfo->hapCoreDirOffset >= eocdOffset ||
+        signInfo->hapEocdSize <= 0 || signInfo->hapEocdOffset <= 0) {
+        LOG_ERROR("core dir error");
+        return false;
+    }
+    return true;
+}
+
+int ReadFileFullyFromOffset(const HapBuf *buffer, int offset, const FileRead *file)
+{
+    if (buffer == NULL || buffer->buffer == NULL || file == NULL) {
+        return DEST_BUFFER_IS_NULL;
+    }
+    if (offset < 0 || offset > file->len) {
+        return READ_OFFSET_OUT_OF_RANGE;
+    }
+    lseek(file->fp, offset, SEEK_SET);
+    int readLen = read(file->fp, buffer->buffer, buffer->len);
+    if (readLen != buffer->len) {
+        LOG_ERROR("file read error %d --- %d", readLen, buffer->len);
+        return READ_OFFSET_OUT_OF_RANGE;
+    }
+    return buffer->len;
+}
diff --git a/base/security/appverify/interfaces/innerkits/appverify_lite/src/app_common.c b/base/security/appverify/interfaces/innerkits/appverify_lite/src/app_common.c
new file mode 100755
index 00000000..863078ca
--- /dev/null
+++ b/base/security/appverify/interfaces/innerkits/appverify_lite/src/app_common.c
@@ -0,0 +1,75 @@
+/*
+ * Copyright (c) 2020 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "app_common.h"
+
+long long HapGetInt64(const unsigned char *buf, int len)
+{
+    if (buf == NULL) {
+        return 0;
+    }
+    unsigned long long value = 0;
+    if (len != sizeof(long long)) {
+        return 0;
+    }
+    while (len-- > 0) {
+        value = (value << BYTE_BITS) | (*(buf + len));
+    }
+    return (long long)value;
+}
+
+int HapGetInt(const unsigned char *buf, int len)
+{
+    if (buf == NULL) {
+        return 0;
+    }
+    unsigned int value = 0;
+    if (len != sizeof(int)) {
+        return 0;
+    }
+    while (len-- > 0) {
+        value = (value << BYTE_BITS) | (*(buf + len));
+    }
+    return (int)value;
+}
+
+short HapGetShort(const unsigned char *buf, int len)
+{
+    if (buf == NULL) {
+        return 0;
+    }
+    unsigned short value = 0;
+    if (len != sizeof(short)) {
+        return 0;
+    }
+    while (len-- > 0) {
+        value = (value << BYTE_BITS) | (*(buf + len));
+    }
+    return (short)value;
+}
+
+void HapPutInt32(unsigned char *buf, int len, int value)
+{
+    if (buf == NULL || len < sizeof(int)) {
+        return;
+    }
+    int i;
+    unsigned int var = value;
+    for (i = 0; i < sizeof(int); i++) {
+        buf[i] = var;
+        var = var >> (BYTE_BITS);
+    }
+    return;
+}
diff --git a/base/security/appverify/interfaces/innerkits/appverify_lite/src/app_file.c b/base/security/appverify/interfaces/innerkits/appverify_lite/src/app_file.c
new file mode 100755
index 00000000..bf63ff88
--- /dev/null
+++ b/base/security/appverify/interfaces/innerkits/appverify_lite/src/app_file.c
@@ -0,0 +1,100 @@
+/*
+ * Copyright (c) 2020 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "app_file.h"
+#include <fcntl.h>
+#include <limits.h>
+#include <stdbool.h>
+#include <string.h>
+#include <sys/mman.h>
+#include <sys/stat.h>
+#include <sys/types.h>
+#include <unistd.h>
+#include "app_centraldirectory.h"
+#include "app_verify_hal.h"
+
+static int g_memoryPageSize = 0;
+int InitVerify(FileRead *file, const char *filePath, int *handle)
+{
+    if (handle == NULL || file == NULL || filePath == NULL) {
+        LOG_ERROR("file open error");
+        return V_ERR_FILE_OPEN;
+    }
+    RegistHalFunc();
+    char *path = APPV_MALLOC(PATH_MAX + 1);
+    if (path == NULL) {
+        LOG_ERROR("path malloc error");
+        return V_ERR_MALLOC;
+    }
+    if ((strlen(filePath) > PATH_MAX) || (NULL == realpath(filePath, path))) {
+        APPV_FREE(path);
+        LOG_ERROR("file path error");
+        return V_ERR_FILE_OPEN;
+    }
+    *handle = open(path, O_RDONLY, 0);
+    if (*handle < 0) {
+        APPV_FREE(path);
+        LOG_PRINT_STR("file open error %s", path);
+        return V_ERR_FILE_OPEN;
+    }
+    if (g_memoryPageSize == 0) {
+        g_memoryPageSize = sysconf(_SC_PAGESIZE);
+    }
+    if (g_memoryPageSize <= 0) {
+        LOG_ERROR("MAP_FAILED %d", g_memoryPageSize);
+        APPV_FREE(path);
+        return V_ERR_FILE_STAT;
+    }
+    file->len = lseek(*handle, 0, SEEK_END);
+    file->fp = *handle;
+    APPV_FREE(path);
+    return V_OK;
+}
+
+int HapMMap(int bufCapacity, int offset, MmapInfo *mmapInfo, const FileRead *file)
+{
+    if (mmapInfo == NULL || file == NULL || bufCapacity <= 0) {
+        return MMAP_FAILED;
+    }
+    mmapInfo->mapAddr = (char*)(MAP_FAILED);
+    if (file->fp == FILE_OPEN_FAIL_ERROR_NUM) {
+        return FILE_IS_CLOSE;
+    }
+    if (offset < 0 || offset > file->len - bufCapacity) {
+        return READ_OFFSET_OUT_OF_RANGE;
+    }
+    lseek(file->fp, offset, SEEK_SET);
+    if (g_memoryPageSize == 0) {
+        return MMAP_FAILED;
+    }
+    mmapInfo->mmapPosition = (offset / g_memoryPageSize) * g_memoryPageSize;
+    mmapInfo->readMoreLen = (int)(offset - mmapInfo->mmapPosition);
+    mmapInfo->mmapSize = bufCapacity + mmapInfo->readMoreLen;
+    mmapInfo->mapAddr = (char*)(mmap(NULL, mmapInfo->mmapSize, PROT_READ,
+        MAP_SHARED, file->fp, mmapInfo->mmapPosition));
+    if (mmapInfo->mapAddr == MAP_FAILED) {
+        LOG_ERROR("MAP_FAILED");
+        return MMAP_FAILED;
+    }
+    return V_OK;
+}
+
+void HapMUnMap(char *mapAddr, int mmapSize)
+{
+    if (mapAddr == NULL || mmapSize <= 0) {
+        return;
+    }
+    munmap(mapAddr, mmapSize);
+}
diff --git a/base/security/appverify/interfaces/innerkits/appverify_lite/src/app_provision.c b/base/security/appverify/interfaces/innerkits/appverify_lite/src/app_provision.c
new file mode 100755
index 00000000..08b01780
--- /dev/null
+++ b/base/security/appverify/interfaces/innerkits/appverify_lite/src/app_provision.c
@@ -0,0 +1,430 @@
+/*
+ * Copyright (c) 2020 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "app_provision.h"
+#include <stdbool.h>
+#include <string.h>
+#include "app_common.h"
+#include "app_verify_hal.h"
+#include "cJSON.h"
+#include "securec.h"
+
+static void ProfInit(ProfileProf *pf)
+{
+    int ret = memset_s(pf, sizeof(ProfileProf), 0, sizeof(ProfileProf));
+    if (ret != V_OK) {
+        LOG_ERROR("memset failed");
+        return;
+    }
+    return;
+}
+
+static char *GetStringTag(const cJSON *root, const char *tag)
+{
+    cJSON *jsonObj = cJSON_GetObjectItem(root, tag);
+    if (jsonObj == NULL) {
+        LOG_PRINT_STR("failed to get %s", tag);
+        return NULL;
+    }
+    int objLen = strlen(jsonObj->valuestring);
+    if (objLen < 0) {
+        LOG_PRINT_STR("len error");
+        return NULL;
+    }
+    char *value = APPV_MALLOC(objLen + 1);
+    if (value == NULL) {
+        LOG_ERROR("malloc error: %d", objLen + 1);
+        return NULL;
+    }
+    int ret = strcpy_s(value, objLen + 1, jsonObj->valuestring);
+    if (ret != V_OK) {
+        APPV_FREE(value);
+        LOG_ERROR("strcpy error: %d", ret);
+        return NULL;
+    }
+    return value;
+}
+
+static void FreeStringAttay(char **array, int num)
+{
+    if (array == NULL) {
+        return;
+    }
+    for (int i = 0; i < num; i++) {
+        if (array[i] != NULL) {
+            APPV_FREE(array[i]);
+        }
+    }
+    APPV_FREE(array);
+    return;
+}
+
+static char **GetStringArrayTag(const cJSON *root, const char *tag, int *numReturn)
+{
+    cJSON *jsonObj = cJSON_GetObjectItem(root, tag);
+    if (jsonObj == NULL) {
+        LOG_PRINT_STR("failed to get %s", tag);
+        return NULL;
+    }
+    int num = cJSON_GetArraySize(jsonObj);
+    if (num == 0) {
+        LOG_ERROR("array num 0");
+        *numReturn = 0;
+        return NULL;
+    }
+    char **value = APPV_MALLOC(sizeof(char *) * num);
+    P_NULL_RETURN_NULL_WTTH_LOG(value);
+    (void)memset_s(value, sizeof(char *) * num, 0, sizeof(char *) * num);
+
+    for (int i = 0; i < num; i++) {
+        cJSON *item = cJSON_GetArrayItem(jsonObj, i);
+        P_NULL_GOTO_WTTH_LOG(item);
+
+        int len = strlen(item->valuestring);
+        value[i] = APPV_MALLOC(len + 1);
+        P_NULL_GOTO_WTTH_LOG(value[i]);
+
+        int ret = strcpy_s(value[i], len + 1, item->valuestring);
+        if (ret != V_OK) {
+            LOG_ERROR("str cpy error : %d", ret);
+            FreeStringAttay(value, num);
+            return NULL;
+        }
+    }
+    *numReturn = num;
+    return value;
+EXIT:
+    FreeStringAttay(value, num);
+    return NULL;
+}
+
+static int GetProfValidity(const cJSON *root, ProfValidity *profVal)
+{
+    cJSON *jsonObj = cJSON_GetObjectItem(root, "validity");
+    if (jsonObj == NULL) {
+        LOG_ERROR("failed to get validity");
+        return V_ERR;
+    }
+
+    cJSON *notBefore = cJSON_GetObjectItem(jsonObj, "not-before");
+    if (notBefore == NULL) {
+        LOG_ERROR("failed to get not-before");
+        return V_ERR;
+    }
+    profVal->notBefore = notBefore->valueint;
+
+    cJSON *notAfter = cJSON_GetObjectItem(jsonObj, "not-after");
+    if (notAfter == NULL) {
+        LOG_ERROR("failed to get not-after");
+        return V_ERR;
+    }
+    profVal->notAfter = notAfter->valueint;
+    return V_OK;
+}
+
+static int GetProfBundleInfo(const cJSON *root, ProfBundleInfo *profVal)
+{
+    cJSON *jsonObj = cJSON_GetObjectItem(root, "bundle-info");
+    if (jsonObj == NULL) {
+        LOG_ERROR("failed to get bundle-info");
+        return V_ERR;
+    }
+    /* if failed, free by caller */
+    profVal->developerId = GetStringTag(jsonObj, "developer-id");
+    P_NULL_RETURN_WTTH_LOG(profVal->developerId);
+
+    profVal->devCert = (unsigned char *)GetStringTag(jsonObj, "development-certificate");
+    if (profVal->devCert == NULL) {
+        LOG_ERROR("get development-certificat failed");
+        profVal->devCert = APPV_MALLOC(sizeof(char));
+        P_NULL_RETURN_WTTH_LOG(profVal->devCert);
+        profVal->devCert[0] = '\0';
+    }
+
+    profVal->releaseCert = (unsigned char *)GetStringTag(jsonObj, "distribution-certificate");
+    if (profVal->releaseCert == NULL) {
+        LOG_ERROR("get distribution-certificat failed");
+        profVal->releaseCert = APPV_MALLOC(sizeof(char));
+        P_NULL_RETURN_WTTH_LOG(profVal->releaseCert);
+        profVal->releaseCert[0] = '\0';
+    }
+
+    profVal->bundleName = GetStringTag(jsonObj, "bundle-name");
+    P_NULL_RETURN_WTTH_LOG(profVal->bundleName);
+
+    profVal->appFeature = GetStringTag(jsonObj, "app-feature");
+    P_NULL_RETURN_WTTH_LOG(profVal->appFeature);
+
+    return V_OK;
+}
+
+static int GetProfPermission(const cJSON *root, ProfPermission *profVal)
+{
+    cJSON *jsonObj = cJSON_GetObjectItem(root, "permissions");
+    if (jsonObj == NULL) {
+        LOG_ERROR("failed to get permissions");
+        return V_ERR;
+    }
+    profVal->permission = GetStringArrayTag(jsonObj, "feature-permissions", &profVal->permissionNum);
+    profVal->restricPermission = GetStringArrayTag(jsonObj, "restricted-permissions", &profVal->restricNum);
+    return V_OK;
+}
+
+static int GetProfDebugInfo(const cJSON *root, ProfDebugInfo *profVal)
+{
+    cJSON *jsonObj = cJSON_GetObjectItem(root, "debug-info");
+    if (jsonObj == NULL) {
+        LOG_INFO("failed to get debug-info");
+        return V_OK;
+    }
+    profVal->devIdType = GetStringTag(jsonObj, "device-id-type");
+    if (profVal->devIdType == NULL) {
+        LOG_INFO("failed to get device-id-type");
+        return V_OK;
+    }
+    profVal->deviceId = GetStringArrayTag(jsonObj, "device-ids", &profVal->devidNum);
+    return V_OK;
+}
+
+static int GetProfIssuerInfo(const cJSON *root, ProfileProf *pf)
+{
+    pf->issuer = GetStringTag(root, "issuer");
+    if (pf->issuer == NULL) {
+        int len = strlen(APP_STORE);
+        pf->issuer = APPV_MALLOC(len + 1);
+        if (pf->issuer == NULL) {
+            return V_ERR;
+        }
+        int ret = strcpy_s(pf->issuer, len + 1, APP_STORE);
+        if (ret != V_OK) {
+            APPV_FREE(pf->issuer);
+            LOG_ERROR("str cpy error: %d", ret);
+        }
+        return ret;
+    }
+    return V_OK;
+}
+
+static void FreeProfBundle(ProfBundleInfo *pfval)
+{
+    FREE_IF_NOT_NULL(pfval->appFeature);
+    FREE_IF_NOT_NULL(pfval->bundleName);
+    FREE_IF_NOT_NULL(pfval->devCert);
+    FREE_IF_NOT_NULL(pfval->developerId);
+    FREE_IF_NOT_NULL(pfval->releaseCert);
+    return;
+}
+
+static void FreeProfPerssion(ProfPermission *pfval)
+{
+    FreeStringAttay(pfval->permission, pfval->permissionNum);
+    pfval->permissionNum = 0;
+    pfval->permission = NULL;
+
+    FreeStringAttay(pfval->restricPermission, pfval->restricNum);
+    pfval->restricNum = 0;
+    pfval->restricPermission = NULL;
+    return;
+}
+
+static void FreeProfDebuginfo(ProfDebugInfo *pfval)
+{
+    FREE_IF_NOT_NULL(pfval->devIdType);
+
+    FreeStringAttay(pfval->deviceId, pfval->devidNum);
+    pfval->devidNum = 0;
+    pfval->deviceId = NULL;
+
+    return;
+}
+
+void ProfFreeData(ProfileProf *pf)
+{
+    if (pf == NULL) {
+        return;
+    }
+    FREE_IF_NOT_NULL(pf->versionName);
+    FREE_IF_NOT_NULL(pf->uuid);
+    FREE_IF_NOT_NULL(pf->type);
+    FREE_IF_NOT_NULL(pf->appDistType);
+    FreeProfBundle(&pf->bundleInfo);
+    FreeProfPerssion(&pf->permission);
+    FreeProfDebuginfo(&pf->debugInfo);
+    FREE_IF_NOT_NULL(pf->issuer);
+    FREE_IF_NOT_NULL(pf->appid);
+    return;
+}
+
+/* parse profile */
+int ParseProfile(const char *buf, int len, ProfileProf *pf)
+{
+    P_NULL_RETURN_WTTH_LOG(pf);
+    P_NULL_RETURN_WTTH_LOG(buf);
+    ProfInit(pf);
+    int ret;
+    cJSON *root = cJSON_Parse(buf);
+    P_NULL_RETURN_WTTH_LOG(root);
+
+    cJSON *jsonObj = cJSON_GetObjectItem(root, "version-code");
+    P_NULL_GOTO_WTTH_LOG(jsonObj);
+    pf->versionCode = jsonObj->valueint;
+
+    pf->versionName = GetStringTag(root, "version-name");
+    P_NULL_GOTO_WTTH_LOG(pf->versionName);
+
+    pf->uuid = GetStringTag(root, "uuid");
+    P_NULL_GOTO_WTTH_LOG(pf->uuid);
+
+    pf->type = GetStringTag(root, "type");
+    P_NULL_GOTO_WTTH_LOG(pf->type);
+
+    pf->appDistType = GetStringTag(root, "app-distribution-type");
+    if (pf->appDistType == NULL) {
+        pf->appDistType = APPV_MALLOC(sizeof(char));
+        P_NULL_GOTO_WTTH_LOG(pf->appDistType);
+        pf->appDistType[0] = '\0';
+    }
+
+    ret = GetProfValidity(root, &pf->validity);
+    P_ERR_GOTO_WTTH_LOG(ret);
+
+    ret = GetProfBundleInfo(root, &pf->bundleInfo);
+    P_ERR_GOTO_WTTH_LOG(ret);
+
+    ret = GetProfPermission(root, &pf->permission);
+    P_ERR_GOTO_WTTH_LOG(ret);
+
+    ret = GetProfDebugInfo(root, &pf->debugInfo);
+    P_ERR_GOTO_WTTH_LOG(ret);
+
+    ret = GetProfIssuerInfo(root, pf);
+    P_ERR_GOTO_WTTH_LOG(ret);
+
+    LOG_INFO("parse profile json sucess");
+    cJSON_Delete(root);
+    return V_OK;
+
+EXIT:
+    cJSON_Delete(root);
+    ProfFreeData(pf);
+    return V_ERR;
+}
+
+static int VerifyAppTypeAndDistribution(const ProfileProf *pf)
+{
+    if ((strcmp(pf->type, DEBUG_TYPE) != 0) && (strcmp(pf->type, RELEASE_TYPE) != 0)) {
+        LOG_PRINT_STR("invalid app type: %s", pf->type);
+        return V_ERR;
+    }
+    if (strcmp(pf->type, RELEASE_TYPE) == 0) {
+        if ((strcmp(pf->appDistType, "app_gallery") != 0) && (strcmp(pf->appDistType, "enterprise") != 0) &&
+            (strcmp(pf->appDistType, "os_integration") != 0)) {
+            LOG_PRINT_STR("invalid app dis type: %s", pf->appDistType);
+            return V_ERR;
+        }
+    }
+    return V_OK;
+}
+
+static int VerifyAppBundleInfo(const ProfileProf *pf)
+{
+    if (strcmp(pf->type, DEBUG_TYPE) == 0) {
+        if (strlen((char *)pf->bundleInfo.devCert) == 0) {
+            LOG_ERROR("debug app, dev cert null");
+            return V_ERR;
+        }
+    } else if (strcmp(pf->type, RELEASE_TYPE) == 0) {
+        if (strlen((char *)pf->bundleInfo.releaseCert) == 0) {
+            LOG_ERROR("debug app, dev cert null");
+            return V_ERR;
+        }
+    } else {
+        LOG_PRINT_STR("invalid app type: %s", pf->type);
+        return V_ERR;
+    }
+    return V_OK;
+}
+
+static int VerifyUdid(const ProfileProf *pf)
+{
+    unsigned int size = UDID_VERIFY_BYTES + 1;
+    if (pf->debugInfo.devidNum > MAX_UDID_NUM) {
+        LOG_ERROR("udid num exceed maximum");
+        return V_ERR;
+    }
+    unsigned char *udid = APPV_MALLOC(size);
+    if (udid == NULL) {
+        LOG_ERROR("udid is null");
+        return V_ERR;
+    }
+    (void)memset_s(udid, size, 0, size);
+    int result = InquiryDeviceUdid(udid, size);
+    if (result != INQUIRY_UDID_OK) {
+        free(udid);
+        LOG_ERROR("get udid fail");
+        return V_ERR;
+    }
+    for (int i = 0; i < pf->debugInfo.devidNum; i++) {
+        if (strcmp((const char *)pf->debugInfo.deviceId[i], (const char *)udid) == 0) {
+            LOG_INFO("find right udid");
+            free(udid);
+            udid = NULL;
+            return V_OK;
+        }
+    }
+    free(udid);
+    udid = NULL;
+    LOG_ERROR("udid invalid");
+    return V_ERR;
+}
+
+static int VerifyDebugInfo(const ProfileProf *pf)
+{
+    if (strcmp(pf->type, DEBUG_TYPE) != 0) {
+        LOG_INFO("not debug app, return ok");
+        return V_OK;
+    }
+    LOG_PRINT_STR("devid type: %s", pf->debugInfo.devIdType);
+    int ret;
+    if (strcmp(pf->debugInfo.devIdType, "udid") == 0) {
+        ret = VerifyUdid(pf);
+    } else {
+        LOG_ERROR("devid type invalid");
+        ret = V_ERR;
+    }
+    return ret;
+}
+
+int VerifyProfileContent(const ProfileProf *pf)
+{
+    P_NULL_RETURN_WTTH_LOG(pf);
+    int ret = VerifyAppTypeAndDistribution(pf);
+    if (ret != V_OK) {
+        LOG_PRINT_STR("invalid profile distribution type : %s", pf->appDistType);
+        return V_ERR_INVALID_DISP_TYPE;
+    }
+    ret = VerifyAppBundleInfo(pf);
+    if (ret != V_OK) {
+        LOG_ERROR("invalid profile app bundle info");
+        return V_ERR_INVALID_APP_BUNDLE;
+    }
+    /* verify debug device id */
+    ret = VerifyDebugInfo(pf);
+    if (ret != V_OK) {
+        LOG_ERROR("validate debug info");
+        return V_ERR_INVALID_DEVID;
+    }
+    return V_OK;
+}
diff --git a/base/security/appverify/interfaces/innerkits/appverify_lite/src/app_verify.c b/base/security/appverify/interfaces/innerkits/appverify_lite/src/app_verify.c
new file mode 100644
index 00000000..ea478149
--- /dev/null
+++ b/base/security/appverify/interfaces/innerkits/appverify_lite/src/app_verify.c
@@ -0,0 +1,1230 @@
+/*
+ * Copyright (c) 2020 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "app_verify.h"
+#include <fcntl.h>
+#include <stdbool.h>
+#include <string.h>
+#include <sys/stat.h>
+#include <sys/types.h>
+#include <unistd.h>
+#include "app_centraldirectory.h"
+#include "app_common.h"
+#include "app_file.h"
+#include "app_provision.h"
+#include "app_verify_hap.h"
+#include "mbedtls/base64.h"
+#include "mbedtls/md.h"
+#include "mbedtls/pk.h"
+#include "mbedtls/x509_crt.h"
+#include "mbedtls_pkcs7.h"
+#include "securec.h"
+
+static const TrustAppCert g_trustAppList[] = {
+    {
+        .maxCertPath = CERT_MAX_DEPTH,
+        .name = "huawei app gallary",
+        .appSignCert = "C=CN, O=Huawei, OU=HOS AppGallery, CN=HOS AppGallery Application Release",
+        .profileSignCert = "C=CN, O=Huawei, OU=HOS AppGallery, CN=HOS Profile Management",
+        .profileDebugSignCert = "C=CN, O=Huawei, OU=HOS AppGallery, CN=HOS Profile Management Debug",
+        .issueCA = "C=CN, O=Huawei, OU=Huawei CBG, CN=Huawei CBG Software Signing Service CA",
+    },
+    {
+        .maxCertPath = CERT_MAX_DEPTH,
+        .name = "huawei system apps",
+        .appSignCert = "C=CN, O=Huawei CBG, OU=HOS Development Team, CN=HOS Application Provision Release",
+        .profileSignCert = "C=CN, O=Huawei CBG, OU=HOS Development Team, CN=HOS Application Provision Profile Release",
+        .profileDebugSignCert =
+            "C=CN, O=Huawei CBG, OU=HOS Development Team, CN=HOS Application Provision Profile Release_Debug",
+        .issueCA = "C=CN, O=Huawei, OU=Huawei CBG, CN=Huawei CBG Software Signing Service CA",
+    },
+    {
+        .maxCertPath = CERT_MAX_DEPTH,
+        .name = "huawei system apps",
+        .appSignCert = "C=CN, O=OpenHarmony, OU=OpenHarmony Development Team, CN=OpenHarmony Software Signature",
+        .profileSignCert = "C=CN, O=OpenHarmony, OU=OpenHarmony Development Team, CN=OpenHarmony Software Signature",
+        .profileDebugSignCert = "C=CN, O=OpenHarmony, OU=OpenHarmony Development Team, CN=OpenHarmony Software Signature",
+        .issueCA = "C=CN, O=OpenHarmony, OU=OpenHarmony Development Team, CN=OpenHarmony Software Signature",
+    },
+};
+
+static const TrustAppCert g_trustAppListTest[] = {
+    {
+        .maxCertPath = CERT_MAX_DEPTH,
+        .name = "huawei app gallary",
+        .appSignCert = "C=CN, O=Huawei, OU=HOS AppGallery, CN=HOS AppGallery Application Release",
+        .profileSignCert = "C=CN, O=Huawei, OU=HOS AppGallery, CN=HOS Profile Management",
+        .profileDebugSignCert = "C=CN, O=Huawei, OU=HOS AppGallery, CN=HOS Profile Management Debug",
+        .issueCA = "C=CN, O=Huawei, OU=Huawei CBG, CN=Huawei CBG Software Signing Service CA Test",
+    },
+    {
+        .maxCertPath = CERT_MAX_DEPTH,
+        .name = "huawei system apps",
+        .appSignCert = "C=CN, O=Huawei CBG, OU=HOS Development Team, CN=HOS Application Provision Dev",
+        .profileSignCert = "C=CN, O=Huawei CBG, OU=HOS Development Team, CN=HOS Application Provision Profile Dev",
+        .profileDebugSignCert =
+            "C=CN, O=Huawei CBG, OU=HOS Development Team, CN=HOS Application Provision Profile Dev_Debug",
+        .issueCA = "C=CN, O=Huawei, OU=Huawei CBG, CN=Huawei CBG Software Signing Service CA Test",
+    },
+};
+
+static bool g_isDebugMode = false;
+
+static bool g_isActsMode = false;
+
+static void SignHeadN2H(HwSignHead *signHead)
+{
+    signHead->blockNum = HapGetInt((unsigned char *)&signHead->blockNum, sizeof(signHead->blockNum));
+    signHead->size = HapGetInt64((unsigned char *)&signHead->size, sizeof(signHead->size));
+    signHead->magicLow = HapGetInt64((unsigned char *)&signHead->magicLow, sizeof(signHead->magicLow));
+    signHead->magicHigh = HapGetInt64((unsigned char *)&signHead->magicHigh, sizeof(signHead->magicHigh));
+    signHead->version = HapGetInt((unsigned char *)&signHead->version, sizeof(signHead->version));
+    return;
+}
+
+static void BlockHeadN2H(BlockHead *blockHead)
+{
+    blockHead->type = HapGetInt((unsigned char *)&blockHead->type, sizeof(blockHead->type));
+    blockHead->length = HapGetInt((unsigned char *)&blockHead->length, sizeof(blockHead->length));
+    blockHead->offset = HapGetInt((unsigned char *)&blockHead->offset, sizeof(blockHead->offset));
+    return;
+}
+
+static void ContentN2H(ContentInfo *content)
+{
+    content->blockNum = HapGetInt((unsigned char *)&content->blockNum, sizeof(content->blockNum));
+    content->size = HapGetInt((unsigned char *)&content->size, sizeof(content->size));
+    content->algId = HapGetInt((unsigned char *)&content->algId, sizeof(content->algId));
+    content->length = HapGetInt((unsigned char *)&content->length, sizeof(content->length));
+    return;
+}
+
+static int GetSignHead(const FileRead *file, SignatureInfo *signInfo)
+{
+    struct stat fileSt;
+    int ret = fstat(file->fp, &fileSt);
+    if ((ret != 0) || (fileSt.st_size < sizeof(HwSignHead))) {
+        LOG_ERROR("fstat error, %d, filelen: %d", ret, (int)fileSt.st_size);
+        return V_ERR_GET_SIGNHEAD;
+    }
+    if (!FindSignature(file, signInfo)) {
+        LOG_ERROR("find signature error");
+        return V_ERR_GET_SIGNHEAD;
+    }
+    if (signInfo->hapCoreDirOffset < sizeof(HwSignHead)) {
+        LOG_ERROR("hapCoreDirOffset error, %d", signInfo->hapCoreDirOffset);
+        return V_ERR_GET_SIGNHEAD;
+    }
+    ret = lseek(file->fp, signInfo->hapCoreDirOffset - sizeof(HwSignHead), SEEK_SET);
+    if (ret < 0) {
+        LOG_ERROR("lseek error, %d", ret);
+        return V_ERR_GET_SIGNHEAD;
+    }
+    HwSignHead *signHead = APPV_MALLOC(sizeof(HwSignHead));
+    P_NULL_RETURN_WTTH_LOG(signHead);
+    int readLen = read(file->fp, signHead, sizeof(HwSignHead));
+    if (readLen != sizeof(HwSignHead)) {
+        LOG_ERROR("readLen %d, %d", readLen, (int)sizeof(HwSignHead));
+        APPV_FREE(signHead);
+        return V_ERR_GET_SIGNHEAD;
+    }
+    SignHeadN2H(signHead);
+    if (signHead->magicLow != HAP_SIG_BLOCK_MAGIC_LO || signHead->magicHigh != HAP_SIG_BLOCK_MAGIC_HI) {
+        LOG_ERROR("sign head magic invalid");
+        APPV_FREE(signHead);
+        return V_ERR_GET_SIGNHEAD;
+    }
+    LOG_INFO("sign head: size: %llu, blockNum:0x%x", signHead->size, signHead->blockNum);
+    signInfo->signHead = signHead;
+    signInfo->fullSignBlockOffset = signInfo->hapCoreDirOffset - (int)signHead->size;
+    signInfo->fileSize = fileSt.st_size;
+    if (signInfo->fullSignBlockOffset <= 0 || signInfo->fullSignBlockOffset >= signInfo->hapCoreDirOffset) {
+        LOG_ERROR("fullSignBlockOffset invalid");
+        APPV_FREE(signHead);
+        return V_ERR_GET_SIGNHEAD;
+    }
+    return V_OK;
+}
+
+static int FindBlockHead(const SignatureInfo *signInfo, int fp, int blockType, BlockHead *block)
+{
+    HwSignHead *signH = signInfo->signHead;
+    /* find signature block */
+    lseek(fp, signInfo->fullSignBlockOffset, SEEK_SET);
+    int num = signH->blockNum;
+    if (num > MAX_BLOCK_NUM) {
+        return V_ERR;
+    }
+    while (num-- > 0) {
+        int readLen = read(fp, block, sizeof(BlockHead));
+        if (readLen != sizeof(BlockHead)) {
+            LOG_ERROR("find block head , read err %d, %d", readLen, (int)sizeof(BlockHead));
+            return V_ERR;
+        }
+        int type = HapGetInt((unsigned char *)&block->type, sizeof(block->type));
+        LOG_ERROR("find block type: %0x", type);
+        if (type == blockType) {
+            BlockHeadN2H(block);
+            return V_OK;
+        }
+    }
+    LOG_ERROR("get sign block by type failed, type: %d", blockType);
+    return V_ERR;
+}
+
+char *GetSignBlockByType(const SignatureInfo *signInfo, int fp, int blockType, int *len, BlockHead *blockHead)
+{
+    if (signInfo == NULL || blockHead == NULL) {
+        return NULL;
+    }
+    int ret = FindBlockHead(signInfo, fp, blockType, blockHead);
+    if (ret != V_OK) {
+        LOG_ERROR("find block head error");
+        return NULL;
+    }
+    LOG_INFO("type: %u, len: %u, offset: %u signoffset: %d",
+        blockHead->type, blockHead->length, blockHead->offset, signInfo->fullSignBlockOffset);
+    /* sign block head length always 0
+        rawdata
+        xx block head
+        signdata
+        hwsignhead
+    */
+    if (blockHead->length == 0 || blockHead->length > (signInfo->hapCoreDirOffset - signInfo->fullSignBlockOffset)) {
+        return NULL;
+    }
+    if ((blockHead->length + 1) >= signInfo->fileSize) {
+        return NULL;
+    }
+    char *buf = APPV_MALLOC(blockHead->length + 1);
+    if (buf == NULL) {
+        LOG_ERROR("malloc error");
+        return NULL;
+    }
+    buf[blockHead->length] = '\0';
+    struct stat fileSt;
+    ret = fstat(fp, &fileSt);
+    if ((ret != 0) || (fileSt.st_size < signInfo->fullSignBlockOffset + blockHead->offset + blockHead->length)) {
+        LOG_ERROR("fstat error, %d, filelen: %d", ret, (int)fileSt.st_size);
+        APPV_FREE(buf);
+        return NULL;
+    }
+    lseek(fp, signInfo->fullSignBlockOffset + blockHead->offset, SEEK_SET);
+    int readLen = read(fp, buf, blockHead->length);
+    if (readLen != blockHead->length) {
+        LOG_ERROR("read error: %d, %d", readLen, blockHead->length);
+        APPV_FREE(buf);
+        return NULL;
+    }
+    *len = readLen;
+    LOG_INFO("buf begin");
+    return buf;
+}
+
+int GetHashUnitLen(int hashAlg)
+{
+    LOG_INFO("algId: %d", hashAlg);
+    return mbedtls_md_get_size(mbedtls_md_info_from_type((mbedtls_md_type_t)hashAlg));
+}
+
+static int CalcCmpContHash(const Pkcs7 *pkcs7, const SignerInfo *signer,
+                           mbedtls_md_type_t algType, unsigned char *hash, size_t *hashLen)
+{
+    int rc;
+    unsigned char *input = NULL;
+    size_t inputLen;
+
+    /* calc orinal context hash */
+    rc = PKCS7_GetContentData((Pkcs7 *)pkcs7, &input, &inputLen);
+    P_ERR_RETURN_WTTH_LOG(rc);
+
+    rc = mbedtls_md(mbedtls_md_info_from_type(algType), input, inputLen, hash);
+    if (rc) {
+        LOG_ERROR("Error: calc digest failed");
+        return rc;
+    }
+    *hashLen = mbedtls_md_get_size(mbedtls_md_info_from_type(algType));
+
+    /* compare the calc hash with the attributes hash */
+    unsigned char *digInAttr = NULL;
+    size_t digInAttrLen;
+    rc = PKCS7_GetDigestInSignerAuthAttr((SignerInfo *)signer, &digInAttr, &digInAttrLen);
+    if (rc != V_OK) {
+        LOG_ERROR("PKCS7_GetDigestInSignerAuthAttr error: %d", rc);
+        return rc;
+    }
+    if (digInAttrLen != *hashLen) {
+        LOG_ERROR("Error: content hash len is not equal with attr's hash len");
+        return V_ERR;
+    }
+    if (memcmp(hash, digInAttr, digInAttrLen) != 0) {
+        LOG_ERROR("Error: content hash not equal with attr hash");
+        return V_ERR;
+    }
+    return V_OK;
+}
+
+static int CalcDigest(const Pkcs7 *pkcs7, const SignerInfo *signer,
+                      mbedtls_md_type_t algType, unsigned char *hash, size_t *hashLen)
+{
+    int rc;
+    unsigned char *input = NULL;
+    size_t inputLen;
+    rc = CalcCmpContHash(pkcs7, signer, algType, hash, hashLen);
+    if (rc != V_OK) {
+        LOG_ERROR("Error: content hash not equal with attr hash");
+        return rc;
+    }
+    LOG_INFO("signer context hash equal with attr hash");
+
+    /* calc the attribute hash */
+    rc = PKCS7_GetSignerAuthAttr(signer, &input, &inputLen);
+    if (rc != V_OK) {
+        LOG_ERROR("Error: PKCS7_GetSignerAuthAttr failed ret: %d", rc);
+        return rc;
+    }
+    rc = mbedtls_md(mbedtls_md_info_from_type(algType), input, inputLen, hash);
+    if (rc != V_OK) {
+        LOG_ERROR("Error: calc digest failed ret: %d", rc);
+        return rc;
+    }
+    *hashLen = mbedtls_md_get_size(mbedtls_md_info_from_type(algType));
+    return V_OK;
+}
+
+static int VerifyRawHash(const SignatureInfo *signInfo, const FileRead *fileRead, const Pkcs7 *pkcs7Handle)
+{
+    /* parse content */
+    unsigned char *input = NULL;
+    size_t inputLen = 0;
+    /* calc orinal context hash */
+    int ret = PKCS7_GetContentData((Pkcs7 *)pkcs7Handle, &input, &inputLen);
+    if (ret != V_OK) {
+        LOG_ERROR("get content info error: %d", ret);
+        return ret;
+    }
+    LOG_INFO("content: len: %d", (int)inputLen);
+
+    ContentInfo *content = APPV_MALLOC(sizeof(ContentInfo));
+    P_NULL_RETURN_WTTH_LOG(content);
+
+    ret = memcpy_s(content, sizeof(ContentInfo), input, inputLen);
+    if (ret != V_OK) {
+        LOG_ERROR("mem cpy error, ret: %d", ret);
+        APPV_FREE(content);
+        return ret;
+    }
+    ContentN2H(content);
+    content->algId = GetDigestAlgorithmId((unsigned int)content->algId);
+    if (content->algId != HASH_ALG_SHA256 && content->algId != HASH_ALG_SHA384 && content->algId != HASH_ALG_SHA512) {
+        LOG_ERROR("hash alg invalid");
+        APPV_FREE(content);
+        return V_ERR;
+    }
+    HapBuf actualDigest = {0};
+    int rootHashLen = GetHashUnitLen(content->algId);
+    if (!CreateHapBuffer(&actualDigest, rootHashLen)) {
+        LOG_ERROR("create buf fail");
+        APPV_FREE(content);
+        return V_ERR;
+    }
+    if (!VerifyIntegrityChunk(content->algId, fileRead->fp, signInfo, &actualDigest)) {
+        LOG_ERROR("get raw hash failed");
+        ClearHapBuffer(&actualDigest);
+        APPV_FREE(content);
+        return V_ERR;
+    }
+    if ((actualDigest.len != content->length) || (memcmp(actualDigest.buffer, content->hash, actualDigest.len) != 0)) {
+        LOG_ERROR("hash diff");
+        APPV_FREE(content);
+        ClearHapBuffer(&actualDigest);
+        return V_ERR_GET_HASH_DIFF;
+    }
+    APPV_FREE(content);
+    ClearHapBuffer(&actualDigest);
+    return V_OK;
+}
+
+static int GetCertTypeBySourceName(const TrustAppCert *cert)
+{
+    if (cert == NULL) {
+        return CERT_TYPE_OTHER;
+    } else if (strcmp(cert->name, "huawei app gallary") == 0) {
+        return CERT_TYPE_APPGALLARY;
+    } else if (strcmp(cert->name, "huawei system apps") == 0) {
+        return CERT_TYPE_SYETEM;
+    } else {
+        return CERT_TYPE_OTHER;
+    }
+}
+
+static const TrustAppCert *GetProfSourceBySigningCert(const SignerResovledInfo *signer,
+                                                      const TrustAppCert* trustList, int num)
+{
+    for (int i = 0; i < num; i++) {
+        if (strcmp(trustList[i].issueCA, signer->issuer) == 0) {
+            if (strcmp(trustList[i].profileSignCert, signer->subject) == 0 ||
+                strcmp(trustList[i].profileDebugSignCert, signer->subject) == 0) {
+                LOG_PRINT_STR("profile source name : %s", g_trustAppList[i].name);
+                return  &trustList[i];
+            }
+        }
+    }
+    return NULL;
+}
+
+static int GetProfileCertTypeBySignInfo(SignerResovledInfo *signer, int *certType)
+{
+    /* only support first signer cert */
+    const TrustAppCert *trustCert = GetProfSourceBySigningCert(signer, g_trustAppList,
+                                                               sizeof(g_trustAppList) / sizeof(TrustAppCert));
+    if (g_isDebugMode && trustCert == NULL) {
+        trustCert = GetProfSourceBySigningCert(signer, g_trustAppListTest,
+                                               sizeof(g_trustAppListTest) / sizeof(TrustAppCert));
+    }
+    /* check level */
+    if (trustCert != NULL && trustCert->maxCertPath < signer->depth) {
+        LOG_ERROR("cert maxdepth error: %d", signer->depth);
+        return V_ERR;
+    }
+    *certType = GetCertTypeBySourceName(trustCert);
+    return V_OK;
+}
+
+
+static const TrustAppCert *GetAppSourceBySigningCert(const SignerResovledInfo *signer,
+                                                     const TrustAppCert* trustList, int num)
+{
+    for (int i = 0; i < num; i++) {
+        if (strcmp(trustList[i].appSignCert, signer->subject) == 0 &&
+            strcmp(trustList[i].issueCA, signer->issuer) == 0) {
+                return  &trustList[i];
+        }
+    }
+    return NULL;
+}
+
+static int GetAppCertTypeBySignInfo(SignerResovledInfo *signer, int *certType)
+{
+    /* only support first signer cert */
+    const TrustAppCert *trustCert = GetAppSourceBySigningCert(signer, g_trustAppList,
+                                                              sizeof(g_trustAppList) / sizeof(TrustAppCert));
+    if (g_isDebugMode && trustCert == NULL) {
+        trustCert = GetAppSourceBySigningCert(signer, g_trustAppListTest,
+                                              sizeof(g_trustAppListTest) / sizeof(TrustAppCert));
+    }
+    /* check level */
+    if (trustCert != NULL && trustCert->maxCertPath < signer->depth) {
+        LOG_ERROR("cert maxdepth error: %d %d", trustCert->maxCertPath, signer->depth);
+        return V_ERR;
+    }
+    *certType = GetCertTypeBySourceName(trustCert);
+    return V_OK;
+}
+
+/* get singer cert type by trust list */
+static int GetAppSingerCertType(Pkcs7 *pkcs7Handle, int *certType)
+{
+    SignersResovedInfo *sri = PKCS7_GetAllSignersResolvedInfo(pkcs7Handle);
+    if (sri == NULL || sri->nrOfSigners == 0) {
+        PKCS7_FreeAllSignersResolvedInfo(sri);
+        LOG_ERROR("Get all signer's resolved info failed");
+        return V_ERR;
+    }
+    int ret = GetAppCertTypeBySignInfo(&sri->signers[0], certType);
+    if (ret != V_OK) {
+        LOG_ERROR("get cert type by sign info failed: %d", ret);
+        PKCS7_FreeAllSignersResolvedInfo(sri);
+        return V_ERR;
+    }
+    PKCS7_FreeAllSignersResolvedInfo(sri);
+    return V_OK;
+}
+
+/* get singer cert type by trust list */
+static int GetProfileSingerCertType(Pkcs7 *pkcs7Handle, int *certType)
+{
+    SignersResovedInfo *sri = PKCS7_GetAllSignersResolvedInfo(pkcs7Handle);
+    if (sri == NULL) {
+        LOG_ERROR("Get all signer's resolved info failed");
+        return V_ERR;
+    }
+    int ret = GetProfileCertTypeBySignInfo(&sri->signers[0], certType);
+    if (ret != V_OK) {
+        LOG_ERROR("get cert type by sign info failed: %d", ret);
+        PKCS7_FreeAllSignersResolvedInfo(sri);
+        return V_ERR;
+    }
+    PKCS7_FreeAllSignersResolvedInfo(sri);
+    return V_OK;
+}
+
+/* verfiy profile data integrity with sign */
+static int VerifyProfileSignGetRaw(const char *buf, int len, char **profileContent, int *contentLen)
+{
+    /* verfiy */
+    char *profileData = NULL;
+    int certType;
+    unsigned char *input = NULL;
+    size_t inputLen;
+    Pkcs7 *pkcs7 = APPV_MALLOC(sizeof(Pkcs7));
+    P_NULL_RETURN_WTTH_LOG(pkcs7);
+
+    int ret = PKCS7_ParseSignedData((unsigned char *)buf, (size_t)len, pkcs7);
+    P_ERR_GOTO_WTTH_LOG(ret);
+
+    LOG_INFO("pkcs7 parse message sucess");
+
+    /* verify sign, rawdata */
+    ret = PKCS7_VerifyCertsChain(pkcs7);
+    P_ERR_GOTO_WTTH_LOG(ret);
+
+    LOG_INFO("Verify certs success");
+
+    ret = GetProfileSingerCertType(pkcs7, &certType);
+    P_ERR_GOTO_WTTH_LOG(ret);
+
+    if (certType == CERT_TYPE_OTHER) {
+        LOG_ERROR("cert type invalid");
+        ret = V_ERR;
+        goto EXIT;
+    }
+    ret = PKCS7_VerifySignerSignature(pkcs7, CalcDigest);
+    P_ERR_GOTO_WTTH_LOG(ret);
+    LOG_INFO("verify profile ok");
+
+    /* raw profile data: content */
+    ret = PKCS7_GetContentData(pkcs7, &input, &inputLen);
+    P_ERR_GOTO_WTTH_LOG(ret);
+
+    LOG_INFO("get profile sign content ok");
+
+    if (inputLen > MAX_PROFILE_SIZE || inputLen == 0) {
+        ret = V_ERR;
+        goto EXIT;
+    }
+    profileData = APPV_MALLOC(inputLen + 1);
+    P_NULL_GOTO_WTTH_LOG(profileData);
+
+    ret = memcpy_s(profileData, inputLen, input, inputLen);
+    profileData[inputLen] = '\0';
+    P_ERR_GOTO_WTTH_LOG(ret);
+
+    PKCS7_FreeRes(pkcs7);
+    APPV_FREE(pkcs7);
+    *profileContent = profileData;
+    *contentLen = (int)inputLen;
+    LOG_INFO("verify profile get raw data ok");
+    return V_OK;
+EXIT:
+    PKCS7_FreeRes(pkcs7);
+    APPV_FREE(pkcs7);
+    APPV_FREE(profileData);
+    return V_ERR;
+}
+static unsigned char *GetRsaPk(const mbedtls_pk_context *pk, int *len)
+{
+    unsigned char *buf = APPV_MALLOC(MAX_PK_BUF);
+    if (buf == NULL) {
+        LOG_ERROR("malloc error");
+        return NULL;
+    }
+    int ret = memset_s(buf, MAX_PK_BUF, 0, MAX_PK_BUF);
+    if (ret != V_OK) {
+        LOG_ERROR("memset error");
+        APPV_FREE(buf);
+        return NULL;
+    }
+    unsigned char *c = buf + MAX_PK_BUF;
+    int pkLen = mbedtls_pk_write_pubkey(&c, buf, pk);
+    LOG_INFO("GetRsaPk pkLen %d", pkLen);
+    if (pkLen < 0 || pkLen > MAX_PK_BUF) {
+        LOG_ERROR("get pk buf error");
+        APPV_FREE(buf);
+        return NULL;
+    }
+    unsigned char *pkBuf = APPV_MALLOC(pkLen);
+    if (pkBuf == NULL) {
+        LOG_ERROR("malloc error");
+        APPV_FREE(buf);
+        return NULL;
+    }
+    ret = memcpy_s(pkBuf, pkLen, c, pkLen);
+    if (ret != V_OK) {
+        LOG_ERROR("mem copy error: %d", ret);
+        APPV_FREE(buf);
+        APPV_FREE(pkBuf);
+        return NULL;
+    }
+    *len = pkLen;
+    APPV_FREE(buf);
+    return pkBuf;
+}
+
+static unsigned char *GetEcPk(const mbedtls_pk_context *pk, int *len)
+{
+    mbedtls_ecp_keypair *ecCtx = mbedtls_pk_ec(*pk);
+    if (ecCtx == NULL) {
+        LOG_ERROR("get ec pk error");
+        return NULL;
+    }
+    unsigned char *buf = APPV_MALLOC(MBEDTLS_ECP_MAX_PT_LEN);
+    if (buf == NULL) {
+        LOG_ERROR("malloc error");
+        return NULL;
+    }
+    int ret = mbedtls_ecp_point_write_binary(&ecCtx->grp, &ecCtx->Q,
+                                             MBEDTLS_ECP_PF_UNCOMPRESSED, (size_t *)len, buf, MBEDTLS_ECP_MAX_PT_LEN);
+    if (ret != V_OK) {
+        LOG_ERROR("get ecc pk key error");
+        APPV_FREE(buf);
+        return NULL;
+    }
+    LOG_INFO("GetEcPk *len %d", *len);
+    if (*len <= 0 || *len > MBEDTLS_ECP_MAX_PT_LEN) {
+        APPV_FREE(buf);
+        return NULL;
+    }
+    unsigned char *pkBuf = APPV_MALLOC(*len);
+    if (pkBuf == NULL) {
+        LOG_ERROR("malloc error");
+        APPV_FREE(buf);
+        return NULL;
+    }
+    ret = memcpy_s(pkBuf, *len, buf, *len);
+    if (ret != V_OK) {
+        LOG_ERROR("mem copy error: %d", ret);
+        APPV_FREE(buf);
+        APPV_FREE(pkBuf);
+        return NULL;
+    }
+    APPV_FREE(buf);
+    return pkBuf;
+}
+
+static unsigned char *GetPkBuf(const mbedtls_pk_context *pk, int *len)
+{
+    unsigned char *bufA = NULL;
+    if (mbedtls_pk_get_type(pk) == MBEDTLS_PK_RSA || mbedtls_pk_get_type(pk) == MBEDTLS_PK_RSASSA_PSS) {
+        bufA = GetRsaPk(pk, len);
+    } else if (mbedtls_pk_get_type(pk) == MBEDTLS_PK_ECDSA || mbedtls_pk_get_type(pk) == MBEDTLS_PK_ECKEY) {
+        bufA = GetEcPk(pk, len);
+    }
+    return bufA;
+}
+
+static int ParseCertGetPk(const char *certEncoded, AppSignPk *pk)
+{
+    mbedtls_x509_crt *cert = APPV_MALLOC(sizeof(mbedtls_x509_crt));
+    P_NULL_RETURN_WTTH_LOG(cert);
+
+    mbedtls_x509_crt_init(cert);
+    int ret = mbedtls_x509_crt_parse(cert, (unsigned char *)certEncoded, strlen(certEncoded) + 1);
+    if (ret != V_OK) {
+        LOG_ERROR("load cert failed, ret: %d", ret);
+        APPV_FREE(cert);
+        return V_ERR;
+    }
+    int len = 0;
+    unsigned char *pkBuf = GetPkBuf(&cert->pk, &len);
+    if (pkBuf == NULL) {
+        LOG_ERROR("get pk error");
+        mbedtls_x509_crt_free(cert);
+        APPV_FREE(cert);
+        return V_ERR;
+    }
+    pk->pk = (char *)pkBuf;
+    pk->len = len;
+    mbedtls_x509_crt_free(cert);
+    APPV_FREE(cert);
+    return V_OK;
+}
+
+static int GetAppSignPublicKey(const ProfileProf *profile, AppSignPk *pk)
+{
+    int ret;
+    /* release cert */
+    if (profile->bundleInfo.releaseCert &&
+        strlen((char *)profile->bundleInfo.releaseCert) != 0) {
+        ret = ParseCertGetPk((char *)profile->bundleInfo.releaseCert, pk);
+    } else {
+        ret = ParseCertGetPk((char *)profile->bundleInfo.devCert, pk);
+    }
+    if (ret != V_OK) {
+        LOG_ERROR("GetSignCertpk failed, ret: %d", ret);
+        return V_ERR_GET_CERT_PK;
+    }
+    return V_OK;
+}
+
+static void FreeAppSignPublicKey(AppSignPk *pk)
+{
+    if (pk->pk != NULL) {
+        APPV_FREE(pk->pk);
+    }
+    return;
+}
+
+int GetAppid(ProfileProf *profile)
+{
+    P_NULL_RETURN_RET_WTTH_LOG(profile, V_ERR);
+    AppSignPk pk = {0};
+    int ret = GetAppSignPublicKey(profile, &pk);
+    if (ret != V_OK) {
+        LOG_ERROR("get sign pk failed");
+        return ret;
+    }
+    /* base64 */
+    size_t useLen = 0;
+    mbedtls_base64_encode(NULL, 0, &useLen, (unsigned char *)pk.pk, pk.len);
+    int bundleNameLen = strlen(profile->bundleInfo.bundleName);
+    int appidLen = bundleNameLen + useLen + 1 + 1;
+
+    LOG_INFO("GetAppid %d", appidLen);
+    if (useLen > MAX_KEY_PAIR_SIZE) {
+        return V_ERR;
+    }
+    char *appid = APPV_MALLOC(appidLen);
+    if (appid == NULL) {
+        LOG_ERROR("malloc failed");
+        FreeAppSignPublicKey(&pk);
+        return V_ERR_MALLOC;
+    }
+    appid[appidLen - 1] = '\0';
+    ret = snprintf_s(appid, appidLen, bundleNameLen + 1, "%s_", profile->bundleInfo.bundleName);
+    if (ret < 0) {
+        LOG_ERROR("snprintf error ret: %d", ret);
+        APPV_FREE(appid);
+        FreeAppSignPublicKey(&pk);
+        return V_ERR_GET_APPID;
+    }
+    ret = mbedtls_base64_encode((unsigned char *)appid + bundleNameLen + 1,
+        appidLen - bundleNameLen - 1, &useLen, (unsigned char *)pk.pk, pk.len);
+    if (ret != V_OK) {
+        LOG_ERROR("base 64 encode error");
+        APPV_FREE(appid);
+        FreeAppSignPublicKey(&pk);
+        return V_ERR_GET_APPID;
+    }
+    profile->appid = appid;
+    LOG_INFO("appid len: %d, bL len: %d, base64: %d", appidLen, bundleNameLen, (int)useLen);
+    LOG_PRINT_STR("%s", appid);
+    FreeAppSignPublicKey(&pk);
+    return V_OK;
+}
+
+static int VerifyProfGetContent(int fp, const SignatureInfo *signInfo, int certType, ProfileProf *pf)
+{
+    char *profBuf = NULL;
+    int len = 0;
+    BlockHead blockHead = {0};
+    int ret;
+    int rawLen = 0;
+    char *rawBuf = GetSignBlockByType(signInfo, fp, PROFILE_BLOCK_WITHSIGN_TYPE, &rawLen, &blockHead);
+    P_NULL_RETURN_RET_WTTH_LOG(rawBuf, V_ERR_GET_PROFILE_DATA);
+    LOG_INFO("certType %d", certType);
+    /* app gallary with no sign */
+    if (certType == CERT_TYPE_APPGALLARY) {
+        profBuf = rawBuf;
+        len = rawLen;
+    } else {
+        /* verify profile */
+        ret = VerifyProfileSignGetRaw(rawBuf, rawLen, &profBuf, &len);
+        APPV_FREE(rawBuf);
+        P_ERR_RETURN_WTTH_LOG(ret);
+    }
+
+    ret = ParseProfile(profBuf, len, pf);
+    if (ret != V_OK) {
+        LOG_ERROR("GetSignBlock error");
+        APPV_FREE(profBuf);
+        return V_ERR_GET_PARSE_PROFILE;
+    }
+    APPV_FREE(profBuf);
+
+    ret = VerifyProfileContent(pf);
+    P_ERR_GOTO_WTTH_LOG(ret);
+
+    ret = GetAppid(pf);
+    P_ERR_GOTO_WTTH_LOG(ret);
+
+    return V_OK;
+EXIT:
+    ProfFreeData(pf);
+    return ret;
+}
+
+static int CmpCert(const mbedtls_x509_crt *certA, const CertInfo *binSignCert)
+{
+    P_NULL_RETURN_RET_WTTH_LOG(certA, V_ERR);
+    P_NULL_RETURN_RET_WTTH_LOG(binSignCert, V_ERR);
+    /* cmp subject and issuer */
+    if (certA->subject_raw.len != binSignCert->subjectLen ||
+        memcmp(certA->subject_raw.p, binSignCert->subject, certA->subject_raw.len)) {
+        LOG_ERROR("cert subject diff");
+        return V_ERR;
+    }
+
+    if (certA->issuer_raw.len != binSignCert->issuerLen ||
+        memcmp(certA->issuer_raw.p, binSignCert->issuer, certA->issuer_raw.len)) {
+        LOG_ERROR("cert issuer diff");
+        return V_ERR;
+    }
+
+    /* V_OK means same */
+    if (mbedtls_pk_get_type(&certA->pk) != binSignCert->pkType) {
+        LOG_ERROR("pk type diff");
+        return V_ERR;
+    }
+    int lenA = 0;
+    unsigned char *bufA = GetPkBuf(&certA->pk, &lenA);
+    P_NULL_RETURN_RET_WTTH_LOG(bufA, V_ERR);
+
+    if (lenA != binSignCert->pkLen) {
+        LOG_ERROR("pkA len diff %d, %d", lenA, binSignCert->pkLen);
+        APPV_FREE(bufA);
+        return V_ERR;
+    }
+
+    if (memcmp(bufA, binSignCert->pkBuf, lenA)) {
+        LOG_ERROR("pk content diffrent");
+        APPV_FREE(bufA);
+        return V_ERR;
+    }
+    APPV_FREE(bufA);
+    LOG_INFO("compare cert consistent");
+    return V_OK;
+}
+
+int LoadCertAndCmpDest(const unsigned char *certBase64, const CertInfo *binSignCert)
+{
+    if (certBase64 == NULL || binSignCert == NULL) {
+        return V_ERR;
+    }
+    mbedtls_x509_crt cert;
+    mbedtls_x509_crt_init(&cert);
+    int ret = mbedtls_x509_crt_parse(&cert, certBase64, strlen((char *)certBase64) + 1);
+    if (ret != V_OK) {
+        LOG_ERROR("load release cert failed");
+        LOG_PRINT_STR("%s", certBase64);
+        return V_ERR;
+    }
+    /* cmp cert */
+    if (CmpCert(&cert, binSignCert) == V_OK) {
+        LOG_INFO("cert consistent");
+        mbedtls_x509_crt_free(&cert);
+        return V_OK;
+    }
+    LOG_ERROR("cert inconsistent");
+    mbedtls_x509_crt_free(&cert);
+    return V_ERR;
+}
+
+static int CheckReleaseAppSign(const CertInfo *binSignCert, const ProfileProf *pf)
+{
+    /* if distribution type is app_gallery, return error */
+    if (strcmp(pf->appDistType, "app_gallery") == 0) {
+        LOG_ERROR("app release, distribution type is app_gallery, return error");
+        return V_ERR;
+    }
+
+    if (strlen((char *)pf->bundleInfo.releaseCert) == 0) {
+        LOG_ERROR("release app, release Cert null");
+        return V_ERR;
+    }
+    int ret = LoadCertAndCmpDest(pf->bundleInfo.releaseCert, binSignCert);
+    if (ret == V_OK) {
+        LOG_INFO("dev cert consistent");
+        return V_OK;
+    }
+    LOG_ERROR("app sign cert not consistent with profile cert");
+    return V_ERR;
+}
+
+static int CheckDebugAppSign(CertInfo *binSignCert, const ProfileProf *pf)
+{
+    if (strlen((char *)pf->bundleInfo.devCert) == 0) {
+        LOG_ERROR("debug app, devCert null");
+        return V_ERR;
+    }
+    int ret = LoadCertAndCmpDest(pf->bundleInfo.devCert, binSignCert);
+    if (ret == V_OK) {
+        LOG_INFO("dev cert consistent");
+        return V_OK;
+    }
+    if (strlen((char *)pf->bundleInfo.releaseCert) != 0) {
+        ret = LoadCertAndCmpDest(pf->bundleInfo.releaseCert, binSignCert);
+        if (ret == V_OK) {
+            LOG_INFO("release cert consistent");
+            return V_OK;
+        }
+    }
+    LOG_ERROR("app sign cert not consistent with profile cert");
+    return V_ERR;
+}
+
+static int CheckAppSignCertWithProfile(int appCertType, CertInfo *binSignCert, ProfileProf *pf)
+{
+    /* cert type appgallary or system, not check */
+    if (appCertType == CERT_TYPE_APPGALLARY || appCertType == CERT_TYPE_SYETEM) {
+        LOG_INFO("app type : %d, return OK", appCertType);
+        return V_OK;
+    }
+
+    int ret = V_ERR;
+    /* debug app, app cert consistent with profile dev or release cert */
+    if (strcmp(DEBUG_TYPE, (char *)pf->type) == 0) {
+        ret = CheckDebugAppSign(binSignCert, pf);
+    } else if (strcmp(RELEASE_TYPE, pf->type) == 0) {
+        ret = CheckReleaseAppSign(binSignCert, pf);
+    }
+
+    LOG_INFO("check app sign cert ret : %d", ret);
+    return ret;
+}
+
+static int CertInfoInit(CertInfo *certInfo)
+{
+    int ret = memset_s(certInfo, sizeof(CertInfo), 0, sizeof(CertInfo));
+    if (ret != V_OK) {
+        LOG_ERROR("memset error");
+    }
+    return ret;
+}
+
+void FreeCertInfo(CertInfo *certInfo)
+{
+    if (certInfo == NULL) {
+        return;
+    }
+    if (certInfo->issuer != NULL) {
+        APPV_FREE(certInfo->issuer);
+        certInfo->issuerLen = 0;
+    }
+
+    if (certInfo->subject != NULL) {
+        APPV_FREE(certInfo->subject);
+        certInfo->subjectLen = 0;
+    }
+
+    if (certInfo->pkBuf != NULL) {
+        APPV_FREE(certInfo->pkBuf);
+        certInfo->pkLen = 0;
+    }
+    return;
+}
+
+static int GetCertInfo(const mbedtls_x509_crt *ctr, CertInfo **binSignCert)
+{
+    CertInfo *certInfo = APPV_MALLOC(sizeof(CertInfo));
+    P_NULL_RETURN_RET_WTTH_LOG(certInfo, V_ERR_MALLOC);
+
+    int ret = CertInfoInit(certInfo);
+    if (ret != V_OK) {
+        LOG_ERROR("cert info init");
+        ret = V_ERR_MEMSET;
+        goto EXIT;
+    }
+    certInfo->issuerLen = ctr->issuer_raw.len;
+    certInfo->subjectLen = ctr->subject_raw.len;
+    if (certInfo->issuerLen == 0 || certInfo->issuerLen > MAX_PROFILE_SIZE ||
+        certInfo->subjectLen == 0 || certInfo->subjectLen > MAX_PROFILE_SIZE) {
+        ret = V_ERR_MALLOC;
+        goto EXIT;
+    }
+    certInfo->issuer = APPV_MALLOC(certInfo->issuerLen + 1);
+    if (certInfo->issuer == NULL) {
+        ret = V_ERR_MALLOC;
+        goto EXIT;
+    }
+    certInfo->issuer[certInfo->issuerLen] = '\0';
+    ret = memcpy_s(certInfo->issuer, certInfo->issuerLen, ctr->issuer_raw.p, ctr->issuer_raw.len);
+    if (ret != V_OK) {
+        ret = V_ERR_MEMCPY;
+        goto EXIT;
+    }
+    certInfo->subject = APPV_MALLOC(certInfo->subjectLen + 1);
+    if (certInfo->subject == NULL) {
+        ret = V_ERR_MALLOC;
+        goto EXIT;
+    }
+    certInfo->subject[certInfo->subjectLen] = '\0';
+    ret = memcpy_s(certInfo->subject, certInfo->subjectLen, ctr->subject_raw.p, ctr->subject_raw.len);
+    if (ret != V_OK) {
+        ret = V_ERR_MEMCPY;
+        goto EXIT;
+    }
+    certInfo->pkType = mbedtls_pk_get_type(&ctr->pk);
+    certInfo->pkBuf = (char *)GetPkBuf(&ctr->pk, &certInfo->pkLen);
+    if (certInfo->pkBuf == NULL) {
+        LOG_ERROR("get pk error");
+        ret = V_ERR;
+        goto EXIT;
+    }
+    *binSignCert = certInfo;
+    return V_OK;
+EXIT:
+    FreeCertInfo(certInfo);
+    APPV_FREE(certInfo);
+    return ret;
+}
+
+static int VerfiyAppSourceGetProfile(int fp, const SignatureInfo *signInfo,
+    int certType, CertInfo *binSignCert, ProfileProf *pf)
+{
+    int ret = VerifyProfGetContent(fp, signInfo, certType, pf);
+    if (ret != V_OK) {
+        LOG_ERROR("VerifyProfGetContent error: %d", ret);
+        return ret;
+    }
+    LOG_INFO("verify prof get content success");
+
+    /* verfiy profile cert and app sign cert */
+    ret = CheckAppSignCertWithProfile(certType, binSignCert, pf);
+    if (ret != V_OK) {
+        LOG_ERROR("CheckAppSignCertWithProfile error: %d", ret);
+        ProfFreeData(pf);
+        return V_ERR_VERFIY_PROF_CERT;
+    }
+
+    /* free cert */
+    FREE_IF_NOT_NULL(pf->bundleInfo.devCert);
+    FREE_IF_NOT_NULL(pf->bundleInfo.releaseCert);
+
+    LOG_INFO("verfiy app source success");
+    return V_OK;
+}
+
+static int VerifyAppSignPkcsData(const FileRead *fileRead, const SignatureInfo *signInfo, const Pkcs7 *pkcs7Handle)
+{
+    /*  verify sign, rawdata */
+    int ret = PKCS7_VerifyCertsChain(pkcs7Handle);
+    if (ret != V_OK) {
+        LOG_ERROR("Verify certs failed, ret: %d", ret);
+        return V_ERR_VERIFY_CERT_CHAIN;
+    }
+    LOG_INFO("Verify certs success");
+
+    ret = VerifyRawHash(signInfo, fileRead, pkcs7Handle);
+    if (ret != V_OK) {
+        LOG_ERROR("VerifyRawHash failed : %d", ret);
+        return ret;
+    }
+    LOG_INFO("VerifyRawHash success");
+
+    ret = PKCS7_VerifySignerSignature(pkcs7Handle, CalcDigest);
+    if (ret != V_OK) {
+        LOG_ERROR("pkcs7 verify signer signature failed : %d", ret);
+        return V_ERR_VERIFY_SIGNATURE;
+    }
+
+    return V_OK;
+}
+
+static Pkcs7 *GetBinSignPkcs(const char *signBuf, int len)
+{
+    Pkcs7 *pkcs7 = APPV_MALLOC(sizeof(Pkcs7));
+    if (pkcs7 == NULL) {
+        LOG_ERROR("malloc error");
+        return NULL;
+    }
+    int ret = PKCS7_ParseSignedData((unsigned char *)signBuf, (size_t)len, pkcs7);
+    if (ret != V_OK) {
+        LOG_ERROR("pkcs7parse message failed, ret: %d", ret);
+        APPV_FREE(pkcs7);
+        return NULL;
+    }
+    return pkcs7;
+}
+
+static FileRead *GetFileRead(int fp, int offset, int size)
+{
+    /* raw buf len = sign block head offset */
+    FileRead *fileRead = APPV_MALLOC(sizeof(FileRead));
+    if (fileRead == NULL) {
+        LOG_ERROR("malloc error");
+        return NULL;
+    }
+    fileRead->fp = fp;
+    fileRead->offset = offset;
+    fileRead->len = size;
+    return fileRead;
+}
+static int VerifyBinSign(SignatureInfo *signInfo, int fp, CertInfo **signCert, int *certType)
+{
+    int blockLen;
+    BlockHead blockHead = {0};
+    FileRead *fileRead = NULL;
+    int ret;
+
+    char *signBuf = GetSignBlockByType(signInfo, fp, SIGNATURE_BLOCK_TYPE, &blockLen, &blockHead);
+    P_NULL_RETURN_RET_WTTH_LOG(signBuf, V_ERR_GET_SIGN_BLOCK);
+
+    Pkcs7 *pkcs7 = GetBinSignPkcs(signBuf, (size_t)blockLen);
+    if (pkcs7 == NULL) {
+        LOG_ERROR("GetBinSignPkcs failed");
+        APPV_FREE(signBuf);
+        return V_ERR_PARSE_PKC7_DATA;
+    }
+    /* pkcs7 handle the content of signBuf, do not free signBuf */
+    LOG_INFO("pkcs7 parse message sucess");
+
+    /* raw buf len = sign block head offset */
+    fileRead = GetFileRead(fp, 0, blockHead.offset);
+    if (fileRead == NULL) {
+        LOG_ERROR("malloc error");
+        ret = V_ERR_MALLOC;
+        goto EXIT;
+    }
+    ret = GetAppSingerCertType(pkcs7, certType);
+    if (ret != V_OK) {
+        LOG_ERROR("cert source invalid: %d", ret);
+        ret = V_ERR_GET_CERT_TYPE;
+        goto EXIT;
+    }
+    LOG_INFO("get cert Type : %d", *certType);
+    signInfo->certType = *certType;
+    ret = VerifyAppSignPkcsData(fileRead, signInfo, pkcs7);
+    if (ret != V_OK) {
+        LOG_ERROR("intergrity failed");
+        ret = V_ERR_VERIFY_CERT_CHAIN;
+        goto EXIT;
+    }
+    LOG_INFO("pkcs7 verify signer signature success");
+
+    ret = GetCertInfo(pkcs7->signedData.signers.certPath.crt, signCert);
+    if (ret != V_OK) {
+        LOG_ERROR("get bin cert info  error: %d", ret);
+        ret = V_ERR_GET_CERT_INFO;
+        goto EXIT;
+    }
+
+EXIT:
+    /* free sign */
+    APPV_FREE(signBuf);
+    /* free pkcs7Handle */
+    PKCS7_FreeRes(pkcs7);
+    APPV_FREE(pkcs7);
+    APPV_FREE(fileRead);
+    return ret;
+}
+
+static int VerifyIntegrity(SignatureInfo *signInfo, int fp, ProfileProf *pf)
+{
+    CertInfo *binSignCert = NULL;
+    int certType = 0;
+
+    int ret = VerifyBinSign(signInfo, fp, &binSignCert, &certType);
+    if (ret != V_OK) {
+        LOG_ERROR("verify bin sign error");
+        return ret;
+    }
+
+    ret = VerfiyAppSourceGetProfile(fp, signInfo, certType, binSignCert, pf);
+    if (ret != V_OK) {
+        LOG_ERROR("verify app source failed : %d", ret);
+        FreeCertInfo(binSignCert);
+        APPV_FREE(binSignCert);
+        return ret;
+    }
+    FreeCertInfo(binSignCert);
+    APPV_FREE(binSignCert);
+    return V_OK;
+}
+
+int APPVERI_AppVerify(const char *filePath, VerifyResult *verifyRst)
+{
+    if (filePath == NULL || verifyRst == NULL) {
+        return V_ERR_FILE_OPEN;
+    }
+    int handle = 0;
+    FileRead file = {0};
+    if (InitVerify(&file, filePath, &handle) != V_OK) {
+        close(handle);
+        return V_ERR_FILE_OPEN;
+    }
+    SignatureInfo signInfo = {0};
+    int ret = GetSignHead(&file, &signInfo);
+    if (ret != V_OK) {
+        LOG_ERROR("get sign head error");
+        close(handle);
+        return ret;
+    }
+    HwSignHead *signHead = signInfo.signHead;
+    ret = VerifyIntegrity(&signInfo, handle, &verifyRst->profile);
+    if (ret != V_OK) {
+        LOG_ERROR("verify integrity failed");
+        close(handle);
+        APPV_FREE(signHead);
+        return ret;
+    }
+    struct stat *fileSt = APPV_MALLOC(sizeof(struct stat));
+    if (fileSt == NULL) {
+        LOG_PRINT_STR("malloc error");
+        close(handle);
+        APPV_FREE(signHead);
+        return V_ERR_MALLOC;
+    }
+    ret = fstat(handle, fileSt);
+    if (ret != V_OK) {
+        LOG_ERROR("fstat error");
+        close(handle);
+        APPV_FREE(signHead);
+        APPV_FREE(fileSt);
+        return V_ERR_FILE_STAT;
+    }
+    LOG_INFO("file len: %d", (int)fileSt->st_size);
+    close(handle);
+    APPV_FREE(signHead);
+    APPV_FREE(fileSt);
+    return ret;
+}
+
+/* set debug mode */
+int APPVERI_SetDebugMode(bool mode)
+{
+    LOG_INFO("set debug mode: %d", mode);
+    if (g_isDebugMode == mode) {
+        return V_OK;
+    }
+    int ret = PKCS7_EnableDebugMode(mode);
+    if (ret != V_OK) {
+        LOG_ERROR("enable pcks7 debug mode failed");
+        return ret;
+    }
+    g_isDebugMode = mode;
+    return V_OK;
+}
+
+/* set test mode */
+void APPVERI_SetActsMode(bool mode)
+{
+    g_isActsMode = mode;
+}
+
+int APPVERI_IsActsMode(void)
+{
+    return g_isActsMode;
+}
+
+void APPVERI_FreeVerifyRst(VerifyResult *verifyRst)
+{
+    if (verifyRst == NULL) {
+        return;
+    }
+    LOG_INFO("free verify rst data");
+    ProfFreeData(&verifyRst->profile);
+    return;
+}
diff --git a/base/security/appverify/interfaces/innerkits/appverify_lite/src/app_verify_hal.c b/base/security/appverify/interfaces/innerkits/appverify_lite/src/app_verify_hal.c
new file mode 100755
index 00000000..c4a846c7
--- /dev/null
+++ b/base/security/appverify/interfaces/innerkits/appverify_lite/src/app_verify_hal.c
@@ -0,0 +1,35 @@
+/*
+ * Copyright (c) 2020 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "app_verify_hal.h"
+#include "app_verify_base.h"
+#include "app_verify_default.h"
+
+static ProductDiff g_productDiffFunc;
+
+void RegistHalFunc()
+{
+    RegistBaseDefaultFunc(&g_productDiffFunc);
+    RegistProductFunc(&g_productDiffFunc);
+}
+
+int InquiryDeviceUdid(unsigned char *udid, int size)
+{
+    if (g_productDiffFunc.devUdidFunc == NULL) {
+        return INQUIRY_UDID_ERROR;
+    }
+    return g_productDiffFunc.devUdidFunc(udid, size);
+}
+
diff --git a/base/security/appverify/interfaces/innerkits/appverify_lite/src/app_verify_hap.c b/base/security/appverify/interfaces/innerkits/appverify_lite/src/app_verify_hap.c
new file mode 100755
index 00000000..5d80ada2
--- /dev/null
+++ b/base/security/appverify/interfaces/innerkits/appverify_lite/src/app_verify_hap.c
@@ -0,0 +1,338 @@
+/*
+ * Copyright (c) 2020 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "app_verify_hap.h"
+#include <stdbool.h>
+#include <sys/mman.h>
+#include <unistd.h>
+#include "app_centraldirectory.h"
+#include "app_common.h"
+#include "app_verify.h"
+#include "securec.h"
+
+int GetDigestAlgorithmId(unsigned int signAlgorithm)
+{
+    switch (signAlgorithm & ALGORITHM_MASK) {
+        case ALGORITHM_SHA256:
+        case ALGORITHM_PKCS1_SHA256:
+            return HASH_ALG_SHA256;
+        case ALGORITHM_SHA384:
+        case ALGORITHM_PKCS1_SHA384:
+            return HASH_ALG_SHA384;
+        case ALGORITHM_SHA512:
+        case ALGORITHM_PKCS1_SHA512:
+            return HASH_ALG_SHA512;
+        default:
+            LOG_ERROR("signAlgorithm: %d error", signAlgorithm);
+            return V_ERR;
+    }
+}
+
+static int ComputeBlockHash(const char *block, int blockLen, int alg, const HapBuf *result, int *offset)
+{
+    int ret, readLen, rawBufLen;
+    const mbedtls_md_info_t *mdInfo = mbedtls_md_info_from_type((mbedtls_md_type_t)alg);
+    P_NULL_RETURN_WTTH_LOG(mdInfo);
+    int pos = 0;
+    rawBufLen = blockLen;
+    mbedtls_md_context_t *mdCtx = APPV_MALLOC(sizeof(mbedtls_md_context_t));
+    P_NULL_RETURN_WTTH_LOG(mdCtx);
+    LOG_INFO("alg: %d wholelen: %d", alg, rawBufLen);
+    while (rawBufLen > 0) {
+        mbedtls_md_init(mdCtx);
+        readLen = (rawBufLen > HASH_BLOB_LEN) ? HASH_BLOB_LEN : rawBufLen;
+        ret = mbedtls_md_setup(mdCtx, mdInfo, 0);
+        P_ERR_GOTO_WTTH_LOG(ret);
+        size_t hlen = mbedtls_md_get_size(mdInfo);
+        if (hlen == 0 || hlen > MAX_HASH_SIZE) {
+            goto EXIT;
+        }
+        ret = mbedtls_md_starts(mdCtx);
+        P_ERR_GOTO_WTTH_LOG(ret);
+        unsigned char chunkContentPrefix[HAP_DIGEST_PRIFIX_LEN] = {HAP_SECOND_LEVEL_CHUNK_PREFIX, 0, 0, 0, 0};
+        if (memcpy_s((chunkContentPrefix + 1), HAP_DIGEST_PRIFIX_LEN - 1, (&readLen), sizeof(int)) != EOK) {
+            LOG_ERROR("memcpy_s fail");
+            goto EXIT;
+        }
+        ret = mbedtls_md_update(mdCtx, chunkContentPrefix, HAP_DIGEST_PRIFIX_LEN);
+        P_ERR_GOTO_WTTH_LOG(ret);
+        LOG_INFO("content: %d, %d", rawBufLen, pos);
+        ret = mbedtls_md_update(mdCtx, (unsigned char *)block + pos, readLen);
+        P_ERR_GOTO_WTTH_LOG(ret);
+        rawBufLen -= readLen;
+        pos += readLen;
+        unsigned char *outbuf = APPV_MALLOC(hlen);
+        P_NULL_GOTO_WTTH_LOG(outbuf);
+        ret = mbedtls_md_finish(mdCtx, outbuf);
+        HapPutData(result, *offset, outbuf, hlen);
+        *offset += hlen;
+        (void)memset_s(outbuf, hlen, 0, hlen);
+        APPV_FREE(outbuf);
+        P_ERR_GOTO_WTTH_LOG(ret);
+        mbedtls_md_free(mdCtx);
+    }
+    APPV_FREE(mdCtx);
+    return V_OK;
+EXIT:
+    mbedtls_md_free(mdCtx);
+    APPV_FREE(mdCtx);
+    return V_ERR;
+}
+
+static int GetChunkSumCount(int fileSize, int coreDirectorySize, int eocdSize, int rootHashLen)
+{
+    int chunkSize = HASH_BLOB_LEN;
+    int maxSize = INT_MAX - chunkSize;
+    if (fileSize > maxSize || coreDirectorySize > maxSize || eocdSize > maxSize) {
+        return 0;
+    }
+    int count = ((fileSize - 1 + chunkSize) / chunkSize) + ((coreDirectorySize - 1 + chunkSize) / chunkSize) +
+        ((eocdSize - 1 + chunkSize) / chunkSize);
+    if (rootHashLen < 0 || (((INT_MAX - HAP_DIGEST_PRIFIX_LEN) / count) < rootHashLen)) {
+        LOG_ERROR("overflow count: %d, chunkDigestLen: %d", count, rootHashLen);
+        return 0;
+    }
+    LOG_INFO("get sum count %d", count);
+    return count;
+}
+
+static int ComputeDigestsWithOptionalBlock(const int digestAlgorithm, int fp, const SignatureInfo *signInfo,
+    const HapBuf *chunkDigest, const HapBuf *fianlDigest)
+{
+    int ret, readLen;
+    int rst = V_ERR;
+    char *rawBuf = NULL;
+    unsigned char* outbuf = NULL;
+    int rootHashLen = GetHashUnitLen(digestAlgorithm);
+    LOG_INFO("rootHashLen %d", rootHashLen);
+    if (rootHashLen <= 0 || rootHashLen > MAX_HASH_SIZE) {
+        return rst;
+    }
+    const mbedtls_md_info_t *mdInfo = mbedtls_md_info_from_type((mbedtls_md_type_t)digestAlgorithm);
+    P_NULL_RETURN_WTTH_LOG(mdInfo);
+    mbedtls_md_context_t *mdCtx = APPV_MALLOC(sizeof(mbedtls_md_context_t));
+    P_NULL_RETURN_WTTH_LOG(mdCtx);
+    mbedtls_md_init(mdCtx);
+    ret = mbedtls_md_setup(mdCtx, mdInfo, 0);
+    P_ERR_GOTO_WTTH_LOG(ret);
+    ret = mbedtls_md_starts(mdCtx);
+    P_ERR_GOTO_WTTH_LOG(ret);
+
+    BlockHead blockHead = {0};
+    readLen = chunkDigest->len;
+    LOG_INFO("readLen %d", readLen);
+    ret = mbedtls_md_update(mdCtx, chunkDigest->buffer, readLen);
+    P_ERR_GOTO_WTTH_LOG(ret);
+    int rawLen = 0;
+    rawBuf = GetSignBlockByType(signInfo, fp, PROFILE_BLOCK_WITHSIGN_TYPE, &rawLen, &blockHead);
+    P_NULL_GOTO_WTTH_LOG(rawBuf);
+    readLen = rawLen;
+    LOG_INFO("signBuf %0x %d", rawBuf[0], readLen);
+    ret = mbedtls_md_update(mdCtx, (unsigned char *)rawBuf, readLen);
+    P_ERR_GOTO_WTTH_LOG(ret);
+    outbuf = (unsigned char *)APPV_MALLOC(rootHashLen);
+    P_NULL_GOTO_WTTH_LOG(outbuf);
+    ret = mbedtls_md_finish(mdCtx, outbuf);
+    P_ERR_GOTO_WTTH_LOG(ret);
+    HapPutData(fianlDigest, 0, outbuf, rootHashLen);
+    (void)memset_s(outbuf, rootHashLen, 0, rootHashLen);
+    rst = V_OK;
+EXIT:
+    mbedtls_md_free(mdCtx);
+    APPV_FREE(mdCtx);
+    APPV_FREE(rawBuf);
+    APPV_FREE(outbuf);
+    return rst;
+}
+
+static int HapUpdateDigistHead(int digestAlgorithm, mbedtls_md_context_t *mdCtx, const mbedtls_md_info_t *mdInfo,
+    int readLen, size_t *hlen)
+{
+    mbedtls_md_init(mdCtx);
+    int ret = mbedtls_md_setup(mdCtx, mdInfo, 0);
+    if (ret != 0) {
+        return V_ERR;
+    }
+    *hlen = mbedtls_md_get_size(mdInfo);
+    if (*hlen == 0 || *hlen > MAX_HASH_SIZE) {
+        return V_ERR;
+    }
+    ret = mbedtls_md_starts(mdCtx);
+    if (ret != 0) {
+        return V_ERR;
+    }
+    unsigned char chunkContentPrefix[HAP_DIGEST_PRIFIX_LEN] = {HAP_SECOND_LEVEL_CHUNK_PREFIX, 0, 0, 0, 0};
+    if (memcpy_s((chunkContentPrefix + 1), HAP_DIGEST_PRIFIX_LEN - 1, (&readLen), sizeof(int)) != EOK) {
+        return V_ERR;
+    }
+    ret = mbedtls_md_update(mdCtx, chunkContentPrefix, HAP_DIGEST_PRIFIX_LEN);
+    if (ret != 0) {
+        return V_ERR;
+    }
+    return V_OK;
+}
+
+static int UpdateSmallBlock(int readLen, const int fp, mbedtls_md_context_t *mdCtx)
+{
+    int readLenLeft = readLen;
+    while (readLenLeft > 0) {
+        int onceRead = (readLenLeft > ONCE_READ_LEN) ? ONCE_READ_LEN : readLenLeft;
+        unsigned char *onceBuf = APPV_MALLOC(onceRead);
+        P_NULL_RETURN_WTTH_LOG(onceBuf);
+        int len = read(fp, onceBuf, sizeof(char) * onceRead);
+        if (len != onceRead) {
+            LOG_ERROR("fread err: %d, %d", len, onceRead);
+            APPV_FREE(onceBuf);
+            return V_ERR;
+        }
+        int ret = mbedtls_md_update(mdCtx, onceBuf, onceRead);
+        APPV_FREE(onceBuf);
+        P_ERR_RETURN_WTTH_LOG(ret);
+        readLenLeft -= onceRead;
+    }
+    return V_OK;
+}
+
+static int ComputerFileHash(const SignatureInfo *signInfo, int digestAlgorithm, const int fp,
+    const HapBuf *chunkDigest, int *offset)
+{
+    mbedtls_md_context_t *mdCtx = APPV_MALLOC(sizeof(mbedtls_md_context_t));
+    P_NULL_RETURN_WTTH_LOG(mdCtx);
+    lseek(fp, 0, SEEK_SET);
+    int pos = 0;
+    int rawBufLen = signInfo->fullSignBlockOffset;
+    while (rawBufLen > 0) {
+        size_t hlen = 0;
+        int readLen = (rawBufLen > HASH_BLOB_LEN) ? HASH_BLOB_LEN : rawBufLen;
+        const mbedtls_md_info_t *mdInfo = mbedtls_md_info_from_type((mbedtls_md_type_t)digestAlgorithm);
+        if (mdInfo == NULL) {
+            APPV_FREE(mdCtx);
+            return V_ERR;
+        }
+        int ret = HapUpdateDigistHead(digestAlgorithm, mdCtx, mdInfo, readLen, &hlen);
+        P_ERR_GOTO_WTTH_LOG(ret);
+        LOG_INFO("content: %d, %d", rawBufLen, pos);
+        ret = UpdateSmallBlock(readLen, fp, mdCtx);
+        P_ERR_GOTO_WTTH_LOG(ret);
+        rawBufLen -= readLen;
+        pos += readLen;
+        unsigned char *outbuf = APPV_MALLOC(hlen);
+        P_NULL_GOTO_WTTH_LOG(outbuf);
+        ret = mbedtls_md_finish(mdCtx, outbuf);
+        HapPutData(chunkDigest, *offset, outbuf, hlen);
+        (void)memset_s(outbuf, hlen, 0, hlen);
+        *offset += hlen;
+        APPV_FREE(outbuf);
+        P_ERR_GOTO_WTTH_LOG(ret);
+        mbedtls_md_free(mdCtx);
+    }
+    APPV_FREE(mdCtx);
+    return V_OK;
+EXIT:
+    mbedtls_md_free(mdCtx);
+    APPV_FREE(mdCtx);
+    return V_ERR;
+}
+
+static int ComputerCoreDirHash(const SignatureInfo *signInfo, int digestAlgorithm, const int fp,
+    const HapBuf *chunkDigest, int *offset)
+{
+    int centralDirSize = signInfo->hapEocdOffset - signInfo->hapCoreDirOffset;
+    if (centralDirSize <= 0) {
+        return V_ERR;
+    }
+    char *dirBuf = APPV_MALLOC(centralDirSize);
+    P_NULL_RETURN_WTTH_LOG(dirBuf);
+    lseek(fp, signInfo->hapCoreDirOffset, SEEK_SET);
+    int len = read(fp, dirBuf, sizeof(char) * centralDirSize);
+    if (len != centralDirSize) {
+        LOG_ERROR("fread err: %d, %d", len, centralDirSize);
+        APPV_FREE(dirBuf);
+        return V_ERR;
+    }
+    int ret = ComputeBlockHash(dirBuf, centralDirSize, digestAlgorithm, chunkDigest, offset);
+    (void)memset_s(dirBuf, centralDirSize, 0, centralDirSize);
+    APPV_FREE(dirBuf);
+    P_ERR_RETURN_WTTH_LOG(ret);
+    return V_OK;
+}
+
+static int ComputerEocdHash(const SignatureInfo *signInfo, int digestAlgorithm, const int fp,
+    const HapBuf *chunkDigest, int *offset)
+{
+    if (signInfo->hapEocdSize <= 0) {
+        return V_ERR;
+    }
+    HapEocd *eocdBuf = APPV_MALLOC(signInfo->hapEocdSize);
+    P_NULL_RETURN_WTTH_LOG(eocdBuf);
+    lseek(fp, signInfo->hapEocdOffset, SEEK_SET);
+    int len = read(fp, eocdBuf, signInfo->hapEocdSize);
+    if (len != signInfo->hapEocdSize) {
+        LOG_ERROR("fread err: %d, %d", len, signInfo->hapEocdSize);
+        APPV_FREE(eocdBuf);
+        return V_ERR;
+    }
+    HapPutInt32((unsigned char*)(&(eocdBuf->eocdHead.coreDirOffset)), sizeof(int), signInfo->fullSignBlockOffset);
+    int ret = ComputeBlockHash((char *)(eocdBuf), len, digestAlgorithm, chunkDigest, offset);
+    (void)memset_s(eocdBuf, signInfo->hapEocdSize, 0, signInfo->hapEocdSize);
+    APPV_FREE(eocdBuf);
+    P_ERR_RETURN_WTTH_LOG(ret);
+    return V_OK;
+}
+
+bool VerifyIntegrityChunk(int digestAlgorithm, const int fp,
+    const SignatureInfo *signInfo, const HapBuf *actualDigest)
+{
+    if (signInfo == NULL || actualDigest == NULL || actualDigest->buffer == NULL) {
+        return false;
+    }
+    int centralDirSize = signInfo->hapEocdOffset - signInfo->hapCoreDirOffset;
+    int rootHashLen = GetHashUnitLen(digestAlgorithm);
+    if (rootHashLen < 0) {
+        LOG_ERROR("alg error");
+        return false;
+    }
+    int sumCount = GetChunkSumCount(signInfo->fullSignBlockOffset, centralDirSize, signInfo->hapEocdSize, rootHashLen);
+    if (sumCount == 0) {
+        LOG_ERROR("sum count error");
+        return false;
+    }
+    int sumOfChunksLen = HAP_DIGEST_PRIFIX_LEN + sumCount * rootHashLen;
+    HapBuf chunkDigest = {0};
+    if (!CreateHapBuffer(&chunkDigest, sumOfChunksLen)) {
+        return false;
+    }
+    LOG_INFO("alg: %d", digestAlgorithm);
+    HapPutByte(&chunkDigest, 0, HAP_FIRST_LEVEL_CHUNK_PREFIX);
+    HapSetInt32(&chunkDigest, 1, sumCount);
+    int offset = HAP_DIGEST_PRIFIX_LEN;
+    int ret;
+    ret = ComputerFileHash(signInfo, digestAlgorithm, fp, &chunkDigest, &offset);
+    P_ERR_GOTO_WTTH_LOG(ret);
+    ret = ComputerCoreDirHash(signInfo, digestAlgorithm, fp, &chunkDigest, &offset);
+    P_ERR_GOTO_WTTH_LOG(ret);
+    ret = ComputerEocdHash(signInfo, digestAlgorithm, fp, &chunkDigest, &offset);
+    P_ERR_GOTO_WTTH_LOG(ret);
+    ret = ComputeDigestsWithOptionalBlock(digestAlgorithm, fp, signInfo, &chunkDigest, actualDigest);
+    P_ERR_GOTO_WTTH_LOG(ret);
+    ClearHapBuffer(&chunkDigest);
+    LOG_INFO("finish");
+    return true;
+EXIT:
+    LOG_ERROR("exit");
+    ClearHapBuffer(&chunkDigest);
+    return false;
+}
+
diff --git a/base/security/appverify/interfaces/innerkits/appverify_lite/src/mbedtls_pkcs7.c b/base/security/appverify/interfaces/innerkits/appverify_lite/src/mbedtls_pkcs7.c
new file mode 100644
index 00000000..61f31310
--- /dev/null
+++ b/base/security/appverify/interfaces/innerkits/appverify_lite/src/mbedtls_pkcs7.c
@@ -0,0 +1,1362 @@
+/*
+ * Copyright (c) 2020 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "mbedtls_pkcs7.h"
+#include <ctype.h>
+#include <stdbool.h>
+#include <stdlib.h>
+#include <string.h>
+#include "app_common.h"
+#include "mbedtls/platform.h" // for mbedtls_calloc
+#include "securec.h"
+
+#define VERIFY_BUF_LEN 512
+#define MAX_SIG_SIZE 1024
+
+#ifndef MBEDTLS_OID_PKCS7
+#define MBEDTLS_OID_PKCS7 MBEDTLS_OID_PKCS "\x07"
+#endif
+
+#ifndef MBEDTLS_OID_PKCS7_DATA
+#define MBEDTLS_OID_PKCS7_DATA MBEDTLS_OID_PKCS7 "\x01"
+#endif
+
+#ifndef MBEDTLS_OID_PKCS7_SIGNED_DATA
+#define MBEDTLS_OID_PKCS7_SIGNED_DATA MBEDTLS_OID_PKCS7 "\x02"
+#endif
+
+#ifndef MBEDTLS_OID_PKCS9_MSG_DIGEST
+#define MBEDTLS_OID_PKCS9_MSG_DIGEST MBEDTLS_OID_PKCS9 "\x04"
+#endif
+
+#define PKCS7_SIGNED_DATA_VERSION 1
+#define PEM_FORMAT_SINGED_DATA 1
+#define DER_FORMAT_SINGED_DATA 2
+
+#define PKCS7_ERR_RETURN_WITH_LOG(rc) \
+    do { \
+        if ((rc) != PKCS7_SUCC) \
+        { \
+            LOG_ERROR("%s:%u, error occured, ret:%d", __FUNCTION__, __LINE__, (rc)); \
+            return rc; \
+        } \
+    } while (0)
+
+static mbedtls_x509_crt g_rootCaG2Cert;
+static bool g_rootCertLoaded;
+static const unsigned char g_rootCaG2CertInPem[] =
+    "-----BEGIN CERTIFICATE-----\r\n"
+    "MIICGjCCAaGgAwIBAgIIShhpn519jNAwCgYIKoZIzj0EAwMwUzELMAkGA1UEBhMC\r\n"
+    "Q04xDzANBgNVBAoMBkh1YXdlaTETMBEGA1UECwwKSHVhd2VpIENCRzEeMBwGA1UE\r\n"
+    "AwwVSHVhd2VpIENCRyBSb290IENBIEcyMB4XDTIwMDMxNjAzMDQzOVoXDTQ5MDMx\r\n"
+    "NjAzMDQzOVowUzELMAkGA1UEBhMCQ04xDzANBgNVBAoMBkh1YXdlaTETMBEGA1UE\r\n"
+    "CwwKSHVhd2VpIENCRzEeMBwGA1UEAwwVSHVhd2VpIENCRyBSb290IENBIEcyMHYw\r\n"
+    "EAYHKoZIzj0CAQYFK4EEACIDYgAEWidkGnDSOw3/HE2y2GHl+fpWBIa5S+IlnNrs\r\n"
+    "GUvwC1I2QWvtqCHWmwFlFK95zKXiM8s9yV3VVXh7ivN8ZJO3SC5N1TCrvB2lpHMB\r\n"
+    "wcz4DA0kgHCMm/wDec6kOHx1xvCRo0IwQDAOBgNVHQ8BAf8EBAMCAQYwDwYDVR0T\r\n"
+    "AQH/BAUwAwEB/zAdBgNVHQ4EFgQUo45a9Vq8cYwqaiVyfkiS4pLcIAAwCgYIKoZI\r\n"
+    "zj0EAwMDZwAwZAIwMypeB7P0IbY7c6gpWcClhRznOJFj8uavrNu2PIoz9KIqr3jn\r\n"
+    "BlBHJs0myI7ntYpEAjBbm8eDMZY5zq5iMZUC6H7UzYSix4Uy1YlsLVV738PtKP9h\r\n"
+    "FTjgDHctXJlC5L7+ZDY=\r\n"
+    "-----END CERTIFICATE-----\r\n";
+
+static mbedtls_x509_crt g_debugModeRootCert;
+static bool g_debugModeEnabled;
+static const unsigned char g_debugModeRootCertInPem[] =
+    "-----BEGIN CERTIFICATE-----\r\n"
+    "MIICJTCCAaugAwIBAgIIb/9KnVieVTgwCgYIKoZIzj0EAwMwWDELMAkGA1UEBhMC\r\n"
+    "Q04xDzANBgNVBAoMBkh1YXdlaTETMBEGA1UECwwKSHVhd2VpIENCRzEjMCEGA1UE\r\n"
+    "AwwaSHVhd2VpIENCRyBSb290IENBIEcyIFRlc3QwHhcNMjAwMzEyMTI0NDAwWhcN\r\n"
+    "NDkwMzEyMTI0NDAwWjBYMQswCQYDVQQGEwJDTjEPMA0GA1UECgwGSHVhd2VpMRMw\r\n"
+    "EQYDVQQLDApIdWF3ZWkgQ0JHMSMwIQYDVQQDDBpIdWF3ZWkgQ0JHIFJvb3QgQ0Eg\r\n"
+    "RzIgVGVzdDB2MBAGByqGSM49AgEGBSuBBAAiA2IABLS4fgvaYKKfyMZW/4nNTsSv\r\n"
+    "xqVxqOEDfLySZK/fSEN0IDQj0sK/qK5hvnf0OxWhwI49P3dKGmQ+cSujXvy0me2D\r\n"
+    "JTjY127XYZJrvJwwMkrT/vMrZC5kSOEJbt1qAgSmiaNCMEAwDgYDVR0PAQH/BAQD\r\n"
+    "AgEGMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFGldwFjx9Tzm/QpA8R1gc9wc\r\n"
+    "eMbFMAoGCCqGSM49BAMDA2gAMGUCMQCCUDRaglmycUGrHmF+L8owKJhbqOUqbwuX\r\n"
+    "7XL/vJcp3HeHjiXu7XZmYQ+QAvHPhU0CMCiwWFbDl8ETw4VK25QbwhL/QiUfiRfC\r\n"
+    "J6LzteOvjLTEV5iebQMz/nS1j7/oj3Rsqg==\r\n"
+    "-----END CERTIFICATE-----\r\n";
+static mbedtls_x509_crt g_selfSignedCert;
+static const unsigned char g_selfSignedCertInPem[] =
+    "-----BEGIN CERTIFICATE-----\r\n"
+    "MIICCzCCAbCgAwIBAgIEbZe8FTAMBggqhkjOPQQDAgUAMHMxCzAJBgNVBAYTAkNO\r\n"
+    "MRQwEgYDVQQKEwtPcGVuSGFybW9ueTElMCMGA1UECxMcT3Blbkhhcm1vbnkgRGV2\r\n"
+    "ZWxvcG1lbnQgVGVhbTEnMCUGA1UEAxMeT3Blbkhhcm1vbnkgU29mdHdhcmUgU2ln\r\n"
+    "bmF0dXJlMCAXDTIwMTAxNDAzMzAzM1oYDzIwNzAxMDE0MDMzMDMzWjBzMQswCQYD\r\n"
+    "VQQGEwJDTjEUMBIGA1UEChMLT3Blbkhhcm1vbnkxJTAjBgNVBAsTHE9wZW5IYXJt\r\n"
+    "b255IERldmVsb3BtZW50IFRlYW0xJzAlBgNVBAMTHk9wZW5IYXJtb255IFNvZnR3\r\n"
+    "YXJlIFNpZ25hdHVyZTBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABCP2fr47i2IG\r\n"
+    "CKyX7apk865v1ZPVv82wrZEHOqzkPiLTG+o+6EEuuHGLngu9lA7Kc5+LpnhryQLz\r\n"
+    "gf9sD625M72jLjAsMAsGA1UdDwQEAwIHgDAdBgNVHQ4EFgQUx2NA8kYsHoN2qGMI\r\n"
+    "xmJeHuVVnDUwDAYIKoZIzj0EAwIFAANHADBEAiAHWP8lxpp/FHwHE9H0ESUmejK/\r\n"
+    "4lfN9rRcndM/+yB7mwIgEAE9gVW7xCrX509iHZl/iJth7IBySgDM590oelCqVXY=\r\n"
+    "-----END CERTIFICATE-----\r\n";
+
+/* valid digest alg now: sha256 sha384 sha512 */
+static bool InvalidDigestAlg(const mbedtls_asn1_buf *alg)
+{
+    return MBEDTLS_OID_CMP(MBEDTLS_OID_DIGEST_ALG_SHA256, alg) &&
+        MBEDTLS_OID_CMP(MBEDTLS_OID_DIGEST_ALG_SHA384, alg) &&
+        MBEDTLS_OID_CMP(MBEDTLS_OID_DIGEST_ALG_SHA512, alg);
+}
+
+static int GetContentInfoType(unsigned char **p, const unsigned char *end,
+                              mbedtls_asn1_buf *contentType, bool *hasContent)
+{
+    size_t seqLen = 0;
+    size_t len = 0;
+    int rc;
+
+    rc = mbedtls_asn1_get_tag(p, end, &seqLen, MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE);
+    if (rc) {
+        return rc;
+    }
+    unsigned char *start = *p;
+    end = start + seqLen;
+    rc = mbedtls_asn1_get_tag(p, end, &len, MBEDTLS_ASN1_OID);
+    if (rc) {
+        return rc;
+    }
+    contentType->tag = MBEDTLS_ASN1_OID;
+    contentType->len = len;
+    contentType->p = *p;
+    *hasContent = (seqLen != len + (*p - start));
+    *p += len; // pass the oid info to the real content location.
+
+    return PKCS7_SUCC;
+}
+
+static int GetContentLenOfContentInfo(unsigned char **p, const unsigned char *end, size_t *len)
+{
+    return mbedtls_asn1_get_tag(p, end, len, MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_CONTEXT_SPECIFIC);
+}
+
+static int ParseSignerVersion(unsigned char **p, const unsigned char *end, SignerInfo *signer)
+{
+    return mbedtls_asn1_get_int(p, end, &signer->version);
+}
+
+static int ParseSignerIssuerAndSerialNum(unsigned char **p, const unsigned char *end, SignerInfo *signer)
+{
+    int rc;
+    size_t len;
+
+    rc = mbedtls_asn1_get_tag(p, end, &len, MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE);
+    if (rc) {
+        return rc;
+    }
+
+    signer->issuerRaw.p = *p;
+    rc = mbedtls_asn1_get_tag(p, end, &len, MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE);
+    if (rc) {
+        return rc;
+    }
+    /* parse issuer name */
+    rc = mbedtls_x509_get_name(p, *p + len, &signer->issuer);
+    if (rc) {
+        return rc;
+    }
+    signer->issuerRaw.len = *p - signer->issuerRaw.p; /* not include the serial. */
+
+    rc = mbedtls_x509_get_serial(p, end, &signer->serial);
+
+    return rc;
+}
+
+static int ParseSignerDigestAlg(unsigned char **p, const unsigned char *end, SignerInfo *signer)
+{
+    int rc = mbedtls_asn1_get_alg_null(p, end, &signer->digestAlgId);
+    if (rc) {
+        return rc;
+    }
+    if (InvalidDigestAlg(&signer->digestAlgId)) {
+        return PKCS7_INVALID_DIGEST_ALG;
+    }
+    return PKCS7_SUCC;
+}
+
+static int ParseSignerAuthAttr(unsigned char **p, const unsigned char *end, SignerInfo *signer)
+{
+    int rc;
+    size_t len = 0;
+    unsigned char *raw = *p;
+
+    rc = mbedtls_asn1_get_tag(p, end, &len, MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_CONTEXT_SPECIFIC);
+    if (rc) {
+        return PKCS7_SUCC; /* because this is optional item */
+    }
+    signer->authAttr.tag = MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_CONTEXT_SPECIFIC;
+    signer->authAttr.p = *p;
+    signer->authAttr.len = len;
+    size_t tlLen = *p - raw;
+    *p += len;
+
+    signer->authAttrRaw.p = raw;
+    signer->authAttrRaw.len = len + tlLen;
+    return PKCS7_SUCC;
+}
+
+/*
+ * check if enc alg is rsa/ecdsa 256/384/512
+ */
+static bool InvalidDigestEncAlg(const mbedtls_x509_buf *alg)
+{
+    return MBEDTLS_OID_CMP(MBEDTLS_OID_PKCS1_SHA256, alg) &&
+        MBEDTLS_OID_CMP(MBEDTLS_OID_PKCS1_SHA384, alg) &&
+        MBEDTLS_OID_CMP(MBEDTLS_OID_PKCS1_SHA512, alg) &&
+        MBEDTLS_OID_CMP(MBEDTLS_OID_ECDSA_SHA256, alg) &&
+        MBEDTLS_OID_CMP(MBEDTLS_OID_ECDSA_SHA384, alg) &&
+        MBEDTLS_OID_CMP(MBEDTLS_OID_ECDSA_SHA512, alg) &&
+        MBEDTLS_OID_CMP(MBEDTLS_OID_RSASSA_PSS, alg);
+}
+
+static int ParseSignerEncAlg(unsigned char **p, const unsigned char *end, SignerInfo *signer)
+{
+    int rc;
+    mbedtls_asn1_buf params = {0};
+    /* params not be used now */
+    rc = mbedtls_asn1_get_alg(p, end, &signer->digestEncAlgId, &params);
+    if (rc) {
+        return rc;
+    }
+    if (InvalidDigestEncAlg(&signer->digestEncAlgId)) {
+        return PKCS7_INVALID_SIGNING_ALG;
+    }
+    return PKCS7_SUCC;
+}
+
+/*
+ * encryptedDigest EncryptedDigest,
+ *   EncryptedDigest ::= OCTET STRING
+ */
+static int ParseSignerSignature(unsigned char **p, const unsigned char *end, SignerInfo *signer)
+{
+    int rc;
+    size_t len = 0;
+
+    rc = mbedtls_asn1_get_tag(p, end, &len, MBEDTLS_ASN1_OCTET_STRING);
+    if (rc) {
+        return rc;
+    }
+    signer->signature.tag = MBEDTLS_ASN1_OCTET_STRING;
+    signer->signature.len = len;
+    signer->signature.p = *p;
+    *p += len;
+    return PKCS7_SUCC;
+}
+
+static int GetSignerSignature(const SignerInfo *signer, unsigned char **sig, size_t *sigLen)
+{
+    size_t len = signer->signature.len;
+    unsigned char *buf = signer->signature.p;
+    *sig = buf;
+    *sigLen = len;
+    return PKCS7_SUCC;
+}
+
+static int ParseSignerUnAuthAttr(unsigned char **p, const unsigned char *end, SignerInfo *signer)
+{
+    int rc;
+    size_t len = 0;
+
+    /* the optional unauth attr is not exist */
+    if (end - *p < 1) {
+        return PKCS7_SUCC;
+    }
+    rc = mbedtls_asn1_get_tag(p, end, &len, (MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_CONTEXT_SPECIFIC) + 1);
+    if (rc) {
+        return rc;
+    }
+    signer->unAuthAttr.tag = (MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_CONTEXT_SPECIFIC) + 1;
+    signer->unAuthAttr.len = len;
+    signer->unAuthAttr.p = *p;
+    *p += len;
+    return PKCS7_SUCC;
+}
+
+static int SerialCmp(const mbedtls_x509_buf *a, const mbedtls_x509_buf *b)
+{
+    if (a->len == b->len && memcmp(a->p, b->p, a->len) == 0) {
+        return 0;
+    }
+    return -1;
+}
+
+#define DIFF_NUM 32
+static bool IsLegitString(int tag)
+{
+    if (tag == MBEDTLS_ASN1_UTF8_STRING || tag == MBEDTLS_ASN1_PRINTABLE_STRING) {
+        return true;
+    }
+    return false;
+}
+
+static int CompareX509String(const mbedtls_x509_buf *first, const mbedtls_x509_buf *second)
+{
+    if (IsLegitString(first->tag) && IsLegitString(second->tag)) {
+        for (int i = 0; i < first->len; i++) {
+            if (first->p[i] == second->p[i] ||
+                ((islower(first->p[i]) != 0) && (first->p[i] - DIFF_NUM == second->p[i])) ||
+                ((isupper(first->p[i]) != 0) && (first->p[i] + DIFF_NUM == second->p[i]))) {
+                continue;
+            }
+            return -1;
+        }
+        return 0;
+    }
+    return -1;
+}
+
+static int GetDeps(const mbedtls_x509_name *nameList)
+{
+    int deps = 0;
+    while (nameList != NULL) {
+        nameList = nameList->next;
+        deps++;
+    }
+    return deps;
+}
+
+static int CompareX509NameList(const mbedtls_x509_name *first, const mbedtls_x509_name *second)
+{
+    if (first == NULL || second == NULL) {
+        return -1;
+    }
+    int firstDeps = GetDeps(first);
+    int secondDeps = GetDeps(second);
+    if (firstDeps != secondDeps) {
+        return -1;
+    }
+    for (int i = 0; i < firstDeps; i++) {
+        if (first->oid.tag != second->oid.tag ||
+            first->oid.len != second->oid.len ||
+            memcmp(first->oid.p, second->oid.p, second->oid.len) != 0 ||
+            first->next_merged != second->next_merged ||
+            first->val.len != second->val.len) {
+            return -1;
+        }
+        if (CompareX509String(&first->val, &second->val) != 0) {
+            return -1;
+        }
+        first = first->next;
+        second = second->next;
+    }
+    return 0;
+}
+
+static void *Pkcs7Calloc(size_t nmemb, size_t size)
+{
+    return calloc(nmemb, size);
+}
+
+static void Pkcs7Free(void *ptr)
+{
+    free(ptr);
+}
+
+static int ParseSignedDataSignerInfos(unsigned char **p, const unsigned char *end, SignerInfo *signers)
+{
+    int rc;
+    size_t len = 0;
+
+    rc = mbedtls_asn1_get_tag(p, end, &len, MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SET);
+    if (rc || len == 0) {
+        return PKCS7_HAS_NO_SIGNER_INFO;
+    }
+    end = *p + len; // update end to the SET end.
+
+    while (*p < end) {
+        size_t oneSignerLen;
+        unsigned char *oneSignerEnd = NULL;
+        /* parse one signer info */
+        rc = mbedtls_asn1_get_tag(p, end, &oneSignerLen, MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE);
+        PKCS7_ERR_RETURN_WITH_LOG(rc);
+
+        oneSignerEnd = *p + oneSignerLen;
+        /* parse version */
+        rc = ParseSignerVersion(p, oneSignerEnd, signers);
+        PKCS7_ERR_RETURN_WITH_LOG(rc);
+
+        /* parse issuerAndSerialNum */
+        rc = ParseSignerIssuerAndSerialNum(p, oneSignerEnd, signers);
+        PKCS7_ERR_RETURN_WITH_LOG(rc);
+
+        /* parse digestAlgorithm */
+        rc = ParseSignerDigestAlg(p, oneSignerEnd, signers);
+        PKCS7_ERR_RETURN_WITH_LOG(rc);
+
+        /* parse authenticatedAttributes */
+        rc = ParseSignerAuthAttr(p, oneSignerEnd, signers);
+        PKCS7_ERR_RETURN_WITH_LOG(rc);
+
+        /* parse digestEncryptionAlgorithm */
+        rc = ParseSignerEncAlg(p, oneSignerEnd, signers);
+        PKCS7_ERR_RETURN_WITH_LOG(rc);
+
+        /* parse encryptedDigest */
+        rc = ParseSignerSignature(p, oneSignerEnd, signers);
+        PKCS7_ERR_RETURN_WITH_LOG(rc);
+
+        /* parse unauthenticatedAttributes */
+        rc = ParseSignerUnAuthAttr(p, oneSignerEnd, signers);
+        PKCS7_ERR_RETURN_WITH_LOG(rc);
+
+        if (*p < end) {
+            signers->next = Pkcs7Calloc(1, sizeof(*signers));
+            if (signers->next == NULL) {
+                /* release resource in main entry. */
+                return PKCS7_MEMORY_EXHAUST;
+            }
+            signers = signers->next;
+        }
+    }
+    return rc;
+}
+
+static int ParseSignedDataVersion(unsigned char **p, const unsigned char *end, int *ver)
+{
+    int rc = mbedtls_asn1_get_int(p, end, ver);
+    if (rc) {
+        return rc;
+    }
+
+    if (*ver != PKCS7_SIGNED_DATA_VERSION) {
+        LOG_ERROR("Invalid version : %d\n", *ver);
+        return PKCS7_INVALID_VERSION;
+    }
+    LOG_INFO("Parse signed data version success\n");
+    return PKCS7_SUCC;
+}
+
+static int ParseSignedDataDigestAlgs(unsigned char **p, const unsigned char *end, DigestAlgId *algIds)
+{
+    int rc;
+    size_t len = 0;
+
+    /* parse SET OF header */
+    rc = mbedtls_asn1_get_tag(p, end, &len, MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SET);
+    if (rc) {
+        return rc;
+    }
+    end = *p + len;
+
+    /* parse SET OF 's digest alg content */
+    DigestAlgId *id = algIds;
+    while (*p < end) {
+        mbedtls_asn1_buf params = {0};
+        /* alg param is supported, but not be used now */
+        rc = mbedtls_asn1_get_alg(p, end, &id->algBuf, &params);
+        if (rc) {
+            return rc;
+        }
+        if (InvalidDigestAlg(&id->algBuf)) {
+            return PKCS7_INVALID_DIGEST_ALG;
+        }
+        if (*p < end) {
+            id->next = Pkcs7Calloc(1, sizeof(DigestAlgId));
+            if (id->next == NULL) {
+                /* resource will be released in parse main entry */
+                return PKCS7_MEMORY_EXHAUST;
+            }
+            id = id->next;
+        }
+    }
+    return PKCS7_SUCC;
+}
+
+static void DlogContentInfo(const Content *content)
+{
+    int len = content->data.len;
+    if (len <= 0) {
+        return;
+    }
+    char *info = Pkcs7Calloc(len + 1, sizeof(char));
+    if (info == NULL) {
+        return;
+    }
+    if (strncpy_s(info, len + 1, (char *)content->data.p, len) != EOK) {
+        Pkcs7Free(info);
+        return;
+    }
+    Pkcs7Free(info);
+}
+
+static int ParseSignedDataContentInfo(unsigned char **p, const unsigned char *end, Content *content)
+{
+    int rc;
+    size_t len = 0;
+    bool hasContent = false;
+
+    rc = GetContentInfoType(p, end, &content->oid, &hasContent);
+    if (rc) {
+        return rc;
+    }
+
+    if (MBEDTLS_OID_CMP(MBEDTLS_OID_PKCS7_DATA, &content->oid) || !hasContent) {
+        LOG_ERROR("Invalid content type or has no real content");
+        return PKCS7_INVALID_CONTENT_TYPE_OR_NO_CONTENT;
+    }
+    rc = GetContentLenOfContentInfo(p, end, &len);
+    if (rc) {
+        return rc;
+    }
+    content->data.tag = MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_CONTEXT_SPECIFIC; // has no use
+    content->data.p = *p;
+    content->data.len = len;
+    DlogContentInfo(content);
+    *p += len;
+    return PKCS7_SUCC;
+}
+
+static int ParseSignedDataCerts(unsigned char **p, const unsigned char *end, mbedtls_x509_crt **certs)
+{
+    int rc;
+    size_t len = 0;
+
+    rc = mbedtls_asn1_get_tag(p, end, &len, MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_CONTEXT_SPECIFIC);
+    if (rc) {
+        LOG_ERROR("Has no certificates in signed data.");
+        return PKCS7_SUCC;
+    }
+    *certs = mbedtls_calloc(1, sizeof(**certs));
+    if (*certs == NULL) {
+        return PKCS7_MEMORY_EXHAUST;
+    }
+    mbedtls_x509_crt_init(*certs);
+
+    unsigned char *certsEnd = *p + len;
+    int cnt = 0;
+    while (*p < certsEnd) {
+        /* scan every cert */
+        size_t oneCertLen;
+        unsigned char *seqBegin = *p;
+        rc = mbedtls_asn1_get_tag(p, end, &oneCertLen, MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE);
+        if (rc) {
+            return rc;
+        }
+        if (oneCertLen + (*p - seqBegin) > (certsEnd - seqBegin)) {
+            return PKCS7_PARSING_ERROR;
+        }
+        rc = mbedtls_x509_crt_parse(*certs, seqBegin, oneCertLen + (*p - seqBegin));
+        if (rc) {
+            return rc;
+        }
+        *p += oneCertLen;
+        cnt++;
+    }
+    LOG_INFO("Parse signed data certs success");
+    return rc;
+}
+
+static int ParseSignedDataCrl(unsigned char **p, const unsigned char *end, mbedtls_x509_crl *crl)
+{
+    int rc;
+    size_t len = 0;
+
+    rc = mbedtls_asn1_get_tag(p, end, &len, (MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_CONTEXT_SPECIFIC) + 1);
+    if (rc) {
+        LOG_INFO("Has no crl in signed data.");
+        return PKCS7_SUCC;
+    }
+    mbedtls_x509_crl_init(crl);
+    rc = mbedtls_x509_crl_parse(crl, *p, len);
+    *p += len;
+    return rc;
+}
+
+static int ParseSignedData(unsigned char *buf, size_t bufLen, SignedData *signedData)
+{
+    unsigned char *p = buf;
+    unsigned char *end = buf + bufLen;
+    size_t len = 0;
+    int rc;
+
+    /* parse SignedData sequence header */
+    rc = mbedtls_asn1_get_tag(&p, end, &len, MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE);
+    if (rc) {
+        return rc;
+    }
+
+    /* parse version of signed data */
+    rc = ParseSignedDataVersion(&p, end, &signedData->version);
+    if (rc) {
+        return rc;
+    }
+
+    /* parse digestAlgorithms */
+    rc = ParseSignedDataDigestAlgs(&p, end, &signedData->digestAlgIds);
+    if (rc) {
+        return rc;
+    }
+
+    /* parse contentInfo */
+    rc = ParseSignedDataContentInfo(&p, end, &signedData->content);
+    if (rc) {
+        return rc;
+    }
+
+    if (p >= end) {
+        return PKCS7_PARSING_ERROR;
+    }
+    /* parse certificates (optional) */
+    rc = ParseSignedDataCerts(&p, end, &signedData->certs);
+    if (rc) {
+        return rc;
+    }
+
+    /* parse crls (optional) */
+    rc = ParseSignedDataCrl(&p, end, &signedData->crl);
+    if (rc) {
+        return rc;
+    }
+
+    /* parse signerInfos */
+    rc = ParseSignedDataSignerInfos(&p, end, &signedData->signers);
+    LOG_INFO("ParseSignedData %d", rc);
+    return rc;
+}
+
+static bool IsSigedDataOid(const Pkcs7 *pkcs7)
+{
+    return !MBEDTLS_OID_CMP(MBEDTLS_OID_PKCS7_SIGNED_DATA, &pkcs7->contentTypeOid);
+}
+
+static void FreeSignedDataDigestAlgs(Pkcs7 *pkcs7)
+{
+    DigestAlgId *alg = pkcs7->signedData.digestAlgIds.next;
+    DigestAlgId *next = NULL;
+
+    while (alg != NULL) {
+        next = alg->next;
+        Pkcs7Free(alg);
+        alg = next;
+    }
+    pkcs7->signedData.digestAlgIds.next = NULL;
+}
+
+static void FreeSignerCerts(SignerInfo *signer)
+{
+    if (signer->certPath.crt != NULL) {
+        mbedtls_x509_crt_free(signer->certPath.crt);
+        mbedtls_free(signer->certPath.crt);
+        signer->certPath.crt = NULL;
+    }
+}
+
+static void FreeSignerIssuer(SignerInfo *signer)
+{
+    mbedtls_x509_name *name_cur = NULL;
+    mbedtls_x509_name *name_prv = NULL;
+    name_cur = signer->issuer.next;
+    while (name_cur != NULL) {
+        name_prv = name_cur;
+        name_cur = name_cur->next;
+        mbedtls_free(name_prv);
+    }
+    signer->issuer.next = NULL;
+}
+
+static void FreeSignersInfo(Pkcs7 *pkcs7)
+{
+    SignerInfo *signer = pkcs7->signedData.signers.next;
+    SignerInfo *next = NULL;
+
+    while (signer != NULL) {
+        next = signer->next;
+        FreeSignerCerts(signer);
+        FreeSignerIssuer(signer);
+        Pkcs7Free(signer);
+        signer = next;
+    }
+    pkcs7->signedData.signers.next = NULL;
+    FreeSignerCerts(&pkcs7->signedData.signers);
+    FreeSignerIssuer(&pkcs7->signedData.signers);
+}
+
+static void FreeSignedDataCerts(Pkcs7 *pkcs7)
+{
+    if (pkcs7->signedData.certs != NULL) {
+        mbedtls_x509_crt_free(pkcs7->signedData.certs);
+        mbedtls_free(pkcs7->signedData.certs);
+        pkcs7->signedData.certs = NULL;
+    }
+}
+
+static void FreeSignedDataCrl(Pkcs7 *pkcs7)
+{
+    mbedtls_x509_crl_free(&pkcs7->signedData.crl);
+    return;
+}
+
+static int GetCertsNumOfSignedData(const mbedtls_x509_crt *crts)
+{
+    int cnt = 0;
+    while (crts != NULL) {
+        crts = crts->next;
+        cnt++;
+    }
+    return cnt;
+}
+
+static mbedtls_x509_crt *FindSuperCert(mbedtls_x509_crt *cur, mbedtls_x509_crt *certsList)
+{
+    /* current level's subject is next level issuer */
+    while (certsList != NULL) {
+        if (CompareX509NameList(&cur->issuer, &certsList->subject) == 0) {
+            break;
+        }
+        certsList = certsList->next;
+    }
+    return certsList;
+}
+
+static void DelCertOfSignedData(SignedData *signedData, mbedtls_x509_crt *crt)
+{
+    mbedtls_x509_crt *head = signedData->certs;
+    if (crt == head) {
+        signedData->certs = crt->next;
+        crt->next = NULL;
+    } else {
+        mbedtls_x509_crt *prev = head;
+        while (head != NULL) {
+            if (head == crt) {
+                prev->next = crt->next;
+                crt->next = NULL;
+                break;
+            }
+            prev = head;
+            head = head->next;
+        }
+    }
+}
+
+static void AddCertToSignerCertPath(SignerInfo *signer, mbedtls_x509_crt *crt)
+{
+    mbedtls_x509_crt *prev = signer->certPath.crt;
+    mbedtls_x509_crt *cur = prev;
+    if (prev == NULL) {
+        signer->certPath.crt = crt;
+        crt->next = NULL;
+    } else {
+        while (cur != NULL) {
+            prev = cur;
+            cur = cur->next;
+        }
+        prev->next = crt;
+        crt->next = NULL;
+    }
+
+    signer->certPath.depth++;
+}
+
+static int BuildSignerCertPath(SignerInfo *signer, mbedtls_x509_crt *lowerCrt, SignedData *signeData)
+{
+    int scanCnt = 0;
+    int rc = PKCS7_SUCC;
+    if (!g_rootCertLoaded) {
+        return PKCS7_ROOT_CA_NOT_VALID;
+    }
+    signer->rootCert = &g_rootCaG2Cert;
+
+    mbedtls_x509_crt *certs = signeData->certs;
+    /* From the root ca cert, to found the signer secondary ca , and use secondary cert to
+     * find the next level ca cert */
+    mbedtls_x509_crt *cur = lowerCrt;
+    mbedtls_x509_crt *next = NULL;
+    int certsCnt = GetCertsNumOfSignedData(certs);
+    DelCertOfSignedData(signeData, cur);
+    AddCertToSignerCertPath(signer, cur);
+    while (true) {
+        next = FindSuperCert(cur, signeData->certs);
+        if (next == NULL) {
+            break;
+        } else {
+            DelCertOfSignedData(signeData, next);
+            AddCertToSignerCertPath(signer, next);
+        }
+        scanCnt++;
+        if (scanCnt > certsCnt) {
+            rc = PKCS7_BUILD_CERT_PATH_FAIL;
+            break;
+        }
+        cur = next;
+    }
+    return rc;
+}
+
+static int ConstructSignerCerts(SignedData *signedData)
+{
+    /* scan all of the signers , and filter the signer's certs by serial and name */
+    SignerInfo *signer = &signedData->signers;
+    while (signer != NULL) {
+        mbedtls_x509_buf *signerSerial = &signer->serial;
+        mbedtls_x509_name *signerIssuer = &signer->issuer;
+        mbedtls_x509_crt *cert = signedData->certs;
+        LOG_INFO("To filter one signer's cert");
+        while (cert != NULL) {
+            if (SerialCmp(signerSerial, &cert->serial) == 0 &&
+                CompareX509NameList(signerIssuer, &cert->issuer) == 0) {
+                LOG_INFO("Found signer's low level cert");
+                break;
+            }
+            cert = cert->next;
+        }
+        if (cert == NULL) {
+            LOG_ERROR("Could not found signer's lowest cert");
+            return PKCS7_INVALID_VALUE;
+        }
+        int rc = BuildSignerCertPath(signer, cert, signedData);
+        if (rc != 0) {
+            return rc;
+        }
+        signer = signer->next;
+    }
+    return 0;
+}
+
+/* get signer digest alg */
+static int GetSignerDigestAlg(const SignerInfo *signer, mbedtls_md_type_t *algType)
+{
+    const mbedtls_x509_buf *alg = &signer->digestAlgId;
+    if (!MBEDTLS_OID_CMP(MBEDTLS_OID_DIGEST_ALG_SHA256, alg)) {
+        *algType = MBEDTLS_MD_SHA256;
+        return PKCS7_SUCC;
+    }
+    if (!MBEDTLS_OID_CMP(MBEDTLS_OID_DIGEST_ALG_SHA384, alg)) {
+        *algType = MBEDTLS_MD_SHA384;
+        return PKCS7_SUCC;
+    }
+    if (!MBEDTLS_OID_CMP(MBEDTLS_OID_DIGEST_ALG_SHA512, alg)) {
+        *algType = MBEDTLS_MD_SHA512;
+        return PKCS7_SUCC;
+    }
+    return PKCS7_INVALID_DIGEST_ALG;
+}
+
+/* get signer pubkey of sign from signer cert */
+static int GetSignerPubKeyOfSignature(const SignerInfo *signer, mbedtls_pk_context **pk)
+{
+    /* signer cert_path first cert is the lowest cert. yet is the signature cert */
+    if (signer == NULL || pk == NULL) {
+        return PKCS7_INVALID_PARAM;
+    }
+    if (signer->certPath.crt != NULL) {
+        *pk = &signer->certPath.crt->pk;
+        return PKCS7_SUCC;
+    }
+    return PKCS7_INVALID_VALUE;
+}
+
+int PKCS7_VerifySignerSignature(const Pkcs7 *pkcs7, PKCS7_CalcDigest calcDigest)
+{
+    int rc;
+    if (pkcs7 == NULL || calcDigest == NULL) {
+        return PKCS7_INVALID_PARAM;
+    }
+    const SignerInfo *signer = &pkcs7->signedData.signers;
+    unsigned char *sig = NULL;
+    size_t sigLen;
+    while (signer != NULL) {
+        rc = GetSignerSignature(signer, &sig, &sigLen);
+        if (rc) {
+            return rc;
+        }
+        LOG_INFO("get signer signature len : %zu", sigLen);
+
+        mbedtls_pk_context *pk = NULL;
+        rc = GetSignerPubKeyOfSignature(signer, &pk);
+        if (rc) {
+            return rc;
+        }
+        mbedtls_md_type_t digAlg;
+        rc = GetSignerDigestAlg(signer, &digAlg);
+        if (rc) {
+            return rc;
+        }
+        unsigned char hash[MAX_HASH_SIZE];
+        (void)memset_s(hash, MAX_HASH_SIZE, 0, MAX_HASH_SIZE);
+        size_t hashLen = 0;
+        rc = calcDigest(pkcs7, signer, digAlg, hash, &hashLen);
+        if (rc) {
+            LOG_ERROR("Calculate content hash failed by calling callback");
+            return rc;
+        }
+        /* if is rsassa-pss, need to set padding version to V21, RFC3447 */
+        if (!MBEDTLS_OID_CMP(MBEDTLS_OID_RSASSA_PSS, &signer->digestEncAlgId)) {
+            mbedtls_rsa_set_padding(pk->pk_ctx, MBEDTLS_RSA_PKCS_V21, 0);
+        }
+        rc = mbedtls_pk_verify(pk, digAlg, hash, hashLen, sig, sigLen);
+        (void)memset_s(hash, MAX_HASH_SIZE, 0, MAX_HASH_SIZE);
+        if (rc) {
+            LOG_ERROR("Verify signature failed, returned -0x%04x", rc);
+            return rc;
+        } else {
+            LOG_INFO("Verify signer signature success\n");
+        }
+        signer = signer->next;
+    }
+    return rc;
+}
+
+static int LoadRootCert(void)
+{
+    int rc = 0;
+    if (!g_rootCertLoaded) {
+        mbedtls_x509_crt_init(&g_rootCaG2Cert);
+        rc = mbedtls_x509_crt_parse(&g_rootCaG2Cert, g_rootCaG2CertInPem, sizeof(g_rootCaG2CertInPem));
+        if (rc) {
+            LOG_ERROR("load root ca failed");
+            return rc;
+        } else {
+            LOG_INFO("load root ca success");
+        }
+        g_rootCertLoaded = true;
+    }
+    return rc;
+}
+
+static void UnLoadRootCert(void)
+{
+    if (g_rootCertLoaded) {
+        mbedtls_x509_crt_free(&g_rootCaG2Cert);
+        g_rootCertLoaded = false;
+    }
+}
+
+static int LoadDebugModeRootCert(void)
+{
+    int rc;
+    mbedtls_x509_crt_init(&g_debugModeRootCert);
+    rc = mbedtls_x509_crt_parse(&g_debugModeRootCert, g_debugModeRootCertInPem, sizeof(g_debugModeRootCertInPem));
+    if (rc) {
+        LOG_ERROR("load debug mode root ca failed %d", rc);
+        return rc;
+    } else {
+        LOG_INFO("load debug mode root ca success");
+    }
+    return rc;
+}
+static int UnLoadDebugModeRootCert(void)
+{
+    mbedtls_x509_crt_free(&g_debugModeRootCert);
+    return PKCS7_SUCC;
+}
+
+static int LoadSelfSignedCert(void)
+{
+    int rc;
+    mbedtls_x509_crt_init(&g_selfSignedCert);
+    rc = mbedtls_x509_crt_parse(&g_selfSignedCert, g_selfSignedCertInPem, sizeof(g_selfSignedCertInPem));
+    if (rc) {
+        LOG_ERROR("load self signed ca failed %d", rc);
+        return rc;
+    } else {
+        LOG_INFO("load self signed root ca success");
+    }
+    return rc;
+}
+
+static void UnLoadSelfSignedCert(void)
+{
+    mbedtls_x509_crt_free(&g_selfSignedCert);
+}
+static void DLogCrtVerifyInfo(unsigned int flags)
+{
+    char vrfyBuf[VERIFY_BUF_LEN];
+    (void)memset_s(vrfyBuf, VERIFY_BUF_LEN, 0, VERIFY_BUF_LEN);
+    mbedtls_x509_crt_verify_info(vrfyBuf, sizeof(vrfyBuf), " ! ", flags);
+    LOG_DEBUG("%s", vrfyBuf);
+}
+
+static int IsRevoked(const mbedtls_x509_crt *crt, const mbedtls_x509_crl *crl)
+{
+    mbedtls_x509_crl_entry *cur = (mbedtls_x509_crl_entry *)(&crl->entry);
+    while (cur != NULL) {
+        if (cur->serial.len == 0) {
+            return PKCS7_SUCC;
+        }
+        if (crt->serial.len != cur->serial.len) {
+            cur = cur->next;
+            continue;
+        }
+        if (memcmp(crt->serial.p, cur->serial.p, cur->serial.len) == 0) {
+            return PKCS7_IS_REVOKED;
+        }
+        cur = cur->next;
+    }
+    return PKCS7_SUCC;
+}
+
+static int VerifyCrl(const mbedtls_x509_crt *crt, const mbedtls_x509_crl *crl)
+{
+    const mbedtls_x509_crl *crlList = crl;
+    while (crlList != NULL) {
+        if (crlList->version == 0 ||
+            CompareX509NameList(&crlList->issuer, &crt->issuer) != 0) {
+            crlList = crlList->next;
+            continue;
+        }
+        LOG_INFO("find crl");
+        if (IsRevoked(crt, crlList)) {
+            return PKCS7_IS_REVOKED;
+        }
+        crlList = crlList->next;
+    }
+    return PKCS7_SUCC;
+}
+
+static int VerifyClicert(mbedtls_x509_crt *clicert, mbedtls_x509_crt *rootCert, const Pkcs7 *pkcs7)
+{
+    unsigned int flags;
+    int rc = mbedtls_x509_crt_verify(clicert, rootCert,
+        (mbedtls_x509_crl *)&pkcs7->signedData.crl, NULL, &flags, NULL, NULL);
+    if (rc) {
+        DLogCrtVerifyInfo(flags);
+    } else {
+        LOG_INFO("Verify signers cert chain root cert success");
+        if (VerifyCrl(clicert, (mbedtls_x509_crl *)&pkcs7->signedData.crl) != PKCS7_SUCC) {
+            LOG_ERROR("cert crl verify failed");
+            return PKCS7_IS_REVOKED;
+        }
+        return PKCS7_SUCC;
+    }
+    return rc;
+}
+
+int PKCS7_VerifyCertsChain(const Pkcs7 *pkcs7)
+{
+    if (pkcs7 == NULL) {
+        return PKCS7_INVALID_PARAM;
+    }
+    int cnt = 0;
+    const SignerInfo *signer = &pkcs7->signedData.signers;
+    while (signer != NULL) {
+        mbedtls_x509_crt *clicert = signer->certPath.crt;
+        if (clicert == NULL) {
+            LOG_ERROR("Signer has no certs");
+            return PKCS7_HAS_NO_SIGNER_CRT;
+        }
+        int rc;
+        cnt++;
+        LOG_INFO("signer : %d", cnt);
+        if (g_debugModeEnabled) {
+            rc = VerifyClicert(clicert, &g_debugModeRootCert, pkcs7);
+            LOG_DEBUG("Verify inner: %d", rc);
+            if (rc == PKCS7_SUCC) {
+                signer = signer->next;
+                continue;
+            }
+            if (rc == PKCS7_IS_REVOKED) {
+                return PKCS7_IS_REVOKED;
+            }
+        }
+        rc = VerifyClicert(clicert, signer->rootCert, pkcs7);
+        LOG_DEBUG("Verify : %d", rc);
+        if (rc == PKCS7_SUCC) {
+            signer = signer->next;
+            continue;
+        }
+        if (rc == PKCS7_IS_REVOKED) {
+            return PKCS7_IS_REVOKED;
+        }
+        rc = VerifyClicert(clicert, &g_selfSignedCert, pkcs7);
+        LOG_DEBUG("Verify self : %d", rc);
+        if (rc == PKCS7_SUCC) {
+            signer = signer->next;
+            continue;
+        }
+        return rc;
+    }
+    return PKCS7_SUCC;
+}
+
+int PKCS7_GetSignerSignningCertSubject(const SignerInfo *signer, char *subject, size_t subjectLen)
+{
+    int rc;
+    if (signer == NULL || subject == NULL) {
+        return PKCS7_INVALID_PARAM;
+    }
+    const mbedtls_x509_crt *crt = signer->certPath.crt;
+    rc = mbedtls_x509_dn_gets(subject, subjectLen, &crt->subject);
+    if (rc < 0) {
+        return rc;
+    }
+    return PKCS7_SUCC;
+}
+
+int PKCS7_GetSignerSignningCertIssuer(const SignerInfo *signer, char *issuer, size_t issuerLen)
+{
+    int rc;
+    if (signer == NULL || issuer == NULL) {
+        return PKCS7_INVALID_PARAM;
+    }
+    const mbedtls_x509_crt *crt = signer->certPath.crt;
+    rc = mbedtls_x509_dn_gets(issuer, issuerLen, &crt->issuer);
+    if (rc < 0) {
+        return rc;
+    }
+    return PKCS7_SUCC;
+}
+
+static size_t GetSignersCnt(const SignerInfo *signers)
+{
+    size_t cnt = 0;
+    while (signers != NULL) {
+        cnt++;
+        signers = signers->next;
+    }
+    return cnt;
+}
+static size_t GetSignerSignningCertDepth(const SignerInfo *signer)
+{
+    return signer->certPath.depth + 1; // 1 for root cert;
+}
+
+void PKCS7_FreeAllSignersResolvedInfo(SignersResovedInfo *sri)
+{
+    if (sri == NULL) {
+        return;
+    }
+    if (sri->signers != NULL) {
+        Pkcs7Free(sri->signers);
+        sri->signers = NULL;
+    }
+    Pkcs7Free(sri);
+}
+
+SignersResovedInfo *PKCS7_GetAllSignersResolvedInfo(const Pkcs7 *pkcs7)
+{
+    SignersResovedInfo *sri = NULL;
+    if (pkcs7 == NULL) {
+        return NULL;
+    }
+    size_t signersCnt = GetSignersCnt(&pkcs7->signedData.signers);
+    if (signersCnt == 0) {
+        return NULL;
+    }
+    sri = Pkcs7Calloc(1, sizeof(*sri));
+    if (sri == NULL) {
+        return NULL;
+    }
+    sri->nrOfSigners = signersCnt;
+    sri->signers = Pkcs7Calloc(signersCnt, sizeof(SignerResovledInfo));
+    if (sri->signers == NULL) {
+        Pkcs7Free(sri);
+        return NULL;
+    }
+    int rc;
+    const SignerInfo *signer = &pkcs7->signedData.signers;
+    int idx = 0;
+    while (signer != NULL && idx < signersCnt) {
+        rc = PKCS7_GetSignerSignningCertSubject(signer, sri->signers[idx].subject, sizeof(sri->signers[idx].subject));
+        if (rc) {
+            goto OUT;
+        }
+        rc = PKCS7_GetSignerSignningCertIssuer(signer, sri->signers[idx].issuer, sizeof(sri->signers[idx].issuer));
+        if (rc) {
+            goto OUT;
+        }
+        sri->signers[idx].depth = GetSignerSignningCertDepth(signer);
+
+        signer = signer->next;
+        idx++;
+    }
+    return sri;
+OUT:
+    PKCS7_FreeAllSignersResolvedInfo(sri);
+    return NULL;
+}
+
+int PKCS7_GetDigestInSignerAuthAttr(const SignerInfo *signer, unsigned char **dig, size_t *digLen)
+{
+    if (signer == NULL || dig == NULL || digLen == NULL) {
+        return PKCS7_INVALID_VALUE;
+    }
+    unsigned char *p = signer->authAttr.p;
+    if (p == NULL) {
+        return PKCS7_HAS_NO_AUTH_ATTR_IN_SIGNER;
+    }
+    unsigned char *end = p + signer->authAttr.len;
+    size_t tmpLen = 0;
+
+    /* SET OF SEQUENCE */
+    while (p < end) {
+        size_t seqLen;
+        unsigned char *seqEnd = NULL;
+        int rc = mbedtls_asn1_get_tag(&p, end, &seqLen, MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED);
+        if (rc) {
+            return rc;
+        }
+        seqEnd = p + seqLen;
+        /* SEQUENCE : OID and SET */
+        size_t oidLen;
+        rc = mbedtls_asn1_get_tag(&p, seqEnd, &oidLen, MBEDTLS_ASN1_OID);
+        if (rc) {
+            return rc;
+        }
+        if (oidLen == MBEDTLS_OID_SIZE(MBEDTLS_OID_PKCS9_MSG_DIGEST) &&
+            memcmp(p, MBEDTLS_OID_PKCS9_MSG_DIGEST, MBEDTLS_OID_SIZE(MBEDTLS_OID_PKCS9_MSG_DIGEST)) == 0) {
+            p += oidLen;
+            rc = mbedtls_asn1_get_tag(&p, seqEnd, &tmpLen, MBEDTLS_ASN1_SET | MBEDTLS_ASN1_CONSTRUCTED);
+            if (rc) {
+                return rc;
+            }
+            /* we just resolve one now. */
+            rc = mbedtls_asn1_get_tag(&p, seqEnd, &tmpLen, MBEDTLS_ASN1_OCTET_STRING);
+            if (rc) {
+                return rc;
+            }
+            *dig = p;
+            *digLen = tmpLen;
+            return PKCS7_SUCC;
+        } else {
+            p = seqEnd;
+        }
+    }
+    return PKCS7_INVALID_VALUE;
+}
+
+int PKCS7_GetSignerAuthAttr(const SignerInfo *signer, unsigned char **data, size_t *dataLen)
+{
+    if (signer == NULL || signer->authAttrRaw.p == NULL || data == NULL || dataLen == NULL) {
+        return PKCS7_INVALID_VALUE;
+    }
+    *dataLen = signer->authAttrRaw.len;
+    *data = signer->authAttrRaw.p;
+    *(unsigned char *)signer->authAttrRaw.p = MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SET;
+    return PKCS7_SUCC;
+}
+
+int PKCS7_GetContentData(const Pkcs7 *pkcs7, unsigned char **data, size_t *dataLen)
+{
+    if (pkcs7 == NULL || data == NULL || dataLen == NULL) {
+        return PKCS7_INVALID_PARAM;
+    }
+
+    unsigned char *p = pkcs7->signedData.content.data.p;
+    size_t len = pkcs7->signedData.content.data.len;
+    unsigned char *end = p + len;
+    size_t octetLen;
+    int rc = mbedtls_asn1_get_tag(&p, end, &octetLen, MBEDTLS_ASN1_OCTET_STRING);
+    if (rc != 0) {
+        return rc;
+    }
+    *data = p;
+    *dataLen = octetLen;
+    return PKCS7_SUCC;
+}
+
+int PKCS7_EnableDebugMode(bool mode)
+{
+    if (g_debugModeEnabled == mode) {
+        return PKCS7_SUCC;
+    }
+    int rc = ((mode == true) ? LoadDebugModeRootCert() : UnLoadDebugModeRootCert());
+    if (rc) {
+        return rc;
+    }
+    g_debugModeEnabled = mode;
+    return PKCS7_SUCC;
+}
+
+#ifdef PARSE_PEM_FORMAT_SIGNED_DATA
+static int ParsePemFormatSignedData(const unsigned char *buf, size_t bufLen, mbedtls_pem_context *pem, char *format)
+{
+    if (bufLen != 0 && strstr((const char *)buf, "-----BEGIN PKCS7-----") != NULL) {
+        int ret;
+        size_t useLen = 0;
+        mbedtls_pem_init(pem);
+        ret = mbedtls_pem_read_buffer(pem, "-----BEGIN PKCS7-----", "-----END PKCS7-----",
+                                      buf, NULL, 0, &useLen);
+        if (ret == 0 && useLen == bufLen) {
+            *format = PEM_FORMAT_SINGED_DATA;
+            return PKCS7_SUCC;
+        }
+        mbedtls_pem_free(pem);
+    } else {
+        *format = DER_FORMAT_SINGED_DATA;
+        return PKCS7_SUCC; // DER format
+    }
+    return PKCS7_INVALID_PARAM;
+}
+#endif
+
+int PKCS7_ParseSignedData(const unsigned char *buf, size_t bufLen, Pkcs7 *pkcs7)
+{
+    int rc;
+    size_t len = 0;
+    bool hasContent = false;
+    unsigned char *start = NULL;
+    unsigned char *end = NULL;
+    if (buf == NULL || bufLen == 0 || pkcs7 == NULL) {
+        return PKCS7_INVALID_PARAM;
+    }
+    (void)memset_s(pkcs7, sizeof(*pkcs7), 0, sizeof(*pkcs7));
+    start = (unsigned char *)buf;
+#ifdef PARSE_PEM_FORMAT_SIGNED_DATA
+    char format = 0;
+    rc = ParsePemFormatSignedData(buf, bufLen, &pkcs7->pem, &format);
+    if (rc) {
+        goto EXIT;
+    }
+    if (format == PEM_FORMAT_SINGED_DATA) {
+        start = pkcs7->pem.buf;
+        bufLen = pkcs7->pem.buflen;
+    }
+#endif
+    end = start + bufLen;
+    /* loaded the root ca cert */
+    rc = LoadRootCert();
+    P_ERR_GOTO_WTTH_LOG(rc);
+    rc = LoadSelfSignedCert();
+    P_ERR_GOTO_WTTH_LOG(rc);
+    LOG_INFO("Begin to parse pkcs#7 signed data");
+    /* parse the ContentInfo total head */
+    rc = GetContentInfoType(&start, end, &(pkcs7->contentTypeOid), &hasContent);
+    P_ERR_GOTO_WTTH_LOG(rc);
+    if (!IsSigedDataOid(pkcs7) || !hasContent) {
+        rc = PKCS7_INVALID_CONTENT_TYPE_OR_NO_CONTENT;
+        LOG_ERROR("Input data is not pkcs#7 signed data format or has no content info");
+        goto EXIT;
+    }
+    rc = GetContentLenOfContentInfo(&start, end, &len);
+    P_ERR_GOTO_WTTH_LOG(rc);
+    if (start + len > end) {
+        goto EXIT;
+    }
+    rc = ParseSignedData(start, len, &(pkcs7->signedData));
+    P_ERR_GOTO_WTTH_LOG(rc);
+    LOG_INFO("Parse pkcs#7 signed data success");
+    rc = ConstructSignerCerts(&pkcs7->signedData);
+    P_ERR_GOTO_WTTH_LOG(rc);
+    return rc;
+EXIT:
+    PKCS7_FreeRes(pkcs7);
+    return rc;
+}
+
+void PKCS7_FreeRes(Pkcs7 *pkcs7)
+{
+    if (pkcs7 == NULL) {
+        return;
+    }
+    FreeSignedDataDigestAlgs(pkcs7);
+    FreeSignersInfo(pkcs7);
+    FreeSignedDataCerts(pkcs7);
+    FreeSignedDataCrl(pkcs7);
+    UnLoadRootCert();
+    UnLoadSelfSignedCert();
+}
diff --git a/base/security/appverify/interfaces/innerkits/appverify_lite/unittest/BUILD.gn b/base/security/appverify/interfaces/innerkits/appverify_lite/unittest/BUILD.gn
new file mode 100755
index 00000000..71760624
--- /dev/null
+++ b/base/security/appverify/interfaces/innerkits/appverify_lite/unittest/BUILD.gn
@@ -0,0 +1,58 @@
+# Copyright (c) 2020 Huawei Device Co., Ltd.
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+import("//build/lite/config/component/lite_component.gni")
+import("//build/lite/config/test.gni")
+
+unittest("app_verify_test") {
+  output_extension = "bin"
+  output_dir = "$root_out_dir/test/unittest/security"
+  sources = [
+    "packets/business_packet.cpp",
+    "packets/modified_packet.cpp",
+    "packets/success_test.cpp",
+    "packets/udid_right_test.cpp",
+    "packets/udid_wrong_test.cpp",
+    "packets/unsigned_packet.cpp",
+    "packets/wrong_license.cpp",
+    "src/hap_verify_test.cpp",
+    "src/write_file.cpp",
+  ]
+
+  include_dirs = [
+    "src",
+    "//base/security/appverify/interfaces/innerkits/appverify_lite/include",
+    "//base/startup/syspara_lite/interfaces/kits",
+    "//base/security/permission/interfaces/innerkits/permission_lite",
+    "//third_party/bounds_checking_function/include",
+    "//third_party/cJSON",
+  ]
+  deps = [
+    "//base/hiviewdfx/hilog_lite/frameworks/featured:hilog_shared",
+    "//base/security/appverify/interfaces/innerkits/appverify_lite:verify",
+    "//base/security/permission/services/permission_lite/pms_client:pms_client",
+    "//base/startup/syspara_lite/frameworks/parameter:parameter",
+    "//build/lite/config/component/cJSON:cjson_shared",
+    "//third_party/bounds_checking_function:libsec_shared",
+    "//third_party/mbedtls:mbedtls_shared",
+  ]
+  ldflags = [
+    "-lstdc++",
+    "-lm",
+    "-lpthread",
+  ]
+}
+
+group("unittest") {
+  deps = [ ":app_verify_test" ]
+}
diff --git a/base/security/appverify/interfaces/innerkits/appverify_lite/unittest/packets/business_packet.cpp b/base/security/appverify/interfaces/innerkits/appverify_lite/unittest/packets/business_packet.cpp
new file mode 100644
index 00000000..a9ae7822
--- /dev/null
+++ b/base/security/appverify/interfaces/innerkits/appverify_lite/unittest/packets/business_packet.cpp
@@ -0,0 +1,23 @@
+/*
+ * Copyright (c) 2020 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+
+static char g_businessPacket[] = "";
+
+char* GetBusinessHap(void)
+{
+    return g_businessPacket;
+}
+
diff --git a/base/security/appverify/interfaces/innerkits/appverify_lite/unittest/packets/modified_packet.cpp b/base/security/appverify/interfaces/innerkits/appverify_lite/unittest/packets/modified_packet.cpp
new file mode 100644
index 00000000..999f2aee
--- /dev/null
+++ b/base/security/appverify/interfaces/innerkits/appverify_lite/unittest/packets/modified_packet.cpp
@@ -0,0 +1,22 @@
+/*
+ * Copyright (c) 2020 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+
+static char g_modifiedPacket[] = "";
+
+const char* GetModifiedHap(void)
+{
+    return g_modifiedPacket;
+}
\ No newline at end of file
diff --git a/base/security/appverify/interfaces/innerkits/appverify_lite/unittest/packets/success_test.cpp b/base/security/appverify/interfaces/innerkits/appverify_lite/unittest/packets/success_test.cpp
new file mode 100755
index 00000000..554838ad
--- /dev/null
+++ b/base/security/appverify/interfaces/innerkits/appverify_lite/unittest/packets/success_test.cpp
@@ -0,0 +1,21 @@
+/*
+ * Copyright (c) 2020 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+
+static char g_successTest[] = "";
+const char* GetSuccessHap(void)
+{
+    return g_successTest;
+}
\ No newline at end of file
diff --git a/base/security/appverify/interfaces/innerkits/appverify_lite/unittest/packets/udid_right_test.cpp b/base/security/appverify/interfaces/innerkits/appverify_lite/unittest/packets/udid_right_test.cpp
new file mode 100644
index 00000000..3beefae2
--- /dev/null
+++ b/base/security/appverify/interfaces/innerkits/appverify_lite/unittest/packets/udid_right_test.cpp
@@ -0,0 +1,21 @@
+/*
+ * Copyright (c) 2020 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+
+static char g_udidRightTest[] = "";
+char* GetRightUdidHap(void)
+{
+    return g_udidRightTest;
+}
diff --git a/base/security/appverify/interfaces/innerkits/appverify_lite/unittest/packets/udid_wrong_test.cpp b/base/security/appverify/interfaces/innerkits/appverify_lite/unittest/packets/udid_wrong_test.cpp
new file mode 100644
index 00000000..cefc579e
--- /dev/null
+++ b/base/security/appverify/interfaces/innerkits/appverify_lite/unittest/packets/udid_wrong_test.cpp
@@ -0,0 +1,21 @@
+/*
+ * Copyright (c) 2020 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+static char g_udidWrongTest[] = "";
+
+const char* GetWrongUdidHap(void)
+{
+    return g_udidWrongTest;
+}
\ No newline at end of file
diff --git a/base/security/appverify/interfaces/innerkits/appverify_lite/unittest/packets/unsigned_packet.cpp b/base/security/appverify/interfaces/innerkits/appverify_lite/unittest/packets/unsigned_packet.cpp
new file mode 100644
index 00000000..369c06b4
--- /dev/null
+++ b/base/security/appverify/interfaces/innerkits/appverify_lite/unittest/packets/unsigned_packet.cpp
@@ -0,0 +1,21 @@
+/*
+ * Copyright (c) 2020 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+static char g_unsignedPacket[] = "";
+
+const char* GetUnsignedHap(void)
+{
+    return g_unsignedPacket;
+}
\ No newline at end of file
diff --git a/base/security/appverify/interfaces/innerkits/appverify_lite/unittest/packets/wrong_license.cpp b/base/security/appverify/interfaces/innerkits/appverify_lite/unittest/packets/wrong_license.cpp
new file mode 100644
index 00000000..013fc962
--- /dev/null
+++ b/base/security/appverify/interfaces/innerkits/appverify_lite/unittest/packets/wrong_license.cpp
@@ -0,0 +1,22 @@
+/*
+ * Copyright (c) 2020 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+
+static char g_wrongLicense[] = "";
+
+const char* GetWrongLiceseHap(void)
+{
+    return g_wrongLicense;
+}
\ No newline at end of file
diff --git a/base/security/appverify/interfaces/innerkits/appverify_lite/unittest/src/hap_verify_test.cpp b/base/security/appverify/interfaces/innerkits/appverify_lite/unittest/src/hap_verify_test.cpp
new file mode 100755
index 00000000..80ce7bc3
--- /dev/null
+++ b/base/security/appverify/interfaces/innerkits/appverify_lite/unittest/src/hap_verify_test.cpp
@@ -0,0 +1,277 @@
+/*
+ * Copyright (c) 2020 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+#include "hap_verify_test.h"
+#include <fstream>
+#include <gtest/gtest.h>
+#include <string>
+#include "app_verify_pub.h"
+#include "write_file.h"
+
+using namespace std;
+using namespace testing::ext;
+namespace {
+class app_verify_test : public testing::Test {
+public:
+    static void SetUpTestCase(void);
+
+    static void TearDownTestCase(void);
+
+    void SetUp();
+
+    void TearDown();
+};
+
+void app_verify_test::SetUpTestCase(void)
+{
+}
+
+void app_verify_test::TearDownTestCase(void)
+{
+}
+
+void app_verify_test::SetUp()
+{
+}
+
+void app_verify_test::TearDown()
+{
+}
+
+/**
+ * @tc.require: SR000E10EO
+ * @tc.name: test001
+ * @tc.desc: 测试签名正确的hap包可以安装并验签通过
+ * @tc.function: SUB_SEC_AppSec_AppSign_VerifySignature
+ * @tc.spec: SUB_SEC_AppSec_AppSign_VerifySignature
+ * @tc.feature: SUB_SEC_AppSec_AppSign_VerifySignature
+ * @tc.number: SUB_SEC_AppSec_AppSign_VerifySignature_1500
+ * @tc.size: MEDIUM
+ * @tc.level: level 3
+ * @tc.type: FUNC
+ */
+HWTEST_F(app_verify_test, test001, TestSize.Level3)
+{
+    const char *signedHap = "./business_packet.hap";
+    DeleteFile(signedHap);
+    CopyFile(GetBusinessHap(), signedHap);
+    VerifyResult verifyResult = {0};
+    int32_t resultCode = APPVERI_AppVerify(signedHap, &verifyResult);
+    ASSERT_TRUE(resultCode == V_OK);
+    APPVERI_FreeVerifyRst(&verifyResult);
+    DeleteFile(signedHap);
+}
+
+/**
+ * @tc.require: SR000E10EO
+ * @tc.name: test002
+ * @tc.desc: 安装未签名的应用，校验失败
+ * @tc.function: SUB_SEC_AppSec_AppSign_VerifySignature
+ * @tc.spec: SUB_SEC_AppSec_AppSign_VerifySignature
+ * @tc.feature: SUB_SEC_AppSec_AppSign_VerifySignature
+ * @tc.number: SUB_SEC_AppSec_AppSign_VerifySignature_1500
+ * @tc.size: MEDIUM
+ * @tc.level: level 3
+ * @tc.type: FUNC
+ */
+HWTEST_F(app_verify_test, test002, TestSize.Level3)
+{
+    const char *unsignedHap = "./unsigned_packet.hap";
+    DeleteFile(unsignedHap);
+    CopyFile(GetUnsignedHap(), unsignedHap);
+    VerifyResult verifyResult = {0};
+    int32_t resultCode = APPVERI_AppVerify(unsignedHap, &verifyResult);
+    ASSERT_TRUE(resultCode != V_OK);
+    APPVERI_FreeVerifyRst(&verifyResult);
+    DeleteFile(unsignedHap);
+}
+
+/**
+ * @tc.require: SR000E10EO
+ * @tc.name: test003
+ * @tc.desc: udid号与设备不对应的应用安装验签失败
+ * @tc.function: SUB_SEC_AppSec_AppSign_VerifySignature
+ * @tc.spec: SUB_SEC_AppSec_AppSign_VerifySignature
+ * @tc.feature: SUB_SEC_AppSec_AppSign_VerifySignature
+ * @tc.number: SUB_SEC_AppSec_AppSign_VerifySignature_1500
+ * @tc.size: MEDIUM
+ * @tc.level: level 3
+ * @tc.type: FUNC
+ */
+HWTEST_F(app_verify_test, test003, TestSize.Level3)
+{
+    APPVERI_SetDebugMode(true);
+    APPVERI_SetActsMode(true);
+    const char *udidUnmatchHap = "./udid_wrong_test.hap";
+    DeleteFile(udidUnmatchHap);
+    CopyFile(GetWrongUdidHap(), udidUnmatchHap);
+    VerifyResult verifyResult = {0};
+    int32_t resultCode = APPVERI_AppVerify(udidUnmatchHap, &verifyResult);
+    ASSERT_TRUE(resultCode != V_OK);
+    APPVERI_FreeVerifyRst(&verifyResult);
+    APPVERI_SetDebugMode(false);
+    APPVERI_SetActsMode(false);
+    DeleteFile(udidUnmatchHap);
+}
+
+/**
+ * @tc.require: AR000F5M36
+ * @tc.name: test004
+ * @tc.desc: udid号与设备对应的应用安装验签
+ * @tc.function: SUB_SEC_AppSec_AppSign_VerifySignature
+ * @tc.spec: SUB_SEC_AppSec_AppSign_VerifySignature
+ * @tc.feature: SUB_SEC_AppSec_AppSign_VerifySignature
+ * @tc.number: SUB_SEC_AppSec_AppSign_VerifySignature_1500
+ * @tc.size: MEDIUM
+ * @tc.level: level 3
+ * @tc.type: FUNC
+ */
+HWTEST_F(app_verify_test, test004, TestSize.Level3)
+{
+    APPVERI_SetDebugMode(true);
+    APPVERI_SetActsMode(true);
+    const char *udidMatchHap = "./udid_right_test.hap";
+    DeleteFile(udidMatchHap);
+    CopyFile(GetRightUdidHap(), udidMatchHap);
+    VerifyResult verifyResult = {0};
+    int32_t resultCode = APPVERI_AppVerify(udidMatchHap, &verifyResult);
+    ASSERT_TRUE(resultCode == V_OK);
+    APPVERI_FreeVerifyRst(&verifyResult);
+    APPVERI_SetDebugMode(false);
+    APPVERI_SetActsMode(false);
+    DeleteFile(udidMatchHap);
+}
+
+/**
+ * @tc.require: SR000E320R
+ * @tc.name: test005
+ * @tc.desc: 被篡改的应用安装验签
+ * @tc.function: SUB_SEC_AppSec_AppSign_VerifySignature
+ * @tc.spec: SUB_SEC_AppSec_AppSign_VerifySignature
+ * @tc.feature: SUB_SEC_AppSec_AppSign_VerifySignature
+ * @tc.number: SUB_SEC_AppSec_AppSign_VerifySignature_1500
+ * @tc.size: MEDIUM
+ * @tc.level: level 3
+ * @tc.type: FUNC
+ */
+HWTEST_F(app_verify_test, test005, TestSize.Level3)
+{
+    const char *tamperedHap = "./modified_packet.hap";
+    DeleteFile(tamperedHap);
+    CopyFile(GetModifiedHap(), tamperedHap);
+    VerifyResult verifyResult = {0};
+    int32_t resultCode = APPVERI_AppVerify(tamperedHap, &verifyResult);
+    ASSERT_TRUE(resultCode != V_OK);
+    APPVERI_FreeVerifyRst(&verifyResult);
+    DeleteFile(tamperedHap);
+}
+
+/**
+ * @tc.require: AR000E320S
+ * @tc.name: test006
+ * @tc.desc: debug模式打开，安装商用版本hap成功，安装测试版本hap成功
+ * @tc.function: SUB_SEC_AppSec_AppSign_VerifySignature
+ * @tc.spec: SUB_SEC_AppSec_AppSign_VerifySignature
+ * @tc.feature: SUB_SEC_AppSec_AppSign_VerifySignature
+ * @tc.number: SUB_SEC_AppSec_AppSign_VerifySignature_1500
+ * @tc.size: MEDIUM
+ * @tc.level: level 3
+ * @tc.type: FUNC
+ */
+HWTEST_F(app_verify_test, test006, TestSize.Level3)
+{
+    APPVERI_SetDebugMode(true);
+    APPVERI_SetActsMode(true);
+    const char *testHap = "./success_test.hap";
+    DeleteFile(testHap);
+    CopyFile(GetSuccessHap(), testHap);
+    VerifyResult verifyResult = {0};
+    int32_t resultCode = APPVERI_AppVerify(testHap, &verifyResult);
+    ASSERT_TRUE(resultCode != V_OK);
+    APPVERI_FreeVerifyRst(&verifyResult);
+    APPVERI_SetActsMode(false);
+    DeleteFile(testHap);
+
+    const char *businessHap = "./business_packet.hap";
+    DeleteFile(businessHap);
+    CopyFile(GetBusinessHap(), businessHap);
+    VerifyResult verifyResult1 = {0};
+    resultCode = APPVERI_AppVerify(businessHap, &verifyResult1);
+    APPVERI_FreeVerifyRst(&verifyResult1);
+    ASSERT_TRUE(resultCode == V_OK);
+    APPVERI_SetDebugMode(false);
+    DeleteFile(businessHap);
+}
+
+/**
+ * @tc.require: AR000E320S
+ * @tc.name: test007
+ * @tc.desc: debug模式关闭，安装商用版本hap成功，安装测试版本hap失败
+ * @tc.function: SUB_SEC_AppSec_AppSign_VerifySignature
+ * @tc.spec: SUB_SEC_AppSec_AppSign_VerifySignature
+ * @tc.feature: SUB_SEC_AppSec_AppSign_VerifySignature
+ * @tc.number: SUB_SEC_AppSec_AppSign_VerifySignature_1500
+ * @tc.size: MEDIUM
+ * @tc.level: level 3
+ * @tc.type: FUNC
+ */
+HWTEST_F(app_verify_test, test007, TestSize.Level3)
+{
+    APPVERI_SetDebugMode(false);
+    const char *businessHap = "./business_packet.hap";
+    DeleteFile(businessHap);
+    CopyFile(GetBusinessHap(), businessHap);
+    VerifyResult verifyResult = {0};
+    int32_t resultCode = APPVERI_AppVerify(businessHap, &verifyResult);
+    ASSERT_TRUE(resultCode == V_OK);
+    APPVERI_FreeVerifyRst(&verifyResult);
+    DeleteFile(businessHap);
+
+    const char *testHap = "./success_test.hap";
+    DeleteFile(testHap);
+    CopyFile(GetSuccessHap(), testHap);
+    VerifyResult verifyResult1 = {0};
+    APPVERI_SetActsMode(true);
+    resultCode = APPVERI_AppVerify(testHap, &verifyResult1);
+    APPVERI_FreeVerifyRst(&verifyResult);
+    ASSERT_TRUE(resultCode != V_OK);
+    APPVERI_SetDebugMode(false);
+    APPVERI_SetActsMode(false);
+    DeleteFile(testHap);
+}
+
+/**
+ * @tc.require: SR000E320R
+ * @tc.name: test008
+ * @tc.desc: 使用错误证书的应用安全验签失败
+ * @tc.function: SUB_SEC_AppSec_AppSign_VerifySignature
+ * @tc.spec: SUB_SEC_AppSec_AppSign_VerifySignature
+ * @tc.feature: SUB_SEC_AppSec_AppSign_VerifySignature
+ * @tc.number: SUB_SEC_AppSec_AppSign_VerifySignature_1500
+ * @tc.size: MEDIUM
+ * @tc.level: level 3
+ * @tc.type: FUNC
+ */
+HWTEST_F(app_verify_test, test008, TestSize.Level3)
+{
+    const char *wrongHap = "./wrong_license.hap";
+    DeleteFile(wrongHap);
+    CopyFile(GetWrongLiceseHap(), wrongHap);
+    VerifyResult verifyResult = {0};
+    int32_t resultCode = APPVERI_AppVerify(wrongHap, &verifyResult);
+    ASSERT_TRUE(resultCode != V_OK);
+    APPVERI_FreeVerifyRst(&verifyResult);
+    DeleteFile(wrongHap);
+}
+}
diff --git a/base/security/appverify/interfaces/innerkits/appverify_lite/unittest/src/hap_verify_test.h b/base/security/appverify/interfaces/innerkits/appverify_lite/unittest/src/hap_verify_test.h
new file mode 100644
index 00000000..b8f5ad54
--- /dev/null
+++ b/base/security/appverify/interfaces/innerkits/appverify_lite/unittest/src/hap_verify_test.h
@@ -0,0 +1,19 @@
+/*
+ * Copyright (c) 2020 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef APPSECURITY_HAP_VERIFY_TEST_H
+#define APPSECURITY_HAP_VERIFY_TEST_H
+
+#endif // APPSECURITY_HAP_VERIFY_TEST_H
diff --git a/base/security/appverify/interfaces/innerkits/appverify_lite/unittest/src/write_file.cpp b/base/security/appverify/interfaces/innerkits/appverify_lite/unittest/src/write_file.cpp
new file mode 100755
index 00000000..955fd6da
--- /dev/null
+++ b/base/security/appverify/interfaces/innerkits/appverify_lite/unittest/src/write_file.cpp
@@ -0,0 +1,80 @@
+/*
+ * Copyright (c) 2020 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "write_file.h"
+#include <fcntl.h>
+#include <stdbool.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <sys/stat.h>
+#include <sys/types.h>
+#include <unistd.h>
+#include "mbedtls/base64.h"
+#include "securec.h"
+
+const int MAX_FILE_LEN = 1000000;
+const int ONCE_WRITE = 2000;
+
+int CopyFile(const char *org, const char *dest)
+{
+    int ret = 0;
+    if (org == NULL || dest == NULL) {
+        return -1;
+    }
+    int in = open(dest, O_WRONLY | O_CREAT | O_TRUNC, S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH);
+    if (in < 0) {
+        return -1;
+    }
+
+    int wholeLen = strlen(org);
+    if (wholeLen == 0 || wholeLen > MAX_FILE_LEN) {
+        close(in);
+        return -1;
+    }
+    char *buffer = (char *)malloc(wholeLen);
+    if (buffer == NULL) {
+        close(in);
+        return -1;
+    }
+    (void)memset_s(buffer, wholeLen, 0, wholeLen);
+    int len = 0;
+    mbedtls_base64_decode((unsigned char *)buffer, (size_t)wholeLen, (size_t *)&len, (unsigned char *)org, (size_t)wholeLen);
+    int num = 0;
+    while (num < len) {
+        int trueLen = ((len - num) >= ONCE_WRITE) ? ONCE_WRITE : (len - num);
+        char *temp = buffer + num;
+        num += trueLen;
+        ret = write(in, temp, trueLen);
+        if (ret < 0) {
+            goto EXIT;
+        }
+    }
+    ret = 0;
+EXIT:
+    close(in);
+    free(buffer);
+    return ret;
+}
+
+void DeleteFile(const char *path)
+{
+    if (path == NULL) {
+        return;
+    }
+    remove(path);
+    return;
+}
+
diff --git a/base/security/appverify/interfaces/innerkits/appverify_lite/unittest/src/write_file.h b/base/security/appverify/interfaces/innerkits/appverify_lite/unittest/src/write_file.h
new file mode 100644
index 00000000..3cf148ac
--- /dev/null
+++ b/base/security/appverify/interfaces/innerkits/appverify_lite/unittest/src/write_file.h
@@ -0,0 +1,29 @@
+/*
+ * Copyright (c) 2020 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+#ifndef APPSECURITY_WRITE_FILE_H
+#define APPSECURITY_WRITE_FILE_H
+
+#include <stdio.h>
+#include <stdlib.h>
+void DeleteFile(const char *path);
+int CopyFile(const char *org, const char *dest);
+const char* GetWrongLiceseHap(void);
+const char* GetUnsignedHap(void);
+const char* GetWrongUdidHap(void);
+const char* GetRightUdidHap(void);
+const char* GetSuccessHap(void);
+const char* GetModifiedHap(void);
+const char* GetBusinessHap(void);
+#endif // APPSECURITY_WRITE_FILE_H
\ No newline at end of file
diff --git a/base/security/deviceauth/frameworks/deviceauth_lite/source/BUILD.gn b/base/security/deviceauth/frameworks/deviceauth_lite/source/BUILD.gn
index 0c9b2bf3..c8b13006 100755
--- a/base/security/deviceauth/frameworks/deviceauth_lite/source/BUILD.gn
+++ b/base/security/deviceauth/frameworks/deviceauth_lite/source/BUILD.gn
@@ -81,6 +81,9 @@ config("hichain_config") {
     "_CUT_REMOVE_",
     "_CUT_ADD_",
     "_CUT_LOG_",
+    "_CUT_STS_SERVER_",
+    "_CUT_STS_",
+    "_CUT_EXCHANGE_",
   ]
 }
 
diff --git a/base/security/deviceauth/frameworks/deviceauth_lite/source/log/log.h b/base/security/deviceauth/frameworks/deviceauth_lite/source/log/log.h
index 46982d88..3415f18a 100755
--- a/base/security/deviceauth/frameworks/deviceauth_lite/source/log/log.h
+++ b/base/security/deviceauth/frameworks/deviceauth_lite/source/log/log.h
@@ -36,10 +36,10 @@ log_f get_loge(void);
 #define LOGW(...) get_logw()("[HiChain]", __func__, __VA_ARGS__)
 #define LOGE(...) get_loge()("[HiChain]", __func__, __VA_ARGS__)
 #else
-#define DBG_OUT(...) {}
-#define LOGI(...) {}
-#define LOGW(...) {}
-#define LOGE(...) {}
+#define DBG_OUT(...)//  bk_printf("[HiChain]%s,%s:%d ",__FILE__,__FUNCTION__,__LINE__);bk_printf(__VA_ARGS__);bk_printf("\r\n")
+#define LOGI(...) //bk_printf("[HiChain]%s,%s:%d ",__FILE__,__FUNCTION__,__LINE__);bk_printf(__VA_ARGS__);bk_printf("\r\n")
+#define LOGW(...)   //bk_printf("[HiChain]%s,%s:%d ",__FILE__,__FUNCTION__,__LINE__);bk_printf(__VA_ARGS__);bk_printf("\r\n")
+#define LOGE(...)   //bk_printf("[HiChain]%s,%s:%d ",__FILE__,__FUNCTION__,__LINE__);bk_printf(__VA_ARGS__);bk_printf("\r\n")
 #endif
 
 #endif /* __LOG_H__ */
diff --git a/base/security/huks/frameworks/huks_lite/BUILD.gn b/base/security/huks/frameworks/huks_lite/BUILD.gn
index 772e4673..19752757 100755
--- a/base/security/huks/frameworks/huks_lite/BUILD.gn
+++ b/base/security/huks/frameworks/huks_lite/BUILD.gn
@@ -17,7 +17,7 @@ import("//build/lite/config/component/lite_component.gni")
 
 lite_component("huks_sdk") {
   if (ohos_kernel_type == "liteos_m") {
-    features = []
+    features = [ "source:huks_static" ]
   } else {
     features = [ "source:huks" ]
   }
diff --git a/base/security/huks/frameworks/huks_lite/source/BUILD.gn b/base/security/huks/frameworks/huks_lite/source/BUILD.gn
index ab7104a4..38b66de0 100755
--- a/base/security/huks/frameworks/huks_lite/source/BUILD.gn
+++ b/base/security/huks/frameworks/huks_lite/source/BUILD.gn
@@ -21,13 +21,12 @@ config("soft_huks_config") {
     "hw_keystore_sdk/soft_service",
     "//third_party/bounds_checking_function/include",
     "//base/security/huks/interfaces/innerkits/huks_lite",
+    "//third_party/mbedtls/include",
   ]
 
   defines = [ "_FORTIFY_SOURCE = 2" ]
 
   cflags = [
-    "-fvisibility=hidden",
-    "-flto",
     "-Wall",
   ]
 }
@@ -36,7 +35,7 @@ config("public_huks_config") {
   include_dirs = [ "//base/security/huks/interfaces/innerkits/huks_lite" ]
 }
 
-shared_library("huks") {
+static_library("huks_static") {
   sources = [
     "hw_keystore_sdk/common/hks_bn.c",
     "hw_keystore_sdk/common/hks_common.c",
@@ -53,9 +52,6 @@ shared_library("huks") {
   configs += [ ":soft_huks_config" ]
 
   public_deps = [
-    "//build/lite/config/component/openssl:openssl_shared",
-    "//third_party/bounds_checking_function:libsec_shared",
-    "//third_party/mbedtls:mbedtls_shared",
   ]
 
   public_configs = [ ":public_huks_config" ]
diff --git a/base/security/huks/frameworks/huks_lite/source/hw_keystore_sdk/common/hks_common.h b/base/security/huks/frameworks/huks_lite/source/hw_keystore_sdk/common/hks_common.h
index 8a7fb4cf..986a2d54 100755
--- a/base/security/huks/frameworks/huks_lite/source/hw_keystore_sdk/common/hks_common.h
+++ b/base/security/huks/frameworks/huks_lite/source/hw_keystore_sdk/common/hks_common.h
@@ -34,6 +34,7 @@
 #include <mbedtls/ripemd160.h>
 #include <mbedtls/sha256.h>
 #include <mbedtls/sha512.h>
+#include <mbedtls/ecp.h>
 
 #include "hks_hardware_api.h"
 
diff --git a/base/security/huks/frameworks/huks_lite/source/hw_keystore_sdk/soft_service/hks_service.c b/base/security/huks/frameworks/huks_lite/source/hw_keystore_sdk/soft_service/hks_service.c
index 0d4b8b74..6728ed99 100755
--- a/base/security/huks/frameworks/huks_lite/source/hw_keystore_sdk/soft_service/hks_service.c
+++ b/base/security/huks/frameworks/huks_lite/source/hw_keystore_sdk/soft_service/hks_service.c
@@ -15,7 +15,7 @@
 
 #include "hks_service.h"
 
-#include <ec_local.h>
+//#include <ec_local.h>
 #include <mbedtls/ctr_drbg.h>
 #include <mbedtls/ecdh.h>
 #include <mbedtls/entropy.h>
@@ -66,6 +66,23 @@ static int32_t hks_service_verify_with_alias(const struct hks_blob *key_alias,
     struct hks_blob *public_key,
     struct hks_key_param *param, struct hks_storage_key_info *key_info);
 
+static void ED25519_public_from_private(char *dst, char *src)
+{
+	//printf("dummy ED25519_public_from_private\n");
+	return;
+}
+
+static int ED25519_sign(uint8_t *signature, uint8_t *hash, int hash_size, uint8_t *private_key, uint8_t *private_key2)
+{
+	return HKS_BOOL_TRUE;
+}
+
+static int ED25519_verify(uint8_t *hash, int hash_size, uint8_t *signature, uint8_t *public_key)
+{
+	return HKS_BOOL_TRUE;
+}
+
+
 int32_t hks_service_generate_key(const struct hks_blob *key_alias,
     const struct hks_key_param *key_param)
 {
diff --git a/base/security/huks/frameworks/huks_lite/source/hw_keystore_sdk/soft_service/hks_storage.c b/base/security/huks/frameworks/huks_lite/source/hw_keystore_sdk/soft_service/hks_storage.c
index ec51613c..db9615d1 100755
--- a/base/security/huks/frameworks/huks_lite/source/hw_keystore_sdk/soft_service/hks_storage.c
+++ b/base/security/huks/frameworks/huks_lite/source/hw_keystore_sdk/soft_service/hks_storage.c
@@ -122,28 +122,67 @@ static uint16_t hks_get_key_slot_len(void)
 /* Caution: only used in local machine, endian is not considerred */
 static inline uint32_t hks_blob_write_uint32(uint8_t *buf, uint32_t value)
 {
-    *((uint32_t *)buf) = value;
+//    *((uint32_t *)buf) = value;
+#if BYTE_ORDER == LITTLE_ENDIAN
+
+	buf[0] = value&0xff;
+	buf[1] = (value>>8)&0xff;
+	buf[2] = (value>>16)&0xff;
+	buf[3] = (value>>24)&0xff;
+#elif   BYTE_ORDER == BIG_ENDIAN
+	buf[3] = value&0xff;
+	buf[2] = (value>>8)&0xff;
+	buf[1] = (value>>16)&0xff;
+	buf[0] = (value>>24)&0xff;
+
+#endif
+
     return sizeof(value);
 }
 
 /* Caution: only used in local machine, endian is not considerred */
 static inline uint32_t hks_blob_read_uint32(uint32_t *value, const uint8_t *buf)
 {
-    *value = *((uint32_t *)buf);
+//    *value = *((uint32_t *)buf);
+#if BYTE_ORDER == LITTLE_ENDIAN
+	*value = buf[0] | \
+				buf[1]<<8 |\
+				buf[2]<<16 |\
+				buf[3]<<24 ;
+#elif   BYTE_ORDER == BIG_ENDIAN
+	*value = buf[3] | \
+				buf[2]<<8 |\
+				buf[1]<<16 |\
+				buf[0]<<24 ;
+#endif
     return sizeof(uint32_t);
 }
 
 /* Caution: only used in local machine, endian is not considerred */
 static inline uint32_t hks_blob_write_uint16(uint8_t *buf, uint16_t value)
 {
-    *((uint16_t *)buf) = value;
+//    *((uint16_t *)buf) = value;
+#if BYTE_ORDER == LITTLE_ENDIAN
+	buf[0] = value&0xff;
+	buf[1] = (value>>8)&0xff;
+#elif   BYTE_ORDER == BIG_ENDIAN
+	buf[1] = value&0xff;
+	buf[0] = (value>>8)&0xff;
+#endif
     return sizeof(value);
 }
 
 /* Caution: only used in local machine, endian is not considerred */
 static inline uint32_t hks_blob_read_uint16(uint16_t *value, const uint8_t *buf)
 {
-    *value = *((uint16_t *)buf);
+//    *value = *((uint16_t *)buf);
+#if BYTE_ORDER == LITTLE_ENDIAN
+	*value = buf[0] | \
+				buf[1]<<8;
+#elif   BYTE_ORDER == BIG_ENDIAN
+	*value = buf[1] | \
+				buf[0]<<8;
+#endif
     return sizeof(uint16_t);
 }
 
diff --git a/base/security/permission/LICENSE b/base/security/permission/LICENSE
new file mode 100644
index 00000000..4a459866
--- /dev/null
+++ b/base/security/permission/LICENSE
@@ -0,0 +1,177 @@
+
+                                 Apache License
+                           Version 2.0, January 2004
+                        http://www.apache.org/licenses/
+
+   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
+
+   1. Definitions.
+
+      "License" shall mean the terms and conditions for use, reproduction,
+      and distribution as defined by Sections 1 through 9 of this document.
+
+      "Licensor" shall mean the copyright owner or entity authorized by
+      the copyright owner that is granting the License.
+
+      "Legal Entity" shall mean the union of the acting entity and all
+      other entities that control, are controlled by, or are under common
+      control with that entity. For the purposes of this definition,
+      "control" means (i) the power, direct or indirect, to cause the
+      direction or management of such entity, whether by contract or
+      otherwise, or (ii) ownership of fifty percent (50%) or more of the
+      outstanding shares, or (iii) beneficial ownership of such entity.
+
+      "You" (or "Your") shall mean an individual or Legal Entity
+      exercising permissions granted by this License.
+
+      "Source" form shall mean the preferred form for making modifications,
+      including but not limited to software source code, documentation
+      source, and configuration files.
+
+      "Object" form shall mean any form resulting from mechanical
+      transformation or translation of a Source form, including but
+      not limited to compiled object code, generated documentation,
+      and conversions to other media types.
+
+      "Work" shall mean the work of authorship, whether in Source or
+      Object form, made available under the License, as indicated by a
+      copyright notice that is included in or attached to the work
+      (an example is provided in the Appendix below).
+
+      "Derivative Works" shall mean any work, whether in Source or Object
+      form, that is based on (or derived from) the Work and for which the
+      editorial revisions, annotations, elaborations, or other modifications
+      represent, as a whole, an original work of authorship. For the purposes
+      of this License, Derivative Works shall not include works that remain
+      separable from, or merely link (or bind by name) to the interfaces of,
+      the Work and Derivative Works thereof.
+
+      "Contribution" shall mean any work of authorship, including
+      the original version of the Work and any modifications or additions
+      to that Work or Derivative Works thereof, that is intentionally
+      submitted to Licensor for inclusion in the Work by the copyright owner
+      or by an individual or Legal Entity authorized to submit on behalf of
+      the copyright owner. For the purposes of this definition, "submitted"
+      means any form of electronic, verbal, or written communication sent
+      to the Licensor or its representatives, including but not limited to
+      communication on electronic mailing lists, source code control systems,
+      and issue tracking systems that are managed by, or on behalf of, the
+      Licensor for the purpose of discussing and improving the Work, but
+      excluding communication that is conspicuously marked or otherwise
+      designated in writing by the copyright owner as "Not a Contribution."
+
+      "Contributor" shall mean Licensor and any individual or Legal Entity
+      on behalf of whom a Contribution has been received by Licensor and
+      subsequently incorporated within the Work.
+
+   2. Grant of Copyright License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      copyright license to reproduce, prepare Derivative Works of,
+      publicly display, publicly perform, sublicense, and distribute the
+      Work and such Derivative Works in Source or Object form.
+
+   3. Grant of Patent License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      (except as stated in this section) patent license to make, have made,
+      use, offer to sell, sell, import, and otherwise transfer the Work,
+      where such license applies only to those patent claims licensable
+      by such Contributor that are necessarily infringed by their
+      Contribution(s) alone or by combination of their Contribution(s)
+      with the Work to which such Contribution(s) was submitted. If You
+      institute patent litigation against any entity (including a
+      cross-claim or counterclaim in a lawsuit) alleging that the Work
+      or a Contribution incorporated within the Work constitutes direct
+      or contributory patent infringement, then any patent licenses
+      granted to You under this License for that Work shall terminate
+      as of the date such litigation is filed.
+
+   4. Redistribution. You may reproduce and distribute copies of the
+      Work or Derivative Works thereof in any medium, with or without
+      modifications, and in Source or Object form, provided that You
+      meet the following conditions:
+
+      (a) You must give any other recipients of the Work or
+          Derivative Works a copy of this License; and
+
+      (b) You must cause any modified files to carry prominent notices
+          stating that You changed the files; and
+
+      (c) You must retain, in the Source form of any Derivative Works
+          that You distribute, all copyright, patent, trademark, and
+          attribution notices from the Source form of the Work,
+          excluding those notices that do not pertain to any part of
+          the Derivative Works; and
+
+      (d) If the Work includes a "NOTICE" text file as part of its
+          distribution, then any Derivative Works that You distribute must
+          include a readable copy of the attribution notices contained
+          within such NOTICE file, excluding those notices that do not
+          pertain to any part of the Derivative Works, in at least one
+          of the following places: within a NOTICE text file distributed
+          as part of the Derivative Works; within the Source form or
+          documentation, if provided along with the Derivative Works; or,
+          within a display generated by the Derivative Works, if and
+          wherever such third-party notices normally appear. The contents
+          of the NOTICE file are for informational purposes only and
+          do not modify the License. You may add Your own attribution
+          notices within Derivative Works that You distribute, alongside
+          or as an addendum to the NOTICE text from the Work, provided
+          that such additional attribution notices cannot be construed
+          as modifying the License.
+
+      You may add Your own copyright statement to Your modifications and
+      may provide additional or different license terms and conditions
+      for use, reproduction, or distribution of Your modifications, or
+      for any such Derivative Works as a whole, provided Your use,
+      reproduction, and distribution of the Work otherwise complies with
+      the conditions stated in this License.
+
+   5. Submission of Contributions. Unless You explicitly state otherwise,
+      any Contribution intentionally submitted for inclusion in the Work
+      by You to the Licensor shall be under the terms and conditions of
+      this License, without any additional terms or conditions.
+      Notwithstanding the above, nothing herein shall supersede or modify
+      the terms of any separate license agreement you may have executed
+      with Licensor regarding such Contributions.
+
+   6. Trademarks. This License does not grant permission to use the trade
+      names, trademarks, service marks, or product names of the Licensor,
+      except as required for reasonable and customary use in describing the
+      origin of the Work and reproducing the content of the NOTICE file.
+
+   7. Disclaimer of Warranty. Unless required by applicable law or
+      agreed to in writing, Licensor provides the Work (and each
+      Contributor provides its Contributions) on an "AS IS" BASIS,
+      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
+      implied, including, without limitation, any warranties or conditions
+      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
+      PARTICULAR PURPOSE. You are solely responsible for determining the
+      appropriateness of using or redistributing the Work and assume any
+      risks associated with Your exercise of permissions under this License.
+
+   8. Limitation of Liability. In no event and under no legal theory,
+      whether in tort (including negligence), contract, or otherwise,
+      unless required by applicable law (such as deliberate and grossly
+      negligent acts) or agreed to in writing, shall any Contributor be
+      liable to You for damages, including any direct, indirect, special,
+      incidental, or consequential damages of any character arising as a
+      result of this License or out of the use or inability to use the
+      Work (including but not limited to damages for loss of goodwill,
+      work stoppage, computer failure or malfunction, or any and all
+      other commercial damages or losses), even if such Contributor
+      has been advised of the possibility of such damages.
+
+   9. Accepting Warranty or Additional Liability. While redistributing
+      the Work or Derivative Works thereof, You may choose to offer,
+      and charge a fee for, acceptance of support, warranty, indemnity,
+      or other liability obligations and/or rights consistent with this
+      License. However, in accepting such obligations, You may act only
+      on Your own behalf and on Your sole responsibility, not on behalf
+      of any other Contributor, and only if You agree to indemnify,
+      defend, and hold each Contributor harmless for any liability
+      incurred by, or claims asserted against, such Contributor by reason
+      of your accepting any such warranty or additional liability.
+
+   END OF TERMS AND CONDITIONS
\ No newline at end of file
diff --git a/base/security/permission/README.md b/base/security/permission/README.md
new file mode 100755
index 00000000..f1e1947f
--- /dev/null
+++ b/base/security/permission/README.md
@@ -0,0 +1,104 @@
+# permission\_lite<a name="EN-US_TOPIC_0000001123217533"></a>
+
+-   [Application Permission Management](#section20822104317111)
+-   [IPC Authentication](#section156859591110)
+
+## Application Permission Management<a name="section20822104317111"></a>
+
+Application permissions are used to control access to system resources and features related to personal privacy, for example, accessing hardware features of personal devices such as cameras and microphones, and reading and writing media files. The OS protects such data and features through application permission management.
+
+The following table describes fields in a permission.
+
+<a name="table1073153511418"></a>
+<table><thead align="left"><tr id="row11107193541417"><th class="cellrowborder" valign="top" width="22.220000000000002%" id="mcps1.1.4.1.1"><p id="p6107535141420"><a name="p6107535141420"></a><a name="p6107535141420"></a>Field</p>
+</th>
+<th class="cellrowborder" valign="top" width="35.099999999999994%" id="mcps1.1.4.1.2"><p id="p111080352143"><a name="p111080352143"></a><a name="p111080352143"></a>Value</p>
+</th>
+<th class="cellrowborder" valign="top" width="42.68%" id="mcps1.1.4.1.3"><p id="p161080358141"><a name="p161080358141"></a><a name="p161080358141"></a>Description</p>
+</th>
+</tr>
+</thead>
+<tbody><tr id="row151081735111418"><td class="cellrowborder" valign="top" width="22.220000000000002%" headers="mcps1.1.4.1.1 "><p id="p1108193521417"><a name="p1108193521417"></a><a name="p1108193521417"></a>name</p>
+</td>
+<td class="cellrowborder" valign="top" width="35.099999999999994%" headers="mcps1.1.4.1.2 "><p id="p131081435151413"><a name="p131081435151413"></a><a name="p131081435151413"></a>String</p>
+</td>
+<td class="cellrowborder" valign="top" width="42.68%" headers="mcps1.1.4.1.3 "><p id="p0108235141411"><a name="p0108235141411"></a><a name="p0108235141411"></a>Permission name</p>
+</td>
+</tr>
+<tr id="row19108143516148"><td class="cellrowborder" valign="top" width="22.220000000000002%" headers="mcps1.1.4.1.1 "><p id="p51081355145"><a name="p51081355145"></a><a name="p51081355145"></a>reason</p>
+</td>
+<td class="cellrowborder" valign="top" width="35.099999999999994%" headers="mcps1.1.4.1.2 "><p id="p01082358147"><a name="p01082358147"></a><a name="p01082358147"></a>Multi-language string ID</p>
+</td>
+<td class="cellrowborder" valign="top" width="42.68%" headers="mcps1.1.4.1.3 "><p id="p191081235171414"><a name="p191081235171414"></a><a name="p191081235171414"></a>Purpose of requesting the permission</p>
+</td>
+</tr>
+<tr id="row13108123516145"><td class="cellrowborder" valign="top" width="22.220000000000002%" headers="mcps1.1.4.1.1 "><p id="p18109835101415"><a name="p18109835101415"></a><a name="p18109835101415"></a>used-scene{</p>
+<p id="p910913358146"><a name="p910913358146"></a><a name="p910913358146"></a>ability,</p>
+<p id="p11109235181420"><a name="p11109235181420"></a><a name="p11109235181420"></a>when</p>
+<p id="p16109193531417"><a name="p16109193531417"></a><a name="p16109193531417"></a>}</p>
+</td>
+<td class="cellrowborder" valign="top" width="35.099999999999994%" headers="mcps1.1.4.1.2 "><p id="p4109123511420"><a name="p4109123511420"></a><a name="p4109123511420"></a><strong id="b2227185715217"><a name="b2227185715217"></a><a name="b2227185715217"></a>ability</strong>: string of the component class name</p>
+<p id="p19109133531410"><a name="p19109133531410"></a><a name="p19109133531410"></a>when:inuse, always</p>
+</td>
+<td class="cellrowborder" valign="top" width="42.68%" headers="mcps1.1.4.1.3 "><p id="p31091835151413"><a name="p31091835151413"></a><a name="p31091835151413"></a>Scene where the APIs controlled by this permission are called.</p>
+<p id="p93361156407"><a name="p93361156407"></a><a name="p93361156407"></a>This field declares what components can call the APIs controlled by this permission in the specified scene (foreground/background).</p>
+</td>
+</tr>
+</tbody>
+</table>
+
+## IPC Authentication<a name="section156859591110"></a>
+
+-   If system services registered with Samgr provide APIs for other processes to access the services through IPC, access control policies must be configured; otherwise, access to the system services will be denied.
+-   You can configure access control policies in  **base/security/permission/services/permission\_lite/ipc\_auth/include/policy\_preset.h**.
+
+    1. Define the policies for each feature.
+
+    2. Add the feature policies to the global policy.
+
+
+Eg.  For example, to configure an access policy for the BMS service, whose service registered with Samgr is  **bundlems**  and whose registered feature is  **BmsFeature**, perform the following operations:
+
+1. Define feature policies. You can configure multiple features and configure multiple access policies for each feature.
+
+**Figure  1**  Example feature policy<a name="fig715515221920"></a>  
+
+
+![](figures/bms策略举例.png)
+
+There are three types of access policies:
+
+**Figure  2**  Access policy structure<a name="fig1848524515915"></a>  
+
+
+![](figures/策略类型2.png)
+
+1.    **RANGE**: Processes with UIDs in a specified range can access the BMS service.  **uidMin**  and  **uidMax**  must be specified.
+
+2.    **FIXED**: Processes with specified UIDs can access the BMS service.  **fixedUid**  must be specified, and a maximum of eight UIDs are allowed.
+
+3.    **BUNDLENAME**: A specified application can access the BMS service.  **bundleName**  must be specified.
+
+2. Add the defined feature policies to the global policy. You need to configure the number of features.
+
+**Figure  3**  Registering a feature policy<a name="fig1181753551014"></a>  
+
+
+![](figures/全局策略2.png)
+
+UID allocation rules:
+
+1. Init process: 0
+
+2. appspawn process: 1
+
+3. Shell process: 2
+
+4. Other built-in system services: less than or equal to 99
+
+5. System applications \(such as settings, home screen, and camera\): 100–999
+
+6. Preset applications: 1000–9999
+
+7. Common third-party applications: 10000 to  **INT\_MAX**
+
diff --git a/base/security/permission/README_zh.md b/base/security/permission/README_zh.md
new file mode 100755
index 00000000..c169db04
--- /dev/null
+++ b/base/security/permission/README_zh.md
@@ -0,0 +1,104 @@
+# 项目介绍<a name="ZH-CN_TOPIC_0000001123217533"></a>
+
+-   [应用权限管理](#section20822104317111)
+-   [IPC通信鉴权](#section156859591110)
+
+## 应用权限管理<a name="section20822104317111"></a>
+
+应用权限是软件用来访问系统资源和使用系统能力的一种通行方式，存在涉及个人隐私相关功能和数据的场景，例如：访问个人设备的硬件特性，如摄像头、麦克风，以及读写媒体文件等。操作系统通过应用权限管理来保护这些数据以及能力。
+
+权限定义字段说明：
+
+<a name="table1073153511418"></a>
+<table><thead align="left"><tr id="row11107193541417"><th class="cellrowborder" valign="top" width="22.220000000000002%" id="mcps1.1.4.1.1"><p id="p6107535141420"><a name="p6107535141420"></a><a name="p6107535141420"></a>字段</p>
+</th>
+<th class="cellrowborder" valign="top" width="35.099999999999994%" id="mcps1.1.4.1.2"><p id="p111080352143"><a name="p111080352143"></a><a name="p111080352143"></a>取值</p>
+</th>
+<th class="cellrowborder" valign="top" width="42.68%" id="mcps1.1.4.1.3"><p id="p161080358141"><a name="p161080358141"></a><a name="p161080358141"></a>意义</p>
+</th>
+</tr>
+</thead>
+<tbody><tr id="row151081735111418"><td class="cellrowborder" valign="top" width="22.220000000000002%" headers="mcps1.1.4.1.1 "><p id="p1108193521417"><a name="p1108193521417"></a><a name="p1108193521417"></a>name</p>
+</td>
+<td class="cellrowborder" valign="top" width="35.099999999999994%" headers="mcps1.1.4.1.2 "><p id="p131081435151413"><a name="p131081435151413"></a><a name="p131081435151413"></a>字符串</p>
+</td>
+<td class="cellrowborder" valign="top" width="42.68%" headers="mcps1.1.4.1.3 "><p id="p0108235141411"><a name="p0108235141411"></a><a name="p0108235141411"></a>权限名。</p>
+</td>
+</tr>
+<tr id="row19108143516148"><td class="cellrowborder" valign="top" width="22.220000000000002%" headers="mcps1.1.4.1.1 "><p id="p51081355145"><a name="p51081355145"></a><a name="p51081355145"></a>reason</p>
+</td>
+<td class="cellrowborder" valign="top" width="35.099999999999994%" headers="mcps1.1.4.1.2 "><p id="p01082358147"><a name="p01082358147"></a><a name="p01082358147"></a>多语言字符串id</p>
+</td>
+<td class="cellrowborder" valign="top" width="42.68%" headers="mcps1.1.4.1.3 "><p id="p191081235171414"><a name="p191081235171414"></a><a name="p191081235171414"></a>应用申请此权限的目的。</p>
+</td>
+</tr>
+<tr id="row13108123516145"><td class="cellrowborder" valign="top" width="22.220000000000002%" headers="mcps1.1.4.1.1 "><p id="p18109835101415"><a name="p18109835101415"></a><a name="p18109835101415"></a>used-scene{</p>
+<p id="p910913358146"><a name="p910913358146"></a><a name="p910913358146"></a>ability，</p>
+<p id="p11109235181420"><a name="p11109235181420"></a><a name="p11109235181420"></a>when</p>
+<p id="p16109193531417"><a name="p16109193531417"></a><a name="p16109193531417"></a>}</p>
+</td>
+<td class="cellrowborder" valign="top" width="35.099999999999994%" headers="mcps1.1.4.1.2 "><p id="p4109123511420"><a name="p4109123511420"></a><a name="p4109123511420"></a>ability:组件类名字符串</p>
+<p id="p19109133531410"><a name="p19109133531410"></a><a name="p19109133531410"></a>when:inuse, always</p>
+</td>
+<td class="cellrowborder" valign="top" width="42.68%" headers="mcps1.1.4.1.3 "><p id="p31091835151413"><a name="p31091835151413"></a><a name="p31091835151413"></a>调用受此权限管控的接口的场景。</p>
+<p id="p93361156407"><a name="p93361156407"></a><a name="p93361156407"></a>声明在哪些组件和场景（前台/后台）下调用受管控的接口。</p>
+</td>
+</tr>
+</tbody>
+</table>
+
+## IPC通信鉴权<a name="section156859591110"></a>
+
+-   在Samgr中注册的系统服务如果通过进程间通信的方式暴露接口给其他进程访问，需要配置相应的访问控制策略。若不进行相关配置，访问会被拒绝。
+-   配置方式：在头文件base/security/permission/services/permission\_lite/ipc\_auth/include/policy\_preset.h中配置访问策略。
+
+    1. 定义各个Feature的策略
+
+    2. 将Feature的策略加到全局策略中
+
+
+Eg.  比如当前需要为BMS服务配置访问策略，BMS在Samgr中注册的service为bundlems，注册的Feature为BmsFeature。
+
+一、首先定义Feature的策略，可配置多个Feature，每个Feature可以配置多个访问策略，策略的声明方式参考图1
+
+**图 1**  Feature策略示例<a name="fig715515221920"></a>  
+
+
+![](figures/bms策略举例.png)
+
+访问策略有三种类型：
+
+**图 2**  访问策略结构体<a name="fig1848524515915"></a>  
+
+
+![](figures/策略类型2.png)
+
+1.   type为RANGE类型：允许某个特定范围UID的进程访问，需要指定uidMin和uidMax
+
+2.   type为FIXED类型：允许指定的几个UID的进程访问，需要指定fixedUid，最多配置8个
+
+3.   type为BUNDLENAME类型：只允许特定的应用访问，需要指定bundleName（包名）
+
+二、将定义的Feature的策略加配到全局策略中，需要配置feature数量，注册参考图3
+
+**图 3**  feature策略注册<a name="fig1181753551014"></a>  
+
+
+![](figures/全局策略2.png)
+
+UID分配规则
+
+1. Init进程：0
+
+2. appspawn进程：1
+
+3. Shell进程：2
+
+4. 其他内置系统服务UID <= 99
+
+5. 系统应用（如设置、桌面、相机）：100 \~ 999
+
+6. 预置厂商应用：1000 \~ 9999
+
+7. 普通三方应用：10000 \~ INT\_MAX
+
diff --git "a/base/security/permission/figures/bms\347\255\226\347\225\245\344\270\276\344\276\213.png" "b/base/security/permission/figures/bms\347\255\226\347\225\245\344\270\276\344\276\213.png"
new file mode 100755
index 0000000000000000000000000000000000000000..fb9c3d8c66673f5c5b69718f59bb09dab16e48a9
GIT binary patch
literal 12558
zcmb_@c{r49`~Qu~Qc@%&rn1#k3fW`IRwRao?37T1?6QrgEZHl`l4z2Qp^y;Svy^R8
z23afF#=eYU#?1V#(ev~^J@5DZzQ^}Cet&crch}t4b=~)Qo}cBsL?I2%aC7b9f*^=n
z_pFvN1hL>Ch*gVY3%GLTkX<VH!Qy3nMgw};v3C;uvdQW6`O^?ol(2RE(q`~G=Z&-G
zUJ$hX9rGVcvpe<*1Rc-P)jEyxx0x9<j1fN*GQTjMwEV%V$a`_0edT5I*WDZocbeZO
zvo}Pqa6A&~&655!{WA4t#Z9}-ti@-&c8p-m=W1h5vyugm>KxH2e0S=Yf6%p{;~_gk
zHXEu7F=WLKh`o9hvX=8ywkDEiwxul^Cz`tMcE#ijJs~kMkqZhn-U)|Jb#m}SPp*b>
zLC6yto1ueyFs#t7I3x=ct%HRiZ7~!S`gA9*JZL_K7<rL_q8*!=!yybrycQJ+nR&Dt
zsy6A&2b!0^1#P{C{<ebJlN<bA^@X&J&BdOc?xkWo#^gwz?{I4jv8%r<c7<lGrha~!
zJ-$aAL&=I{*crZm0aIU(`BB7+UQhTOuNWJ5XAZ`Y^cdK#V%E<|u%)*$^62y$4Fto1
zV#X;?cdAh~oPCtcSvPvqIdgn{aUbRr=H%IZf2^GsfPc^pdZHOY#520p=rKgY5UD#R
z?%3^@=*V^<UX3K*mGsnI-7XkpcyXeEH+^O9R%%R)rt|aX@&(yVv`C_%`qgHxr`=lh
zfwZeDywwq~2TCY;ntH$ece23VsVf@%Cl#06lSL5=)%W{7uVX{jo>JP{1L!l_q?~}^
zn?B@WVsOoxVKL1%LqSd)ZMvLOvo_~gx@)dq=)P@VQHk5}cSZfQ1s4S(`D#W#_l<d*
zt|{E`QbE=5+nX<+hLF47Y{#%}clZODntE0^XZ4u{VkJ|!@ze)Aw#)3TMz+D?Y|2E*
zg>Tn19xAO-o15n@Ahr+3l-lbgQOo4+=^+eh@pWFj49A<qu$Kl+40Bp`$aRB{V_|NF
z-9wz#u08i|NV!!Fs+Hv_qA2Ay`rfZAi-<G?IU~=uEDC!MhCYQ|A65-GM(kBEpw~ow
zF~o+xOP!I!jcqD0=*l(MSGcbFolkH#9HBrDA$je1YFDX*8Y{Z#w%1l{O<fxkZL7)~
zm&zdPPG)@U-<QJoI%EIM)5HikqdZal+tfa#8JAp-`otP?K)XT$S#+S(1G7k`7QDz1
zZtQ8VO>>nCC$4Dwj8=zzi>c1<bpIO27T>il2dCAnyt{L4Xo09DJew(tDnHwcPrube
zvh8oEAMUAUUm8#nPYl;XNUc|C(5Ldq%H9gu-i8x1x;IZ@2NtBYZabaKy(8p`ZJUau
zN^LV)wh>mS{x;S9kb`j6S<)vs*u;9kV2-`pE)_`%$~%uxRO+0)V`vwIeO0_$7`IIC
ziiMZFkmNM^PL7txUtm<1qp8o@V)Y`g+F?(ss1I=lU&MM+ANc2ga6(mKq8(8pZP-vv
z^RIGnuX@ACCiR}Jsa)qzW<@7l3zz9^UMr9n=lwzp#^{|?BrD%Lh*}xONX<(-BG#?Z
zA1l7|RRl~s%2Olt=7a^|a(pq4UZNtnF`t2H__nj_0Y@3+!e&AOdw5Hg>6qV%mUJWK
zAf0e|%YCS5<w<ICXCD+s4OyKRplsTk5!8M?`(`!6f}Y(NK%Ey#`u4s1>i3T@xI~cK
zftT&-%~i=0WRIt4O}-h^bsOL2BaP`FY3HmKvdgNG<<RSh4*w&JSC`g<XlXOmnG8w!
z&mJtr>u*-=d-~b&*w<GFELH<|z`r6TIr+DX-H~<F0bAaWYKHse?vy*EiVARuu2Sz|
zjc3QGD70sH1S1~RD@mftkEs@R!;Zs#)fQK8Y{>j=n0Of*bbRx#s~Z)kGy|DiW7}!V
zQ=Q*oOl5)2T$8}4<VjDREjlO#<>OT}vM)Yyl-vxtX#FZpFT_yn796{v<257OlisSr
z^K{s1on^9^H4Oi2&_<c--U+XgZ8Y)mP%YtsZnT;5;`X@ESZd)fq(F%?Il!!QB0ktV
z;!r;9pC#~e!Nr6QM6ONnausEK&cv2ROeB)aY!l+^LMqYCibF3#Y#Hl>z}yk&IwyvA
ziibc;AO@34yA5&Fx}`IPQVVwLOMZDg#?5*Y3sONfx50X>!<;wqi}6YE9c4VjX=aN(
z3^~~{uwU5>yN*7?|02^gVdzc*OQC$2v*hFBRpdn9?yL~{gteU51*sA8^tMAO{Hb5G
zJ)2(3iTjq0XY_MkIpJH3=o`9vd!cS7Gh$@(TsHT4)vVadSs~<xH_%;8tmFMOBl+Yl
zGao9{FnN5zO1C-U6J|I}R{JDHzd7hK$|VizBuX<DBE$4(ZnLCY<fjRw@6Q+_i#6=f
zL9htPQ=({{AMG#u_W5Y?cNCtagu&v58#Lqi9<NvRxRl=PBioh5aVOOb2fC65j#tlY
z%OBhV?bnb`w39UYEamT~0owsb`##<FctKq3`6}j<T<Q(R158W!8O9^6g1jAYD42tw
z{~ft`|DIj&gg8SljbR~No4SN(UUxM+Bju(Be+L$_Qv~-@LQyu&fn<qbCJU}>R53H;
zC0WJSmw$_RfSTcaVDCsDKGoN%<#Rz2RfPSM;)lwYFKum5Ik_~*G!oga6{(lmAad-8
zs^%!`$2}?|GWD$y3rn}jrZov?+5_jC3R&cS20Te|H+zI0XOjsfB;mnl;&%zM2wQ0w
z^4mnZnv>3E@S5uvZuogf8rMDti~p|}%J&f+ilbMLubF!ypi}Y4xNHVT(r6H5CmrVe
z>~r(Qwr7x?PMEVeNQb2ZC@~NpDFT>1y21Cp6Bn*|!XUeo8WPW(jC*<rqc;N(klh|I
z))56AKc*qin`y*STM4QfK=3hbtPTid=H-VLskbb%*lMqH5H^`j@jzpmf6Ipb2RNbD
zeJBm^m4~OXVSoS}xsBumvzl$e@WRDVIfTY@O9cOJ;Z236VS3mw<fMtrs=YmQ_zX5o
zkAwek8Cx%_h6G4LJE1VWJ4lvVS&pQS-!vVn&(?`Vu;hzicvXJ5Jkq{VfQ#v$q(Oy}
zVR{pH3tW$9u@-WJkMo%Ca&V~s)W6NVAJh=8S@<@)QH~@eC+6}C1Y`+DwSWbJq~rx#
zE8M0b;f?K)ybF~^{95s!*MDEn4ou4-@1g;}YOEV=MVn+lTzm{C9KfIw+MPP9`(9Az
zrpBvRkZK{uRbz2}BlNPF(ym^&;m1;)E526HyB+ZT8c7#CvGu*)sdhe^mo-=BGj8TL
zQ%Wn=;s=KnOSdPL;dSE7Sl;af0|^eZi3A7J_TwyDFMi}G%ay=%;ps}3=KGSAUI#x+
z*u#&r;LB-{p@zZBxKHh7?n8M^D9Ps0{HV4Mv2?H+`?6B_6p?nmm*_g4Od4q=wuu(7
zbvGR1uNJk}G?7b&lCGu)YZA2Z{ag0MfL-I#gRlk$9k^B{{h@s9+xIWgm6Y<hhtD;}
z>T|Nj+e`N<X2fe!mG6y7kIGXtN1G<54dZ6i8G0QVvnKAmaJ%Eocjrmb7#&X25)l|O
zK#0IqO{KNy+g=zB=jU_^z>D!=2cz|edjY0(awLH#Imu%px7GMt)Pc{cS)Z72SAALz
zeiPg0zV^jVepoPnMhN#+_%`Hw0Hx8tJt?ZQ#7_t>5b|)B9KH(Ybit$TJ95$^E#*s3
zTm0L1SY+-wpCMnh?igabsxLzw^C_WfT!pgqW@ino@G>)=Mm0yJzm%JwUk_&&dDbxf
z{<?c+PgVZ7O__Xq@}c$CfTMiR8@Ayb9ko{$A9G(^4We2o=)V|{Kv3NkmW?F~_lN0S
z?Z@oN35+U0Qx#&<WmpgEfKW@iOFwc*jj!Jso0ckmkM%xtV||HahsXheqorzDte{B#
zBNP5ZT(O2aFvEjTu-3ots8x9VOzTT_CC(-G*VL+}kA(f=_J?O$_T0YMrF6MHxN$X+
zEmjNM*d!qXK{R>DlT^kPSd6G~eTkeLR+V45ZJ6h7qgE_x!efv{6C0rQ#kmC0_XVf7
zMH0q`dWS11uPgeMb@uo?(PrL*hoNr7F2+efzDjftjNwDSRryjTwOUpa^g#KW;n(F6
z;^dY6L3si5)`IFHjRlD1cp21_vg5ZKf;L`aYscP!SnU`mtFa%jllYehhqly-jx<eJ
z880>~Mntr<FMb*+ZT4#xl@`Ihe<l-^d(c4M*YAjkxkk9q#(oJwk~=3eo^|OWe6D?L
zsNFjp7b98|btlSH)t9pH5vi<V_83WuQyZw$%$Al3A$yQ~oijtr^RGIgDZx3%j`G4|
zH#T7tqBHtK!=za8Y~{ozO|_hH)8)slaeNUtzw6ZWfP6EhmAh|JTd(DsN2QB=4v9Z8
z<Af?1TPn$Tv)kj4U~?=p{ws|zxKuv$uIvGkpsgGPX~*ZOj9?Kp&D0xBpB<i(mRrks
zsVf4Nw!-<-y~N={I@!^2Gbc0X7j?p0biN%Ceb@2&RoT<II9>RWN%B6<Bu<xIA1zh`
zXdYXov)T`ml|Ky`Cm;05uc*;n9NyK-hT-k=#kT1xDxSL=*^)V$(sKtP(2_C#w4mWF
zzST;w9$&UNCv($yP-X>Lj>kr5=~2@5FZnF4E@obxZg4U#7s5~!9VEkLn6JTDs!UDO
z;TR)qKv2^7w75!g%)nIXI^UBJYxlP*EM-!|tL60ReASn`Bir5P;??wJQ7d6{>YC0C
z#TgwnjXS=LU(j2WgLn3pe4VRtPHlY{#$~?~j&Y6T;{AZ+c0gnaD`vH%cunuY)SEGL
z>5^@L>BG0)sf3P|=R6<M?N!I*$An?bs>;E?(i3rMtK2s7my3+?q*}LMrF;kGXNcco
z`Ohe!auqubySm+cViy$8toK*3=^dAIp+a?l7k7}8q=f*}UF@O!{{}KiJK?+6Hx-6}
zVX??VZkP*>rciejk`r9_nM^3avY9DrNT3X`vT}#WWu`&FBDMF#P#TSq(dTYKrnkU2
z7(8%91z=zNUI0}GP~}O7x_qUnEN0;SdVfU9yU-R0-p~{Ps_lE=Q16a^!qi`T14#Qf
z1Z?3*vJC!SQ4tW7*2@DmCxCf&-~cYK8yyQJfcYiD^p4(Z(C4b{W7hlMzPcR-chlst
z69x#l-_~-t`nD>SwU+}d=6#PsiV;ii7VvQuxgf+J>iX{wV+WIxE*1Y!hs?HuZEIiw
zRM+m_0msOKNtm1X6PiVcC7j}+FZTZj$o^HRJX@@ekeg`kc`(LG__!{~B4|L>7FE_&
z?PQBmT%YmFm>3_ZV1yK(Pax0R1h##sBA!PFxevSWRLwj@><$HQ1ytW%dvQvlMt8ep
z%4Uc2+|;Q6^9<fvN8*NjTUFHs@mr+t7}C-e=Tb5WE;}UwnE?qY?Uk7?UF;meY4+xp
z&YSZ`IkQ7nnmKRxyllYC6a}I7!f8qz1gg&yn~66mcHx~y%|rRON4}3F0Jw@15ku7~
zZA|>b2^HX4pDaMg?f0cVtypw}a><I9^2#3Db|)OmlMAfeZpN2`T3xJ1rXJkv(OG;T
zQ2Ap-Zd6KOetZ%BTC-g8x>c<)2mkTyKOq+RI6d7Y*(0UW+{o{qHN&6eC4BUJcw4yP
z8T=zxW#5w`4>Rz0>hI>R`X@8eZsgXc&Xgl3za$06b(Q+VLI-~W-_|6w3$Krrzbefe
zJ8f3JV@>Y0Xvm#qd}?dR?5f@FANWFICSk=2Ydiu(M-%e}!E+F(_9JJ*rK0ucfMA5D
z8LdUMVQ&c~3J8#0Yf=Pq6s{A?4RMd!{i9m%gmI<p+Ndu2u`jDy{j2ATpQYTKHBoyM
zZNEEGFX3}TTeYL_K*%NRQ*)CY2hKIO+R$TG^2Ub(#^Q2TdM>#*ncPB7;zxb}=ycq8
zhW`mVC8)CDmmN*u`zG(E^iIrpydT)s20JEmcu8~A{bEId6Qg~LP0J?0a5-I7Q6t{R
z7D(>H5gu|ncJ0jP!22mvBHQV*CAW!OqPX!XUgiT1T&$kHOMTi{>V$$knS=hs#ow~y
zcWU`7PJavxb362~d9M>XBRy?zkGss)Ix{gwLW(Pi`)<vZ`{i|)U+?;yj!~h#37`<o
zN$ou_U$WZjYl_ayXC_#_qq(Ek-uE-E`2cPDWP=-So!87pSL0r$L61$6i5|nzM7~d$
zwb>D3T~8EpGPJ}))@bqaGqG;<>bxdwb3p$L`^OD3wQH_)udihw<51afzQH}qkEP}Y
z?-w*l>rX5Euf0Pds!#IR;@b*iyENW7KSH;42tCfyxH9rgj4vGbcIF*%DPU}Qjg7Qq
zNw__iVPaSlls5<q=RSpC)*WNta5y^s`Q;z@yWfStJ2kE|`a?PJW&F8>#DMbxr^>7m
zL*%6b3q?IiElIr@d!HzLgRXXK!u_a}zF~FtQ?QMDG=;U~i;A{+Rw5@0v8^FQIjo9t
zGKKeR24)da_9@e${2<PwFV$3R=c{VuWUvB~vY4sf5su?dQB_EBV0jN1Sr{DnN}HQ=
zGjliyH_DMEa@dtOzB+_0E$HoXa67?`S;n|c{L&k|oLf7viwm;*Wf76ZIjf%gLP0qP
zTuSzjiIDyE>GRe~-g}A7?=&1(KQ}Z4w+G!rawl^oQJn+iG^49WovJqr1|L37@6L>V
zMG2;nIZlDf83yOarKx`FOLW`8jkbLUdzbm8Yp0P+5k?Q+wvNnp(w<cw(ID7VZ(Xh9
zqQ~Q?e#VlfzUalg$rYNEqem?e?M!U@T)Y5Omp3y+!gJr8d#1&8mU-|0NxuAwvA>Ix
zU%@FcPIo(KL&3hYoH|wxtCjpK=&Y%DTOHj3?t^9p?$;D&*D;h~Gy{gghgc6Hspw@q
zW#O$K9e$GTG)}^!O{x~mmru4L)ThAzR|$(yDfq4>MtQ)XYR7eI0+EVvF3Zjc^z^g|
zMo+k~@iAY4GfN0|86WwUpSH_8)auDzejJ{TteSFl*W?!w*z72!=qqO`vWKK3c&0HY
zBtQOq^%xANNN+pYeL5zAWj7P8P4xUsmT$<Iqrdew+$t?`RNmjrLx{KR^xOU1^{Hb|
z=h87T+yc?ww}UA8fQL|!r%2>@Bh>y3Lorudaay@a8ku994bP2B2&4&1o6(nC&ZmnP
z@aThl--&x*jcI}9O#1uFiL1pdY7)?g1B%<#dvx-+@7=sUbgt4}C>T?LkuLe7bY2+e
zrIr!>bqa9-&!d^GaYcGGwKcYG6wzqIx;LnNX9^3mG8`I&xOq&z4;kBFm-WxJ-|ccT
zQFYUv^S0?9>Kmz#BkXmlC$u%}MQ>5~V+c8kObONJ$2sm5sS8lZZeG^p*EzgaQPMST
zQM*CW_00F7>O6=}?t9h5w%YU6l$O8tPr;W^G#x@riywZ_<ZpY}w{J_qi-|86miJJ6
z+GFATGIpHITA1A?jGI*&@|rGVrH%X9^vC->zYIp}r5NQlk9j>+l-y=Q_Oup03aYYM
z;F@6-Ebs$<OP<%Y9cIwalDsdvg1<_=TJ^1S=17g=Qsu1wQlAK1I60t64vk$mH*IA&
zW`@)Zxe$XFs4!iIBAJffa&`j(K+L1pUc?(5&(pO^do*jhJfmxvm+9AevN?VVEluG3
z64b_tNG~}dwSExQo-82AVM5jBM8D<knrU!QZ>)-^*Lb{d+vf7=T<BK1U+uz%tl~d@
zuR+3cA5+TkACGvH#CK?#`I(^Ok3REY5y6<Nkt!3OxmYuPmns`pH0)4M>pd5$%ow)~
zWVBZ#i~X?y?i*75uWa}){BB@TBR6S3Waj{=&1ub1?5LBZjS@ek2Xs<2N0QCE+2dvT
zP-r$Yg?_8~EgUBPkG4W)Vt~=;V0V>q$;%yvrho_nEURL<`C=DKzA)f!QmE8al=oqB
zM+l_E3+Uh~(nEJgtsWphi<&;hkC`^h*Hw`I2Q-o_Q#D-2U%^6?0E1%ZHYx6g*`8--
za>$7%0Cl*3(V}1diho%$diu1YqqaNQL(6yKik62@6zT7T+QN}>&%3+qH+w-TTQPfp
z^;nzEL14B(#<Z}KPfQQh03JBN4hcpg&ua}E-+nv8TKfYG7~2vaq%8uCoyO{n00Se1
z@1Ngoy6nIOrSM~TU3w@Zd6UrJT+bP-=4QwY0iM*~IxN1+7}=P*?u<+cG8+`%ujhz5
zvTZBmQj&HKos&?o`pyzEV?NuT-*A=3s3_Ou|8%p0q0p?74CEoW=@H(oP~I!tIW%)=
z-A;U&M&&gn->0Ua8$qQD4qVclthJqeI@o1v|5RWU$yn%OJr7?<nXy`73mx%U#yEFx
zth7)suY8#uGL!l>-9K7Dz$Nu1MNLh$5|5O?pc@Z>eOgSsk05RiHL*B@UFOwgT3B%a
z?tiwDUi*Ya_kRRdtcV|WdPen4@i8c006eo(ovX3Gb(&m7FrN-zurd)SyFi7Y=Ias|
zTv0a+%KsDqR$?Z>Tuz@+Wb|3qTFQot`)h_18WJl3q>1%JBH_$%9-3}LA{40ShM=jW
z3BmkE_A<0Z6@>r{SQ4I$z%kxt)>sDb5Mi?u4b#g<peR>N-Ca@>t&}2Sm9OcH2zY*<
zrVnMJY^##hO*P`scNnKnffmSql-O&j^T44E%QtjXxjfl?;iDA3-XO&*^2+Q&@eoya
z$^8XmP>Sx(xi10P{)|s@PAdn!;nGqGhIwb^sw`>Ma))J$UpqS9=P*`5!P7`7?yGpR
zlb3TKZIzpvmRm%ix@6=vMX%(J(8kZ4p5@jZ?k%}d+B?fr7MRv!T60m!X5PlPa?UX#
zeSrPz-3^b_#~_XL0oh)=?4ct5Ey{PCvj(^ddp^fGh?d!xhnD-NHn(3#X1=fDs}3o!
znMnKC>)N?cH5b^^OQIK4jz15nSzl$-C>aSZV^n=d%R!M^SjVS^L6nB8Yf@G|pI#^Q
zCtg!T4RVA7f5<kXtC>6fCf5EPpZAFj^>0)>57{roeXjSheY3ZI<z2!$dCwkR+yK=S
z&u!bxaPPX#c4G%{iz#6<?O5+410QaHUQATi<M|6xOUfGA!+tx`CP;qiwYQbTS4i<9
zw2r1QOiPu!NW-d+OBmNdR!mxy`k_D!m%+2!8ly#0pOj3!!r=mYT(4j$O{Ub_ML8Kp
zqeFh*eV_-oft8!-JtCB(YBVbhuX0aCPLdx6!%B8y`s96A-Nzg+UOM%urkIy5JUK#a
z26wYLyb9Y*RSkUUCg){sosmOkySpDH*C}P~vxfcl_=aCZOS(60oGOL(<K2Ej>f1ex
zu{Uyk;qzRT^3Z2tc((iW1n<DbvI}w|0>@huVi3MnYW~Mmhy0udEav9!U7m~bC9R&Q
zf`xKmSf6_W?Q&UXvwl31CF`-Nz_Idac2IGCZ>avOK>aHl(n2j&#wq`@h?CpPnQagV
z%G!y$X8^O6Nn{Nb0v|yNw8bFfn0BWP@PSF%Ty9ekv;?YPfMlcd7wEVuaD|!m30TNc
zpb4@u3MA6soaJ*b^cNPNs+^x;gJN~ClC>7-zt^fbKnip>yx{+lOd*9ZDxkxgR?t*D
zv@f&-fD@3%1<`ddVKy`6pDMOogsEcxfeSz>FKKhl9^Ym+vmuuIkK79U*@X+02aAsk
za=rbhN{-~=2d*|#I{)tJ0#6teiyId&{pCc11`gAS1~3EJ(SB(VjAoU>ADck)1dxE=
z01rHbzlnYh69Y`lX!Vk|&s5nl9E_R~Y&7_hI$YqU9<xGl8${b8$R&})g+!vfd!;bB
z#<eWF$(K5NGODy}gjJB~KI78wYw|ZeZ{3t9%q#pVlH6vm)?G$u_nW3y7x`c-gB6?`
zxCH;JJ}wUG!XgQ2N)qv3q)_Fq(5nsM2|B;aePPFr;VzWTFuS9Jknx;*y{WruO+L)l
z)M>?Eq)^fzcb+6Dj7uxugw-0E7RE^i3@Je7Kc%#$kEf@pb<?FqN9{pvU)l%(@A~=#
zzpQ||h?;xp=$i%ay?ywo6MlyZI$>}{9VfK&b@JLp&lT^2fJ7t<Xix$B`?CO?(JfAV
zGw(~8M1Cpq+`s5_HJIY47FUf-4VKh0x<YAk)Y%N;2ar<(G&arrE|=l1)FGjy?ItI(
z7P-@mK4=m`S^=e6YqE32BR3BVZYt#a?_yU(CtS}Ow^TY+WP@@aDx#7(lR~D|dO9<k
z<5p>*{2Q7A2KW2W(eC{H*vW}~5{_pa1F4m>4r=6z7uTxwzu9)Xq#l=WL;~9JDtYeu
zoBHwoo>!NgN2S-kpo=ldvVSlML;rSy(%`uuT7TK4AF(^lWSF5Aw(O)knc8crNoW&~
z+I5#{+Y&M=kE#BszFIT`LUZpw<MA&d^^dsvvz>wqX&>Hl?HhcTo2{=}t!@h9$>5xP
z#LMmbg)FaK>=vwi+O*SU_Ha|?UORE-jRTg~jS5}`VJl5~AJNuay~6bvL%Bt;AdBE7
zVk!w6aAVI5?AvUQo7Kn?`{c+K^?Y@56Mc-3Lm2Fk`GjRVx^a(Ha+HdoE;i!+<Dh=a
z^woaChibLD8ro=98z-7I2X@g=YU?+qRIQ(%JQza5_{CyatHOoEL3aqeL>u3+uZ~A7
zPL9Y*F}~jP)m~8GSP@jz8NYuYQ7v-<<@PXHv`np9b>+q+Qd=@kS6|x$SM=6?@;xuS
zEtHuKFURDf&XUEm4Jf(iZcA<%TXnNqUOlg+|GKZ}b3$Z9OJ^N14Cg-mZM!JkCu-qs
zLLR{UO>GX^s?^VOs=?RpAuk<aZekJmn^FR}w5rqJwWS1!%4)!=wQ@^8j;gZnAMdhn
ztS^deXty#r*RJ<tI%UP{*)>EKPCm1M)KGHgT%FQS8zhd)q&<B#>)`0@SKxK}%E+~^
z&rMATwS>uKNb|kOv8_((EvxxT>$7ucHf2PRY82%TpJf)TBt<w%fy-$@(D!*#6@Re1
zzVRj98g^Z*zFAgicYV)Pg5?b%SDkYFy_JU*TDkTFn#g^|^IB0*&q_5N3@XaaZ=FQZ
zk2F{6td}EK!UTdPhJtOz>UV@xC!rHQBogC`B3puW<i(9Y^=wNmNNi4KXxU4tC$_Y6
z5NZy|9g1Z(<C0X$XN2H^Yf?X&j^E=t&{=Nv!=`LB6CzCo^b<JWsI4{ONls3K9wkcG
zeFOcbFWtwyk_sXV8H;6*yy-_HI1rh}_cM*6nqF>3GfY~oO2tuvz~=z2&fT*S&IhSN
zgKvaPn$qoiIQW~G%9M-xsrc1Ec5A+GsbcWivAz8=1v0~{Kl^)yH457-Q!c&1S5puL
zn|%LWa&P<3C;=pc1LKs}dyO3E#`I4G;l2CZ=1>wyK5c*(2|dM6m7shewSET~U<((0
zl?o++$sEG;JhncTEoLn=*szOpH%M-61rP<E8cC_Te-hmdCs-Y2#k;AHsUy~rUxa&r
z8F%9cXd>>!w7k&AlzM&P*-#d@BXH(Z2?fvD02620#VoZE{{~b4qh$pUW`M}oLm-TN
zZUA}(NDt5zeXL&nJt2T4UlgdB{V3-saYtjQn_2IFHd6oG7jS<)gabC(o!i&?C@UfZ
zUj%A(fXvaXF0G5@s#O3V-$h0PpuP?o4gYu;p!J$`h^Y@)YAwJxUX4Zo)ukZYfM3p(
z6Mq5Z1hU}#K9=j;|GdFJ0Wj&p*yVD?S+pf>wd~kQLtM}Ik)gGx71=9lfV6ybuUXPU
zjCa$>k6Z&PBguXC2B2X`840A?1Wve?trtPd8`U@GE3$Fn&aG$h<vt7>pQSHM%<G#`
zL6J%=hZgGm6>gjkB92$yY+lc|i8;>V$pj>yRO%I<R1-P<+Is#I^{&pk2T8>U1HnpP
ziS4clqgkLo*nAp0RKP~kXl~qeI5u8o#ZhFh01SN+z}2)M=1*r;3X%26g|E62YcN>a
zFF;80V>??_!)aMHv;Hb1$o%n_5ue&LrEK6JN3>`ix)YPZ|E2X01^x341NJ_#!3L@s
z<v+$*A8KGjJ$^!LB=N_O{EFCjKiZ=!Vx}q0d71rJufeZK2dM-MU2iQKnJiom(%BWE
z-`M<iy(jG4=8o(5a6SCXX_sfEjZ|nueVZ8AV%IGbu_N{UlR26W%`M^YGclxj&1dKi
zs}-+i_Tqi$2opwr>9|JHo&=%4tZ5p?+3_^|q|ucCCzJ}RGqy$XiVlBUO68k3?$pLg
zrIJe*@WIA|*PG5+>4>9hpZ%;Zm%V4Ko0h^eB^ukj3W#4&dyAD&0qK&CEAqu7D_b@B
z+i|ycn5)>VEZV-dRU>!Hxt}bl*>0(t2XX=}D#f6M%Kxv>dGt&2p<Qx$#w@y#4GlW(
z37TV$c69$J^Hdld{q|F^8fdQ0gXSurdVg=OK9XT|VG@A<-_6wxpYE;blaYdW^#{~F
zCvCmhO*f7xC>vp~hptN`wsG&y%1#;EMwo0Se7=asxmVK*-_F(L5EPv=SD0Wqi>9`o
z8KN8Jy&Y1AHn^chC=5<pGVvj7n#iv}B~VRKnRmCh`@t^qRD=4$o*$PObzeYCq-bTq
zT3$!3yWb5FYO~=Z`In6r_V-Z@%V~~2(F3<i+dVbnVYqPta7se>Ib~t==4yargu}Dl
z^(Ou6z<`_B%YQ&vN+k6lYS0yCn%N_lgNI==hjF4o<op22sO1d(;B^S7S%5aL4x`pa
zPVkGNBX;4j#4iuH;<?(sc==cbq<6VgKov8Th3ZT+p~46_vPRCZymLX425^gz2l@?N
z^c7`@vVmB#k|;;gyxqf*aJ@)v>y-<crwR8ex{@LCwj@S*68%W4wo%;Yj@Nsl?vldw
z=8FILl+0N6kVd)I4iwcL+4}Q5!lA8Ua3urUNo{OIYdG%l>5}FWIh+EL?gctnKhHwQ
zx??Lw#4|2f`sySlBy-+dQ%+ZFOlD(Q-r!P6oLc0qJIBK2>M<iogy?QKUy7vUtjkzT
znDZMHcHrXYM?%KSM-fX$YbPxKSSX{T9uVfHYR*7=nDr_bNf_Yl$?(2?b(Ok@E=X^C
z9)Bk~irXZ>aV!$9cGwdyB!F94w65hbo%cfx)+EXny`m=Co-dn2$i%Rff_e+EEhQrk
zAqRi55hD7H)(0evPi@?L<G{%8BI181ZE$6>pXS1+Ga^G4=nphV;SXjx2SGR8ho;Nw
z1-PE73kW_itFUZZxp=cs%lI;<M3v5ye*9qYA63k^Q33&TVO(=CdMKaN({QL-)7^Qe
z#W9_QkstM?KbgJW<jZJLY00T$dmov7EbTrb^<x#&=W&?QQUCgU*R)Ci-9by<Cb+G`
z-1=xqUwL#~xli-Uet)fd7rZAbilw1z8xc9pWkOdv-~8^;{z>x(FdW^o^O5UHxq^l3
zoi_U=oA1G(S@l#1`Sz#}pBCDZICLS`^=FGlZ*t33e=INg;i5*ilZA7{Gxa<$cR<ck
z-%7WrfLs2U8Q)7s$+0(Qo02I5<0c9=AI=329f4POIjI*MK-D5QCO@(R_f?5htQenh
zFT5zqw%^KPfZ=si07iDW^OiKS;+dIxx}0WMvtAf79r@mh?nOnQpNM)*@(4yVN#cW>
zngo&Nz<8SJ6UKUnOaDR#Du3X*Zof>H9<uo9yl1BSnLAyvM<{JuPXSy7eRutTw_)Ec
zqh0WA8LxK691~M<QxLSezv;<FE&$e7vu>K{ecL>)rr=w`H~e*JawUHi_v642T4l_b
zvac0__3>R2=dr=?;rYDHWtcgggKw^<JihjY+$#ry39Rt{7)*80&(k2kE6bk>Km>5+
zo0zVa9Z;d{hF9s?C41^fIornZrk$8iQ}1Tbtz3{2I3D#oPJ{L@|IipK)O}|I=o<%x
zqf_}qeE?kpl*pPga+nBp1CgG@hilV^S0n{GA)vjW|BVX5z7glJlK{MD4Wp9Vks$|I
z(E9(41u;*1|HGV+cuwzqSa64}c7TImMsZIwd(HukX<&6OxDbnODQ~!`O#N*T=FB`m
z?sWjghs=9m3l4hE0(U_ZEBVwtw{Fmv#m*B9@Vc#0{d7CDv=5a9TH;V!6f*Aj@7fp1
zZid>Tkx?Z-JNYR*zYb&ic7c!oJe;XYL8dm^x#02l!FkbUR|z@z?ugByB^K@3HO&6~
zx1&%#NccZbw3nuVp0KTH50KTLyVRlDP76cqF8;&2qkxNPPRK?umo`-lJd=T8iv^Mo
zq@>=zD!Vy(6U*1Du3{*PbY&YB`YQNBoO$Y?jd|*zc0q;m*O>#eY=RYq4a(<ZP6rOT
zLQI4BubIInA?-)vsDQ_6)d#jiDRs}};3UQKM=orFQa-&-rgx<U<lBMkA3ZUzre<VD
zSfT0LOv^~Y73&=<omUK23vGJNopjmBAjotxlv2N(Oka&wf$TJ5&^nF!TcN^)Q4JrU
z_;KK<!EVToXKO^ukZUq{#CAN15%4lu?cxUBd*H6u?jz;*e}5$k*<Jo@1D0!d8Q9+c
h@#O!l$0!Eu=$bDV!7J|?_!|aDSKC1ArH0+D{|A>SNk0Gp

literal 0
HcmV?d00001

diff --git "a/base/security/permission/figures/\345\205\250\345\261\200\347\255\226\347\225\2452.png" "b/base/security/permission/figures/\345\205\250\345\261\200\347\255\226\347\225\2452.png"
new file mode 100755
index 0000000000000000000000000000000000000000..c40fd5e3f15cbd316c43dce31020740396c57d3f
GIT binary patch
literal 9833
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
N7G^f4)h4$e{tw*UteOA-

literal 0
HcmV?d00001

diff --git "a/base/security/permission/figures/\347\255\226\347\225\245\347\261\273\345\236\2132.png" "b/base/security/permission/figures/\347\255\226\347\225\245\347\261\273\345\236\2132.png"
new file mode 100755
index 0000000000000000000000000000000000000000..1ad38251b4d9abba2076bfc2df91fa14c81ac07d
GIT binary patch
literal 7247
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
C-3@R6

literal 0
HcmV?d00001

diff --git a/base/security/permission/interfaces/innerkits/permission_lite/ipc_auth_interface.h b/base/security/permission/interfaces/innerkits/permission_lite/ipc_auth_interface.h
new file mode 100755
index 00000000..a8c9152f
--- /dev/null
+++ b/base/security/permission/interfaces/innerkits/permission_lite/ipc_auth_interface.h
@@ -0,0 +1,40 @@
+/*
+ * Copyright (c) 2020 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef OHOS_IPC_AUTH_INTERFACE_H
+#define OHOS_IPC_AUTH_INTERFACE_H
+
+#include "iunknown.h"
+#include "pms_common.h"
+#include "policy_define.h"
+
+#ifdef __cplusplus
+#if __cplusplus
+extern "C" {
+#endif
+#endif
+
+typedef struct {
+    INHERIT_IUNKNOWN;
+    int (*GetCommunicationStrategy)(RegParams params, PolicyTrans **policies, unsigned int *policyNum);
+    int (*IsCommunicationAllowed)(AuthParams params);
+} IpcAuthInterface;
+
+#ifdef __cplusplus
+#if __cplusplus
+}
+#endif
+#endif
+#endif // OHOS_IPC_AUTH_INTERFACE_H
\ No newline at end of file
diff --git a/base/security/permission/interfaces/innerkits/permission_lite/pms_interface_inner.h b/base/security/permission/interfaces/innerkits/permission_lite/pms_interface_inner.h
new file mode 100644
index 00000000..c4f2abfa
--- /dev/null
+++ b/base/security/permission/interfaces/innerkits/permission_lite/pms_interface_inner.h
@@ -0,0 +1,41 @@
+/*
+ * Copyright (c) 2021 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef OHOS_PMS_INTERFACE_INNER_H
+#define OHOS_PMS_INTERFACE_INNER_H
+
+#ifdef __cplusplus
+#if __cplusplus
+extern "C" {
+#endif
+#endif
+
+/*
+ * Request the unique device ID of the device(UDID).
+ * This function is applicable to the process with uid less than 1000, which is used when requesting a UDID.
+ *
+ * udid: It is used to store the UDID finally obtained. Its size must be greater than 65, including '\0'.
+ * size: The size of array to store UDID. It must be 65.
+ * Returns 0 if the UDID is successfully obtained, other returns an error code.
+ */
+int RequestDevUdid(unsigned char *udid, int size);
+
+#ifdef __cplusplus
+#if __cplusplus
+}
+#endif
+#endif
+#endif // OHOS_PMS_INTERFACE_INNER_H
+
diff --git a/base/security/permission/interfaces/kits/permission_lite/BUILD.gn b/base/security/permission/interfaces/kits/permission_lite/BUILD.gn
new file mode 100644
index 00000000..27829b4c
--- /dev/null
+++ b/base/security/permission/interfaces/kits/permission_lite/BUILD.gn
@@ -0,0 +1,22 @@
+# Copyright (c) 2020 Huawei Device Co., Ltd.
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+import("//build/lite/ndk/ndk.gni")
+
+ndk_lib("permission_notes") {
+  lib_extension = ".so"
+  deps = [
+    "//base/security/permission/services/permission_lite/pms_client:pms_client",
+  ]
+  head_files = [ "//base/security/permission/interfaces/kits/permission_lite" ]
+}
diff --git a/base/security/permission/interfaces/kits/permission_lite/pms_interface.h b/base/security/permission/interfaces/kits/permission_lite/pms_interface.h
new file mode 100644
index 00000000..60f482a7
--- /dev/null
+++ b/base/security/permission/interfaces/kits/permission_lite/pms_interface.h
@@ -0,0 +1,160 @@
+/*
+ * Copyright (c) 2020~2021 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+/**
+ * @addtogroup PMS
+ * @{
+ *
+ * @brief Manages permissions.
+ *
+ * This module provides interfaces for managing permissions of third-party applications.
+ *
+ * @since 1.0
+ * @version 1.0
+ */
+
+/**
+ * @file pms_interface.h
+ *
+ * @brief Declares interfaces for managing permissions.
+ *
+ * The interfaces can be used to authenticate native APIs, query, grant, and revoke permissions,
+ * and grant runtime permissions.
+ *
+ *
+ * @since 1.0
+ * @version 1.0
+ */
+
+#ifndef OHOS_PERMISSIONMANAGESERVICE_INTERFACE_H
+#define OHOS_PERMISSIONMANAGESERVICE_INTERFACE_H
+
+#include "pms_types.h"
+
+#ifdef __cplusplus
+#if __cplusplus
+extern "C" {
+#endif
+#endif /* __cplusplus */
+
+/**
+ * @brief Checks whether the caller (generally a third-party application) has a specified permission
+ * of a system service API.
+ *
+ * @param uid Indicates the UID of the caller. The range is [0, INT_MAX].
+ * @param permissionName Indicates the pointer to the permission name.
+ * @return Returns <b>1</b> if the application has the given permission; returns <b>0</b> otherwise.
+ *
+ * @since 1.0
+ * @version 1.0
+ */
+int CheckPermission(int uid, const char *permissionName);
+
+/**
+ * @brief Checks whether the caller (generally a third-party application) has a specified permission
+ * of a system service API.
+ *
+ * @param permissionName Indicates the pointer to the permission name.
+ * @return Returns <b>1</b> if the caller has the permission; returns <b>0</b> otherwise.
+ *
+ * @since 2.0
+ * @version 1.0
+ */
+int CheckSelfPermission(const char *permissionName);
+
+/**
+ * @brief Queries all permissions requested by the application and checks whether these permissions are granted.
+ *
+ * @param identifier Indicates the pointer to the application bundle name.
+ * @param permissions Indicates the double pointer to the array of permissions. You need to pass the
+ * {@link PermissionSaved} pointer and release it after finishing using it.
+ * @param permNum Indicates the pointer to the number of permissions in the array, which is an integer.
+ * @return Returns <b>0</b> if the operation is successful; returns an error code defined in
+ * {@link PmsErrorCode} otherwise.
+ *
+ * @since 1.0
+ * @version 1.0
+ *
+ */
+int QueryPermission(const char *identifier, PermissionSaved **permissions, int *permNum);
+
+/**
+ * @brief Grants a specified permission to the application.
+ *
+ * @param identifier Indicates the pointer to the application bundle name.
+ * @param permName Indicates the pointer to the permission name.
+ * @return Returns <b>0</b> if the permission is successfully granted; returns an error code defined in
+ * {@link PmsErrorCode} otherwise.
+ *
+ * @since 1.0
+ * @version 1.0
+ *
+ */
+int GrantPermission(const char *identifier, const char *permName);
+
+/**
+ * @brief Revokes a specified permission from the application.
+ *
+ * @param identifier Indicates the pointer to the application bundle name.
+ * @param permName Indicates the pointer to the permission name.
+ * @return Returns <b>0</b> if the permission is successfully revoked; returns an error code defined in
+ * {@link PmsErrorCode} otherwise.
+ *
+ * @since 1.0
+ * @version 1.0
+ *
+ */
+int RevokePermission(const char *identifier, const char *permName);
+
+/**
+ * @brief Grants a specified runtime permission to an application.
+ *
+ * This function applies to sensitive permissions that can be granted to the application only when the
+ * application is running.
+ *
+ * @param uid Indicates the user ID of the application. The range is [0, INT_MAX].
+ * @param permissionName Indicates the pointer to the permission name.
+ * @return Returns <b>0</b> if the permission is successfully granted; returns an error code defined in
+ * {@link PmsErrorCode} otherwise.
+ *
+ * @since 1.0
+ * @version 1.0
+ *
+ */
+int GrantRuntimePermission(int uid, const char *permissionName);
+
+/**
+ * @brief Revokes a specified runtime permission from an application.
+ *
+ * This function applies to sensitive permissions that can be revoked from the application only when the
+ * application is running.
+ *
+ * @param uid Indicates the user ID of the application. The range is [0, INT_MAX].
+ * @param permissionName Indicates the pointer to the permission name.
+ * @return Returns <b>0</b> if the permission is successfully granted; returns an error code defined in
+ * {@link PmsErrorCode} otherwise.
+ *
+ * @since 2.0
+ * @version 1.0
+ *
+ */
+int RevokeRuntimePermission(int uid, const char *permissionName);
+
+#ifdef __cplusplus
+#if __cplusplus
+}
+#endif
+#endif
+#endif // OHOS_PERMISSIONMANAGESERVICE_INTERFACE_H
\ No newline at end of file
diff --git a/base/security/permission/interfaces/kits/permission_lite/pms_types.h b/base/security/permission/interfaces/kits/permission_lite/pms_types.h
new file mode 100755
index 00000000..396a0167
--- /dev/null
+++ b/base/security/permission/interfaces/kits/permission_lite/pms_types.h
@@ -0,0 +1,143 @@
+/*
+ * Copyright (c) 2020~2021 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+/**
+ * @addtogroup pms_types
+ * @{
+ *
+ * @brief Defines variables and data structures used by the permission management module.
+ *
+ * @since 1.0
+ * @version 1.0
+ */
+
+/**
+ * @file pms_types.h
+ *
+ * @brief Declares variables and data structures used by the permission management module.
+ *
+ * To use permission management APIs, you must obtain this file.
+ *
+ * @since 1.0
+ * @version 1.0
+ */
+
+#ifndef PMS_TYPES_H
+#define PMS_TYPES_H
+
+#ifdef __cplusplus
+#if __cplusplus
+extern "C" {
+#endif
+#endif /* __cplusplus */
+
+/**
+ * @brief Indicates the length of a permission name.
+ *
+ * The default length is 64 bytes, including the terminating null byte <b>'\0'</b>.
+ */
+#define PERM_NAME_LEN 64
+/**
+ * @brief Indicates the length of a permission description.
+ *
+ * The default length is 128 bytes, including the terminating null byte <b>'\0'</b>.
+ */
+#define PERM_DESC_LEN 128
+/**
+ * @brief Indicates the length of udid.
+ *
+ * The default length is 64 bytes, do not contain the terminating null byte <b>'\0'</b>.
+ */
+#define UDID_FINAL_BYTES 64
+
+/**
+ * @brief Enumerates granting statuses of the permission.
+ *
+ */
+enum IsGranted {
+    /** Not granted */
+    NOT_GRANTED = 0,
+    /** Granted */
+    GRANTED = 1,
+};
+
+/**
+ * @brief Defines the permission, including the name, description, and whether the permission is granted.
+ *
+ */
+typedef struct {
+    /** Permission name. For details about its length, see {@link PERM_NAME_LEN}. */
+    char name[PERM_NAME_LEN];
+    /** Permission description. For details about its length, see {@link PERM_DESC_LEN}. */
+    char desc[PERM_DESC_LEN];
+    /** Whether the permission is granted */
+    enum IsGranted granted;
+} PermissionSaved;
+
+/**
+ * @brief Enumerates error codes of the permission management module.
+ *
+ */
+enum PmsErrorCode {
+    /** Success */
+    PERM_ERRORCODE_SUCCESS = 0,
+    /** Invalid parameters */
+    PERM_ERRORCODE_INVALID_PARAMS = 10,
+    /** Invalid permission name */
+    PERM_ERRORCODE_INVALID_PERMNAME,
+    /** Failed to allocate memory using the <b>malloc</b> function. */
+    PERM_ERRORCODE_MALLOC_FAIL,
+    /** Failed to open the file descriptor. */
+    PERM_ERRORCODE_OPENFD_FAIL,
+    /** Failed to read the file descriptor. */
+    PERM_ERRORCODE_READFD_FAIL,
+    /** Failed to write the file descriptor. */
+    PERM_ERRORCODE_WRITEFD_FAIL,
+    /** Failed to parse the JSON string. */
+    PERM_ERRORCODE_JSONPARSE_FAIL,
+    /** Failed to copy the string. */
+    PERM_ERRORCODE_COPY_ERROR,
+    /** The permission name or description is too long. */
+    PERM_ERRORCODE_FIELD_TOO_LONG,
+    /** The permission does not exist. */
+    PERM_ERRORCODE_PERM_NOT_EXIST,
+    /** Failed to delete the permission file. */
+    PERM_ERRORCODE_UNLINK_ERROR,
+    /** The file does not exist. */
+    PERM_ERRORCODE_FILE_NOT_EXIST,
+    /** Failed to set memory using the <b>memset</b> function. */
+    PERM_ERRORCODE_MEMSET_FAIL,
+    /** Failed to obtain information about the named file using the <b>stat</b>
+     * function.
+     */
+    PERM_ERRORCODE_STAT_FAIL,
+    /** Invalid path */
+    PERM_ERRORCODE_PATH_INVALID,
+    /** Too many permissions */
+    PERM_ERRORCODE_TOO_MUCH_PERM,
+    /** The process ID does not exist. */
+    PERM_ERRORCODE_TASKID_NOT_EXIST,
+    /** Abnormal number of permissions */
+    PERM_ERRORCODE_PERM_NUM_ERROR,
+    /** Failed to generate udid */
+    PERM_ERRORCODE_GENERATE_UDID_FAILED,
+};
+
+#ifdef __cplusplus
+#if __cplusplus
+}
+#endif
+#endif
+#endif // PMS_TYPES_H
\ No newline at end of file
diff --git a/base/security/permission/services/permission_lite/BUILD.gn b/base/security/permission/services/permission_lite/BUILD.gn
new file mode 100644
index 00000000..d47a206b
--- /dev/null
+++ b/base/security/permission/services/permission_lite/BUILD.gn
@@ -0,0 +1,26 @@
+# Copyright (c) 2020~2021 Huawei Device Co., Ltd.
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+import("//build/lite/config/component/lite_component.gni")
+
+lite_component("permission_lite") {
+  deps = [
+    "//base/security/permission/services/permission_lite/pms_base:pms_base",
+  ]
+
+  features = [
+    "//base/security/permission/services/permission_lite/ipc_auth:ipc_auth_target",
+    "//base/security/permission/services/permission_lite/pms:pms_target",
+    "//base/security/permission/services/permission_lite/pms_client:pms_client",
+  ]
+}
diff --git a/base/security/permission/services/permission_lite/ipc_auth/BUILD.gn b/base/security/permission/services/permission_lite/ipc_auth/BUILD.gn
new file mode 100755
index 00000000..8dff3822
--- /dev/null
+++ b/base/security/permission/services/permission_lite/ipc_auth/BUILD.gn
@@ -0,0 +1,59 @@
+# Copyright (c) 2020~2021 Huawei Device Co., Ltd.
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+import("//build/lite/config/component/lite_component.gni")
+
+lite_library("ipc_auth_target") {
+  target_type = "shared_library"
+  sources = [
+    "//base/security/permission/services/permission_lite/ipc_auth/src/ipc_auth_impl.c",
+    "//base/security/permission/services/permission_lite/ipc_auth/src/ipc_auth_lite.c",
+  ]
+  include_dirs = [
+    "//base/security/permission/interfaces/innerkits/permission_lite",
+    "//base/security/permission/services/permission_lite/ipc_auth/include",
+    "//base/security/permission/services/permission_lite/pms_base/include",
+    "//foundation/distributedschedule/samgr_lite/interfaces/kits/registry",
+    "//foundation/distributedschedule/samgr_lite/interfaces/kits/samgr",
+    "//utils/native/lite/include",
+    "//third_party/bounds_checking_function/include/",
+  ]
+
+  deps = [
+    "//base/hiviewdfx/hilog_lite/frameworks/featured:hilog_shared",
+    "//base/security/permission/services/permission_lite/pms_base:pms_base",
+    "//foundation/distributedschedule/samgr_lite/samgr:samgr",
+    "//third_party/bounds_checking_function:libsec_shared",
+  ]
+
+  defines = []
+
+  if (ohos_kernel_type == "liteos_a") {
+    include_dirs += [
+      "//kernel/liteos_a/kernel/include",
+      "//kernel/liteos_a/kernel/common",
+      "${aafwk_lite_path}/interfaces/kits/want_lite",
+      "${appexecfwk_lite_path}/interfaces/kits/bundle_lite",
+      "${appexecfwk_lite_path}/interfaces/innerkits/bundlemgr_lite",
+    ]
+
+    deps += [ "${appexecfwk_lite_path}/frameworks/bundle_lite:bundle" ]
+
+    defines += [
+      "OHOS_APPEXECFWK_BMS_BUNDLEMANAGER",
+      "OHOS_APPFWK_ENABLE",
+    ]
+  }
+
+  cflags = [ "-Wall" ]
+}
diff --git a/base/security/permission/services/permission_lite/ipc_auth/include/ipc_auth.h b/base/security/permission/services/permission_lite/ipc_auth/include/ipc_auth.h
new file mode 100755
index 00000000..14cee67c
--- /dev/null
+++ b/base/security/permission/services/permission_lite/ipc_auth/include/ipc_auth.h
@@ -0,0 +1,36 @@
+/*
+ * Copyright (c) 2020 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef IPC_AUTH_H
+#define IPC_AUTH_H
+
+#include "policy_define.h"
+
+#ifdef __cplusplus
+#if __cplusplus
+extern "C" {
+#endif
+#endif
+
+int GetCommunicationStrategy(RegParams params, PolicyTrans **policies, unsigned int *policyNum);
+
+int IsCommunicationAllowed(AuthParams params);
+
+#ifdef __cplusplus
+#if __cplusplus
+}
+#endif
+#endif
+#endif // IPC_AUTH_H
\ No newline at end of file
diff --git a/base/security/permission/services/permission_lite/ipc_auth/include/ipc_auth_err.h b/base/security/permission/services/permission_lite/ipc_auth/include/ipc_auth_err.h
new file mode 100755
index 00000000..77bb7448
--- /dev/null
+++ b/base/security/permission/services/permission_lite/ipc_auth/include/ipc_auth_err.h
@@ -0,0 +1,41 @@
+/*
+ * Copyright (c) 2020 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef PERM_ERROR_CODE_H
+#define PERM_ERROR_CODE_H
+
+#ifdef __cplusplus
+#if __cplusplus
+extern "C" {
+#endif
+#endif
+
+enum IpcAuthErrorCode {
+    AUTH_ERRORCODE_SUCCESS = 0,
+    AUTH_ERRORCODE_ACCESS_DENIED = -1,
+    AUTH_ERRORCODE_NO_POLICY_SET = -2,
+    AUTH_ERRORCODE_INVALID_UID = 100,
+    AUTH_ERRORCODE_INVALID_BUNDLENAME = 101,
+    AUTH_ERRORCODE_GET_BUNDLEINFO_ERROR = 102,
+    AUTH_ERRORCODE_MALLOC_FAIL = 103,
+    AUTH_ERRORCODE_MEMSET_FAIL = 104,
+};
+
+#ifdef __cplusplus
+#if __cplusplus
+}
+#endif
+#endif
+#endif // PERM_ERROR_CODE_H
\ No newline at end of file
diff --git a/base/security/permission/services/permission_lite/ipc_auth/include/ipc_auth_lite.h b/base/security/permission/services/permission_lite/ipc_auth/include/ipc_auth_lite.h
new file mode 100755
index 00000000..37dea898
--- /dev/null
+++ b/base/security/permission/services/permission_lite/ipc_auth/include/ipc_auth_lite.h
@@ -0,0 +1,41 @@
+/*
+ * Copyright (c) 2020 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef OHOS_IPC_AUTH_FEATURE_H
+#define OHOS_IPC_AUTH_FEATURE_H
+
+#include "feature.h"
+#include "ipc_auth_interface.h"
+
+#ifdef __cplusplus
+#if __cplusplus
+extern "C" {
+#endif
+#endif
+
+typedef struct IpcAuthLite IpcAuthLite;
+struct IpcAuthLite {
+    INHERIT_FEATURE;
+    INHERIT_IUNKNOWNENTRY(IpcAuthInterface);
+    Identity identity;
+};
+
+IpcAuthLite *IpcAuthLite_GetInstance();
+#ifdef __cplusplus
+#if __cplusplus
+}
+#endif
+#endif
+#endif // OHOS_IPC_AUTH_FEATURE_H
\ No newline at end of file
diff --git a/base/security/permission/services/permission_lite/ipc_auth/include/policy_define.h b/base/security/permission/services/permission_lite/ipc_auth/include/policy_define.h
new file mode 100755
index 00000000..b500f09a
--- /dev/null
+++ b/base/security/permission/services/permission_lite/ipc_auth/include/policy_define.h
@@ -0,0 +1,81 @@
+/*
+ * Copyright (c) 2020 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef POLICY_DEFINE_H
+#define POLICY_DEFINE_H
+
+#define UID_SIZE 8
+#define POLICY_SIZE 8
+
+#ifdef __cplusplus
+#if __cplusplus
+extern "C" {
+#endif
+#endif
+
+typedef struct RegParams {
+    char *service;
+    char *feature;
+    unsigned int uid;
+    unsigned int pid;
+} RegParams;
+
+typedef struct AuthParams {
+    char *providerService;
+    char *providerfeature;
+    unsigned int providerUid;
+    unsigned int providerPid;
+    unsigned int consumerUid;
+    unsigned int consumerPid;
+} AuthParams;
+
+enum PolicyType {
+    RANGE = 1,
+    FIXED = 2,
+    BUNDLENAME = 3
+};
+
+typedef struct PolicyTrans {
+    enum PolicyType type;
+    int fixedUid[UID_SIZE];
+    int uidMin;
+    int uidMax;
+} PolicyTrans;
+
+typedef struct IpcPolicy {
+    enum PolicyType type;
+    int fixedUid[UID_SIZE];
+    int uidMin;
+    int uidMax;
+    char *bundleName;
+} IpcPolicy;
+
+typedef struct FeaturePolicy {
+    char *feature;
+    IpcPolicy policies[POLICY_SIZE];
+} FeaturePolicy;
+
+typedef struct PolicySetting {
+    char *service;
+    FeaturePolicy *features;
+    int featureNum;
+} PolicySetting;
+
+#ifdef __cplusplus
+#if __cplusplus
+}
+#endif
+#endif
+#endif // POLICY_DEFINE_H
\ No newline at end of file
diff --git a/base/security/permission/services/permission_lite/ipc_auth/include/policy_preset.h b/base/security/permission/services/permission_lite/ipc_auth/include/policy_preset.h
new file mode 100644
index 00000000..314c15e2
--- /dev/null
+++ b/base/security/permission/services/permission_lite/ipc_auth/include/policy_preset.h
@@ -0,0 +1,236 @@
+/*
+ * Copyright (c) 2020~2021 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef POLICY_PERSET_H
+#define POLICY_PERSET_H
+
+#include "policy_define.h"
+
+FeaturePolicy pmsFeature[] = {
+    {
+        "PmsFeature",
+        {
+            {
+                .type=RANGE,
+                .uidMin=0,
+                .uidMax=__INT_MAX__,
+            },
+        },
+    },
+    {
+        "PmsInnerFeature",
+        {
+            {
+                .type=RANGE,
+                .uidMin=0,
+                .uidMax=999,
+            },
+        },
+    },
+};
+
+FeaturePolicy amsFeature[] = {
+    {
+        "AmsFeature",
+        {
+            {
+                .type=RANGE,
+                .uidMin=0,
+                .uidMax=__INT_MAX__,
+            },
+        }
+    },
+    {
+        "AmsInnerFeature",
+        {
+            {
+                .type=FIXED,
+                .fixedUid={2}
+            },
+        }
+    },
+};
+
+FeaturePolicy bmsFeature[] = {
+    {
+        "BmsFeature",
+        {
+            {
+                .type=FIXED,
+                .fixedUid={2, 3, 8}
+            },
+            {
+                .type=RANGE,
+                .uidMin=100,
+                .uidMax=__INT_MAX__,
+            },
+        }
+    },
+    {
+        "BmsInnerFeature",
+        {
+            {
+                .type=FIXED,
+                .fixedUid={2, 3, 8}
+            },
+            {
+                .type=RANGE,
+                .uidMin=100,
+                .uidMax=999,
+            },
+        }
+    },
+};
+
+FeaturePolicy bdsFeature[] = {
+    {
+        NULL,
+        {
+            {
+                .type=FIXED,
+                .fixedUid={7}
+            },
+        }
+    },
+};
+
+FeaturePolicy dmsFeature[] = {
+    {
+        "dmslite",
+        {
+            {
+                .type=RANGE,
+                .uidMin=0,
+                .uidMax=__INT_MAX__,
+            },
+        }
+    },
+};
+
+FeaturePolicy samgrFeature[] = {
+    {
+        NULL,
+        {
+            {
+                .type=RANGE,
+                .uidMin=0,
+                .uidMax=__INT_MAX__,
+            },
+        }
+    },
+};
+
+FeaturePolicy appspawnFeature[] = {
+    {
+        NULL,
+        {
+            {
+                .type=FIXED,
+                .fixedUid={7}
+            },
+        }
+    },
+};
+
+FeaturePolicy imsFeature[] = {
+    {
+        NULL,
+        {
+            {
+                .type=RANGE,
+                .uidMin=100,
+                .uidMax=__INT_MAX__,
+            },
+            {
+                .type=FIXED,
+                .fixedUid={2, 7}
+            },
+        }
+    },
+};
+
+FeaturePolicy wmsFeature[] = {
+    {
+        NULL,
+        {
+            {
+                .type=RANGE,
+                .uidMin=100,
+                .uidMax=__INT_MAX__,
+            },
+            {
+                .type=FIXED,
+                .fixedUid={2, 7}
+            },
+        }
+    },
+};
+
+FeaturePolicy sensorFeature[] = {
+    {
+        NULL,
+        {
+            {
+                .type=RANGE,
+                .uidMin=0,
+                .uidMax=__INT_MAX__,
+            },
+        }
+    },
+};
+
+FeaturePolicy aiFeature[] = {
+    {
+        NULL,
+        {
+            {
+                .type=RANGE,
+                .uidMin=0,
+                .uidMax=__INT_MAX__,
+            },
+        }
+    },
+};
+
+FeaturePolicy PowerFeature[] = {
+    {
+        "power_feature",
+        {
+            {
+                .type=RANGE,
+                .uidMin=0,
+                .uidMax=1000,
+            },
+        }
+    },
+};
+static PolicySetting g_presetPolicies[] = {
+    {"permissionms", pmsFeature, 2},
+    {"abilityms", amsFeature, 2},
+    {"bundlems", bmsFeature, 2},
+    {"dtbschedsrv", dmsFeature, 1},
+    {"samgr", samgrFeature, 1},
+    {"appspawn", appspawnFeature, 1},
+    {"IMS", imsFeature, 1},
+    {"WMS", wmsFeature, 1},
+    {"bundle_daemon", bdsFeature, 1},
+    {"sensor_service", sensorFeature, 1},
+    {"ai_service", aiFeature, 1},
+    {"power_service", PowerFeature, 1}
+};
+
+static int g_presetPolicySize = sizeof(g_presetPolicies) / sizeof(PolicySetting);
+
+#endif // POLICY_PERSET_H
diff --git a/base/security/permission/services/permission_lite/ipc_auth/include/policy_registry.h b/base/security/permission/services/permission_lite/ipc_auth/include/policy_registry.h
new file mode 100755
index 00000000..6d950da3
--- /dev/null
+++ b/base/security/permission/services/permission_lite/ipc_auth/include/policy_registry.h
@@ -0,0 +1,66 @@
+/*
+ * Copyright (c) 2020 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef POLICY_REGISTRY_H
+#define POLICY_REGISTRY_H
+
+#include "policy_define.h"
+
+FeaturePolicy regSvc1Feature[] = {
+    {
+        "feature1",
+        {
+            {
+                .type=RANGE,
+                .uidMin=100,
+                .uidMax=110
+            },
+            {
+                .type=FIXED,
+                .fixedUid={75, 85, 95}
+            },
+            {
+                .type=BUNDLENAME,
+                .bundleName="OHOS"
+            },
+        }
+    },
+    {
+        "feature2",
+        {
+            {
+                .type=RANGE,
+                .uidMin=100,
+                .uidMax=110
+            },
+            {
+                .type=FIXED,
+                .fixedUid={75, 85, 95}
+            },
+            {
+                .type=BUNDLENAME,
+                .bundleName="OHOS"
+            },
+        }
+    },
+};
+
+static PolicySetting g_registryPolicies[] = {
+    {"regSvc1", regSvc1Feature, 2},
+};
+
+static int g_regPoliciesSize = sizeof(g_registryPolicies) / sizeof(PolicySetting);
+
+#endif // POLICY_REGISTRY_H
\ No newline at end of file
diff --git a/base/security/permission/services/permission_lite/ipc_auth/src/ipc_auth_impl.c b/base/security/permission/services/permission_lite/ipc_auth/src/ipc_auth_impl.c
new file mode 100644
index 00000000..a511d8b0
--- /dev/null
+++ b/base/security/permission/services/permission_lite/ipc_auth/src/ipc_auth_impl.c
@@ -0,0 +1,280 @@
+/*
+ * Copyright (c) 2020~2021 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "ipc_auth.h"
+
+#include <securec.h>
+#include <stdbool.h>
+#include <string.h>
+
+#ifdef OHOS_APPFWK_ENABLE
+#include "bundle_manager.h"
+#endif
+#include "log.h"
+
+#include "ipc_auth_err.h"
+#include "policy_preset.h"
+#include "policy_registry.h"
+
+static unsigned int g_systemSvcUids[] = {1, 2, 0, 7, 8, 9, 10};
+
+static unsigned int g_systemSvcUidSize = sizeof(g_systemSvcUids) / sizeof(unsigned int);
+
+static int IsUidValid(unsigned int uid)
+{
+    for (int i = 0; i < g_systemSvcUidSize; i++) {
+        if (g_systemSvcUids[i] == uid) {
+            return AUTH_ERRORCODE_SUCCESS;
+        }
+    }
+    return AUTH_ERRORCODE_INVALID_UID;
+}
+
+#ifdef OHOS_APPFWK_ENABLE
+static int GetUidByBundleName(const char *bundleName, unsigned int *uid)
+{
+    BundleInfo bundleInfo = {0};
+    if (GetBundleInfo(bundleName, 0, &bundleInfo) != 0) {
+        HILOG_ERROR(HILOG_MODULE_APP, "Invalid bundleName, [name: %s][line: %d]", bundleName, __LINE__);
+        return AUTH_ERRORCODE_INVALID_BUNDLENAME;
+    }
+    *uid = bundleInfo.uid;
+    return AUTH_ERRORCODE_SUCCESS;
+}
+#endif
+
+static int StrcmpWithNull(const char *s1, const char *s2)
+{
+    if (s1 == NULL && s2 == NULL) {
+        return 0;
+    }
+    if (s1 == NULL || s2 == NULL) {
+        return -1;
+    }
+    return strcmp(s1, s2);
+}
+
+static void SetPolicy(const IpcPolicy *policy, PolicyTrans *policyTrans)
+{
+    switch (policy->type) {
+        case RANGE:
+            policyTrans->type = RANGE;
+            policyTrans->uidMax = policy->uidMax;
+            policyTrans->uidMin = policy->uidMin;
+            break;
+        case FIXED:
+            policyTrans->type = FIXED;
+            for (int m = 0; m < UID_SIZE; m++) {
+                policyTrans->fixedUid[m] = policy->fixedUid[m];
+            }
+            break;
+#ifdef OHOS_APPFWK_ENABLE
+        case BUNDLENAME: {
+            policyTrans->type = BUNDLENAME;
+            unsigned int uid = 0;
+            int ret = GetUidByBundleName(policy->bundleName, &uid);
+            if (ret != AUTH_ERRORCODE_SUCCESS) {
+                break;
+            }
+            policyTrans->fixedUid[0] = uid;
+            break;
+        }
+#endif
+        default:
+            break;
+    }
+}
+
+static bool IsPolicyValid(enum PolicyType type)
+{
+    if ((type == RANGE) || (type == FIXED) || (type == BUNDLENAME)) {
+        return true;
+    }
+    return false;
+}
+
+static int SetPolicies(const FeaturePolicy *featurePolicy, PolicyTrans **policies, unsigned int *policyNum)
+{
+    int num = 0;
+    for (int k = 0; k < POLICY_SIZE; k++) {
+        if (IsPolicyValid(featurePolicy->policies[k].type)) {
+            num++;
+        }
+    }
+    int allocSize = sizeof(PolicyTrans) * num;
+    if (allocSize == 0) {
+        return AUTH_ERRORCODE_NO_POLICY_SET;
+    }
+    *policies = (PolicyTrans *) malloc(allocSize);
+    if (*policies == NULL) {
+        HILOG_ERROR(HILOG_MODULE_APP, "Malloc failed, [line: %d]", __LINE__);
+        return AUTH_ERRORCODE_MALLOC_FAIL;
+    }
+    if (memset_s(*policies, allocSize, 0x0, allocSize) != EOK) {
+        HILOG_ERROR(HILOG_MODULE_APP, "Memset failed, [line: %d]", __LINE__);
+        free(*policies);
+        *policies = NULL;
+        return AUTH_ERRORCODE_MEMSET_FAIL;
+    }
+    int index = 0;
+    for (int k = 0; k < POLICY_SIZE; k++) {
+        IpcPolicy policy = featurePolicy->policies[k];
+        if (IsPolicyValid(policy.type)) {
+            SetPolicy(&policy, *policies + index);
+            index++;
+        }
+    }
+    *policyNum = num;
+    return AUTH_ERRORCODE_SUCCESS;
+}
+
+int GetCommunicationStrategy(RegParams params, PolicyTrans **policies, unsigned int *policyNum)
+{
+    if (IsUidValid(params.uid) == AUTH_ERRORCODE_INVALID_UID) {
+        HILOG_ERROR(HILOG_MODULE_APP, "Invalid uid, [svc: %s][ft: %s][uid: %d][pid: %d][line: %d]",
+                    params.service, params.feature, params.uid, params.pid, __LINE__);
+        return AUTH_ERRORCODE_INVALID_UID;
+    }
+
+    for (int i = 0; i < g_presetPolicySize; i++) {
+        if (strcmp(g_presetPolicies[i].service, params.service) != 0) {
+            continue;
+        }
+        for (int j = 0; j < g_presetPolicies[i].featureNum; j++) {
+            FeaturePolicy *featurePolicy = (FeaturePolicy *) g_presetPolicies[i].features + j;
+            if (StrcmpWithNull(featurePolicy->feature, params.feature) != 0) {
+                continue;
+            }
+            if (SetPolicies(featurePolicy, policies, policyNum) == AUTH_ERRORCODE_SUCCESS) {
+                return AUTH_ERRORCODE_SUCCESS;
+            }
+            return AUTH_ERRORCODE_NO_POLICY_SET;
+        }
+        return AUTH_ERRORCODE_NO_POLICY_SET;
+    }
+
+    for (int i = 0; i < g_regPoliciesSize; i++) {
+        if (strcmp(g_registryPolicies[i].service, params.service) != 0) {
+            continue;
+        }
+        for (int j = 0; j < g_registryPolicies[i].featureNum; j++) {
+            FeaturePolicy *featurePolicy = (FeaturePolicy *) g_registryPolicies[i].features + j;
+            if (StrcmpWithNull(featurePolicy->feature, params.feature) != 0) {
+                continue;
+            }
+            if (SetPolicies(featurePolicy, policies, policyNum) == AUTH_ERRORCODE_SUCCESS) {
+                return AUTH_ERRORCODE_SUCCESS;
+            }
+            return AUTH_ERRORCODE_NO_POLICY_SET;
+        }
+        return AUTH_ERRORCODE_NO_POLICY_SET;
+    }
+
+    return AUTH_ERRORCODE_NO_POLICY_SET;
+}
+
+static int IsUidFixed(const int fixedUid[], unsigned int consumerUid)
+{
+    for (int m = 0; m < UID_SIZE; m++) {
+        if (fixedUid[m] == consumerUid) {
+            return AUTH_ERRORCODE_SUCCESS;
+        }
+    }
+    return AUTH_ERRORCODE_ACCESS_DENIED;
+}
+
+static int CheckPolicy(const IpcPolicy *policy, unsigned int consumerUid)
+{
+    switch (policy->type) {
+        case RANGE:
+            if (consumerUid >= policy->uidMin && consumerUid <= policy->uidMax) {
+                return AUTH_ERRORCODE_SUCCESS;
+            }
+            break;
+        case FIXED:
+            if (IsUidFixed(policy->fixedUid, consumerUid) == AUTH_ERRORCODE_SUCCESS) {
+                return AUTH_ERRORCODE_SUCCESS;
+            }
+            break;
+#ifdef OHOS_APPFWK_ENABLE
+        case BUNDLENAME: {
+            unsigned int uid = 0;
+            int ret = GetUidByBundleName(policy->bundleName, &uid);
+            if (ret != AUTH_ERRORCODE_SUCCESS) {
+                return ret;
+            }
+            if (uid == consumerUid) {
+                return AUTH_ERRORCODE_SUCCESS;
+            }
+            break;
+        }
+#endif
+        default:
+            break;
+    }
+    return AUTH_ERRORCODE_ACCESS_DENIED;
+}
+
+static int CheckFeaturePolicies(const FeaturePolicy *featurePolicy, unsigned int consumerUid)
+{
+    for (int k = 0; k < POLICY_SIZE; k++) {
+        IpcPolicy policy = featurePolicy->policies[k];
+        int ret = CheckPolicy(&policy, consumerUid);
+        if (ret == AUTH_ERRORCODE_SUCCESS) {
+            return ret;
+        }
+    }
+    return AUTH_ERRORCODE_ACCESS_DENIED;
+}
+
+static int CheckSvcPolicies(const PolicySetting policySetting[], int policySize, const AuthParams *params)
+{
+    for (int i = 0; i < policySize; i++) {
+        if (strcmp(policySetting[i].service, params->providerService) != 0) {
+            continue;
+        }
+        for (int j = 0; j < policySetting[i].featureNum; j++) {
+            FeaturePolicy *featurePolicy = (FeaturePolicy *)policySetting[i].features + j;
+            char *s1 = featurePolicy->feature;
+            char *s2 = params->providerfeature;
+            if (StrcmpWithNull(s1, s2) != 0) {
+                continue;
+            }
+            int ret = CheckFeaturePolicies(featurePolicy, params->consumerUid);
+            if (ret == AUTH_ERRORCODE_SUCCESS) {
+                return ret;
+            }
+            break;
+        }
+        break;
+    }
+    return AUTH_ERRORCODE_ACCESS_DENIED;
+}
+
+int IsCommunicationAllowed(AuthParams params)
+{
+    if (CheckSvcPolicies(g_presetPolicies, g_presetPolicySize, &params) == AUTH_ERRORCODE_SUCCESS) {
+        return AUTH_ERRORCODE_SUCCESS;
+    }
+
+    if (CheckSvcPolicies(g_registryPolicies, g_regPoliciesSize, &params) == AUTH_ERRORCODE_SUCCESS) {
+        return AUTH_ERRORCODE_SUCCESS;
+    }
+
+    HILOG_ERROR(HILOG_MODULE_APP,
+        "Access denied, [consumerUid: %d][consumerPid: %d][providerUid: %d][providerPid: %d][line: %d]",
+        params.consumerUid, params.consumerPid, params.providerUid, params.providerPid, __LINE__);
+    return AUTH_ERRORCODE_ACCESS_DENIED;
+}
diff --git a/base/security/permission/services/permission_lite/ipc_auth/src/ipc_auth_lite.c b/base/security/permission/services/permission_lite/ipc_auth/src/ipc_auth_lite.c
new file mode 100755
index 00000000..475d0b05
--- /dev/null
+++ b/base/security/permission/services/permission_lite/ipc_auth/src/ipc_auth_lite.c
@@ -0,0 +1,85 @@
+/*
+ * Copyright (c) 2020 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "ipc_auth_lite.h"
+
+#include <ohos_init.h>
+
+#include "log.h"
+
+#include "feature.h"
+#include "iunknown.h"
+#include "samgr_lite.h"
+#include "service.h"
+
+#include "ipc_auth.h"
+
+static void Init();
+static const char *GetName(Feature *feature);
+static void OnInitialize(Feature *feature, Service *parent, Identity identity);
+static void OnStop(Feature *feature, Identity identity);
+static BOOL OnMessage(Feature *feature, Request *request);
+
+static IpcAuthLite g_authLite = {
+    .GetName = GetName,
+    .OnInitialize = OnInitialize,
+    .OnStop = OnStop,
+    .OnMessage = OnMessage,
+    DEFAULT_IUNKNOWN_ENTRY_BEGIN,
+    .GetCommunicationStrategy = GetCommunicationStrategy,
+    .IsCommunicationAllowed = IsCommunicationAllowed,
+    DEFAULT_IUNKNOWN_ENTRY_END,
+    .identity = {-1, -1, NULL},
+};
+
+static void Init()
+{
+    SAMGR_GetInstance()->RegisterFeature(PERMISSION_SERVICE, (Feature *)&g_authLite);
+    SAMGR_GetInstance()->RegisterFeatureApi(PERMISSION_SERVICE, IPCAUTH, GET_IUNKNOWN(g_authLite));
+    HILOG_INFO(HILOG_MODULE_APP, "Init ipcAuth feature success");
+}
+APP_FEATURE_INIT(Init);
+
+static const char *GetName(Feature *feature)
+{
+    (void)feature;
+    return IPCAUTH;
+}
+
+static void OnInitialize(Feature *feature, Service *parent, Identity identity)
+{
+    (void)parent;
+    if (feature == NULL) {
+        return;
+    }
+    IpcAuthLite *authLite = (IpcAuthLite *)feature;
+    authLite->identity = identity;
+    HILOG_INFO(HILOG_MODULE_APP, "OnInitialize ipcAuth feature");
+}
+
+static void OnStop(Feature *feature, Identity identity)
+{
+    (void)feature;
+    (void)identity;
+}
+
+static BOOL OnMessage(Feature *feature, Request *request)
+{
+    if (feature == NULL || request == NULL) {
+        return FALSE;
+    }
+    // call func
+    return TRUE;
+}
\ No newline at end of file
diff --git a/base/security/permission/services/permission_lite/js_api/BUILD.gn b/base/security/permission/services/permission_lite/js_api/BUILD.gn
new file mode 100644
index 00000000..37e0efa9
--- /dev/null
+++ b/base/security/permission/services/permission_lite/js_api/BUILD.gn
@@ -0,0 +1,34 @@
+# Copyright (c) 2020 Huawei Device Co., Ltd.
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+shared_library("ace_kit_permission") {
+  sources = [ "//base/security/permission/services/permission_lite/js_api/src/perm_module.cpp" ]
+
+  cflags = [
+    "-fPIC",
+    "-Wall",
+  ]
+
+  cflags_cc = cflags
+
+  include_dirs = [
+    "include",
+    "//base/security/permission/interfaces/kits/permission_lite",
+    "//foundation/ace/interfaces/innerkits/builtin/jsi",
+    "//foundation/ace/interfaces/innerkits/builtin/base",
+  ]
+  deps = [
+    "//base/hiviewdfx/hilog_lite/frameworks/featured:hilog_shared",
+    "//base/security/permission/services/permission_lite/pms_client:pms_client",
+  ]
+}
diff --git a/base/security/permission/services/permission_lite/js_api/include/perm_module.h b/base/security/permission/services/permission_lite/js_api/include/perm_module.h
new file mode 100644
index 00000000..3b233efe
--- /dev/null
+++ b/base/security/permission/services/permission_lite/js_api/include/perm_module.h
@@ -0,0 +1,37 @@
+/*
+ * Copyright (c) 2020~2021 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef OHOS_ACELITE_PERM_MODULE_H
+#define OHOS_ACELITE_PERM_MODULE_H
+
+#include "jsi.h"
+
+namespace OHOS {
+namespace ACELite {
+class PermModule {
+public:
+    PermModule() {}
+    ~PermModule() {}
+    static JSIValue CheckSelfPerm(const JSIValue thisVal, const JSIValue* args, uint8_t argsNum);
+};
+
+void InitPermModule(JSIValue exports)
+{
+    JSI::SetModuleAPI(exports, "check", PermModule::CheckSelfPerm);
+}
+} // namespace ACELite
+} // namespace OHOS
+
+#endif /* OHOS_ACELITE_PERM_MODULE_H */
\ No newline at end of file
diff --git a/base/security/permission/services/permission_lite/js_api/src/perm_module.cpp b/base/security/permission/services/permission_lite/js_api/src/perm_module.cpp
new file mode 100644
index 00000000..3a69429c
--- /dev/null
+++ b/base/security/permission/services/permission_lite/js_api/src/perm_module.cpp
@@ -0,0 +1,54 @@
+/*
+ * Copyright (c) 2020~2021 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "perm_module.h"
+
+#include "log.h"
+#include "pms_interface.h"
+
+namespace OHOS {
+namespace ACELite {
+JSIValue PermModule::CheckSelfPerm(const JSIValue thisVal, const JSIValue *args, uint8_t argsNum)
+{
+    JSIValue undefValue = JSI::CreateUndefined();
+    if ((args == nullptr) || argsNum == 0 || JSI::ValueIsUndefined(args[0])) {
+        return undefValue;
+    }
+
+    JSIValue success = JSI::GetNamedProperty(args[0], CB_SUCCESS);
+    JSIValue fail = JSI::GetNamedProperty(args[0], CB_FAIL);
+    JSIValue complete = JSI::GetNamedProperty(args[0], CB_COMPLETE);
+    char *permission = JSI::GetStringProperty(args[0], "permission");
+
+    int ret = CheckSelfPermission(permission);
+    JSIValue code = JSI::CreateNumber(ret);
+    JSIValue argv[ARGC_ONE] = { code };
+    if (ret != GRANTED || ret != NOT_GRANTED) {
+        HILOG_ERROR(HILOG_MODULE_ACE, "Check permission failed.");
+        JSI::CallFunction(fail, thisVal, argv, ARGC_ONE);
+        goto RELEASE;
+    }
+
+    JSI::CallFunction(success, thisVal, argv, ARGC_ONE);
+
+RELEASE:
+    JSI::ReleaseString(permission);
+    JSI::CallFunction(complete, thisVal, nullptr, 0);
+    JSI::ReleaseValueList(success, fail, complete, code, ARGS_END);
+
+    return undefValue;
+}
+} // namespace ACELite
+} // namespace OHOS
\ No newline at end of file
diff --git a/base/security/permission/services/permission_lite/pms/BUILD.gn b/base/security/permission/services/permission_lite/pms/BUILD.gn
new file mode 100644
index 00000000..6fe86cf2
--- /dev/null
+++ b/base/security/permission/services/permission_lite/pms/BUILD.gn
@@ -0,0 +1,58 @@
+# Copyright (c) 2020~2021 Huawei Device Co., Ltd.
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+import("//build/lite/config/component/lite_component.gni")
+
+lite_library("pms_target") {
+  target_type = "shared_library"
+  sources = [
+    "//base/security/permission/services/permission_lite/pms/src/perm_operate.c",
+    "//base/security/permission/services/permission_lite/pms/src/pms_impl.c",
+    "//base/security/permission/services/permission_lite/pms/src/pms_inner.c",
+    "//base/security/permission/services/permission_lite/pms/src/pms_server.c",
+    "//base/security/permission/services/permission_lite/pms/src/pms_server_internal.c",
+  ]
+
+  include_dirs = [
+    "//base/security/permission/interfaces/kits/permission_lite",
+    "//base/security/permission/services/permission_lite/pms/include",
+    "//base/security/permission/services/permission_lite/pms/include/hals",
+    "//base/security/permission/services/permission_lite/pms_base/include",
+    "//foundation/distributedschedule/samgr_lite/samgr/adapter/",
+    "//foundation/distributedschedule/samgr_lite/interfaces/kits/registry",
+    "//foundation/distributedschedule/samgr_lite/interfaces/kits/samgr",
+    "//foundation/distributedschedule/samgr_lite/interfaces/kits/communication/broadcast",
+    "//foundation/distributedschedule/samgr_lite/samgr_endpoint/source",
+    "//utils/native/lite/include",
+    "//third_party/cJSON",
+    "//third_party/bounds_checking_function/include/",
+  ]
+
+  deps = [
+    "${ohos_product_adapter_dir}/security/permission_lite:hal_pms",
+    "//base/security/permission/services/permission_lite/pms_base:pms_base",
+    "//build/lite/config/component/cJSON:cjson_shared",
+    "//foundation/communication/ipc_lite:liteipc_adapter",
+    "//foundation/distributedschedule/samgr_lite/samgr:samgr",
+    "//third_party/bounds_checking_function:libsec_shared",
+  ]
+
+  if (ohos_kernel_type == "liteos_a") {
+    include_dirs += [
+      "//kernel/liteos_a/kernel/include",
+      "//kernel/liteos_a/kernel/common",
+    ]
+  }
+
+  cflags = [ "-Wall" ]
+}
diff --git a/base/security/permission/services/permission_lite/pms/include/hals/hal_pms.h b/base/security/permission/services/permission_lite/pms/include/hals/hal_pms.h
new file mode 100644
index 00000000..abb62583
--- /dev/null
+++ b/base/security/permission/services/permission_lite/pms/include/hals/hal_pms.h
@@ -0,0 +1,45 @@
+/*
+* Copyright (c) 2021 Huawei Device Co., Ltd.
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*    http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+
+#ifndef HAL_PMS_H
+#define HAL_PMS_H
+
+#include <stdbool.h>
+#include "perm_define.h"
+
+#ifdef __cplusplus
+#if __cplusplus
+extern "C" {
+#endif
+#endif /* __cplusplus */
+
+PermissionDef* HalGetPermissionList(unsigned int *length);
+const char *HalGetPermissionPath();
+int HalGetMaxPermissionSize();
+void* HalMalloc(unsigned int size);
+void HalFree(void *ptr);
+int HalAccess(const char *pathname);
+void HalMutexLock();
+void HalMutexUnlock();
+int HalGetDevUdid(unsigned char *udid, int size);
+bool HalIsValidPath(const char *path);
+
+#ifdef __cplusplus
+#if __cplusplus
+}
+#endif
+#endif /* __cplusplus */
+
+#endif  // HAL_PMS_H
\ No newline at end of file
diff --git a/base/security/permission/services/permission_lite/pms/include/perm_define.h b/base/security/permission/services/permission_lite/pms/include/perm_define.h
new file mode 100644
index 00000000..65b0cfda
--- /dev/null
+++ b/base/security/permission/services/permission_lite/pms/include/perm_define.h
@@ -0,0 +1,80 @@
+/*
+ * Copyright (c) 2020~2021 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef PERM_DEFINE_H
+#define PERM_DEFINE_H
+
+#include "pms_types.h"
+
+#ifdef __cplusplus
+#if __cplusplus
+extern "C" {
+#endif
+#endif
+
+#define PKG_NAME_LEN 64
+#define CAP_NOT_BINDED (-1)
+
+enum GrantTime {
+    INUSE = 0,
+    ALWAYS,
+};
+
+enum GrantType {
+    USER_GRANT = 0,
+    SYSTEM_GRANT,
+};
+
+enum IsUpdate {
+    FIRST_INSTALL = 0,
+    UPDATE,
+};
+
+enum IsRestricted {
+    RESTRICTED = 0,
+    NOT_RESTRICTED,
+};
+
+typedef struct {
+    char name[PERM_NAME_LEN];
+    enum GrantType type;
+    enum IsRestricted isRestricted;
+    unsigned int cap;
+} PermissionDef;
+
+typedef struct {
+    char name[PERM_NAME_LEN];
+    char desc[PERM_DESC_LEN];
+    enum GrantTime when;
+} PermissionTrans;
+
+typedef struct TaskNode {
+    int uid;
+    char pkgName[PKG_NAME_LEN];
+    PermissionSaved *permList;
+    int permNum;
+    struct TaskNode *next;
+} TNode;
+
+typedef struct TaskList {
+    TNode *head;
+} TList;
+
+#ifdef __cplusplus
+#if __cplusplus
+}
+#endif
+#endif
+#endif // PERM_DEFINE_H
\ No newline at end of file
diff --git a/base/security/permission/services/permission_lite/pms/include/perm_operate.h b/base/security/permission/services/permission_lite/pms/include/perm_operate.h
new file mode 100644
index 00000000..3c3bb328
--- /dev/null
+++ b/base/security/permission/services/permission_lite/pms/include/perm_operate.h
@@ -0,0 +1,33 @@
+/*
+ * Copyright (c) 2020~2021 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef PERM_OPERATE_H
+#define PERM_OPERATE_H
+
+#include "perm_define.h"
+
+int PermissionIsGranted(const TList *list, int uid, const char *permission);
+
+int ModifyPermission(TNode *node, const char *permission, enum IsGranted granted);
+
+void AddTask(TList *list, TNode *node);
+
+void DeleteTask(TList *list, int uid);
+
+TNode *GetTaskWithUid(TList *list, int uid);
+
+TNode *GetTaskWithPkgName(TList *list, const char *pkgName);
+
+#endif // PERM_OPERATE_H
\ No newline at end of file
diff --git a/base/security/permission/services/permission_lite/pms/include/pms.h b/base/security/permission/services/permission_lite/pms/include/pms.h
new file mode 100644
index 00000000..9a770016
--- /dev/null
+++ b/base/security/permission/services/permission_lite/pms/include/pms.h
@@ -0,0 +1,62 @@
+/*
+ * Copyright (c) 2020~2021 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef PMS_PMS_H
+#define PMS_PMS_H
+
+#include "perm_define.h"
+
+#ifdef __cplusplus
+#if __cplusplus
+extern "C" {
+#endif
+#endif
+
+int SaveOrUpdatePermissions(const char *identifier, PermissionTrans permissions[], int permNum, enum IsUpdate isUpdate);
+
+int DeletePermissions(const char *identifier);
+
+int IsPermissionValid(const char *permissionName);
+
+int IsPermissionRestricted(const char *permissionName);
+
+int QueryAppCapabilities(const char *identifier, unsigned int **caps, unsigned int *capNum);
+
+int LoadPermissions(const char *identifier, int uid);
+
+int UnLoadPermissions(int uid);
+
+int CheckPermissionStat(int uid, const char *permissionName);
+
+char *QueryPermissionString(const char *identifier, int *errCode);
+
+int QueryPermission(const char *identifier, PermissionSaved **permissions, int *permNum);
+
+int GrantPermission(const char *identifier, const char *permName);
+
+int RevokePermission(const char *identifier, const char *permName);
+
+int GrantRuntimePermission(int uid, const char *permissionName);
+
+int RevokeRuntimePermission(int uid, const char *permissionName);
+
+int GetDevUdid(unsigned char *udid, int size);
+
+#ifdef __cplusplus
+#if __cplusplus
+}
+#endif
+#endif
+#endif // PMS_PMS_H
\ No newline at end of file
diff --git a/base/security/permission/services/permission_lite/pms/include/pms_inner.h b/base/security/permission/services/permission_lite/pms/include/pms_inner.h
new file mode 100644
index 00000000..080f9ad4
--- /dev/null
+++ b/base/security/permission/services/permission_lite/pms/include/pms_inner.h
@@ -0,0 +1,51 @@
+/*
+ * Copyright (c) 2020~2021 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef OHOS_IAM_PERMLITE_FEATURE_H
+#define OHOS_IAM_PERMLITE_FEATURE_H
+
+#include "feature.h"
+#include "iunknown.h"
+#include "pms_types.h"
+
+#ifdef __cplusplus
+#if __cplusplus
+extern "C" {
+#endif
+#endif
+
+typedef struct PmsInnerApi {
+    INHERIT_IUNKNOWN;
+    int (*CheckPermission)(int uid, const char *permissionName);
+    int (*QueryPermission)(const char *identifier, PermissionSaved **permissions, int *permNum);
+    int (*GrantPermission)(const char *identifier, const char *permName);
+    int (*RevokePermission)(const char *identifier, const char *permName);
+    int (*GrantRuntimePermission)(int uid, const char *permissionName);
+    int (*RevokeRuntimePermission)(int uid, const char *permissionName);
+    int (*GetDevUdid)(unsigned char *udid, int size);
+} PmsInnerApi;
+
+typedef struct PmsInner {
+    INHERIT_FEATURE;
+    INHERIT_IUNKNOWNENTRY(PmsInnerApi);
+    Identity identity;
+} PmsInner;
+
+#ifdef __cplusplus
+#if __cplusplus
+}
+#endif
+#endif
+#endif // OHOS_IAM_PERMLITE_FEATURE_H
\ No newline at end of file
diff --git a/base/security/permission/services/permission_lite/pms/src/perm_operate.c b/base/security/permission/services/permission_lite/pms/src/perm_operate.c
new file mode 100644
index 00000000..b98f6bdd
--- /dev/null
+++ b/base/security/permission/services/permission_lite/pms/src/perm_operate.c
@@ -0,0 +1,109 @@
+/*
+ * Copyright (c) 2020~2021 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "perm_operate.h"
+
+#include <string.h>
+
+#include "hal_pms.h"
+
+#define RET_OK 0
+#define RET_NOK (-1)
+
+int PermissionIsGranted(const TList *list, int uid, const char *permission)
+{
+    TNode *cur = list->head;
+    while (cur != NULL) {
+        if (cur->uid != uid) {
+            cur = cur->next;
+            continue;
+        }
+        for (int i = 0; i < cur->permNum; i++) {
+            if (strcmp(cur->permList[i].name, permission) == 0) {
+                return (int)cur->permList[i].granted;
+            }
+        }
+        return RET_NOK;
+    }
+    return RET_NOK;
+}
+
+int ModifyPermission(TNode *node, const char *permission, enum IsGranted granted)
+{
+    if (node == NULL) {
+        return RET_NOK;
+    }
+    for (int i = 0; i < node->permNum; i++) {
+        if (strcmp(node->permList[i].name, permission) == 0) {
+            node->permList[i].granted = granted;
+            return RET_OK;
+        }
+    }
+    return RET_NOK;
+}
+
+void AddTask(TList *list, TNode *node)
+{
+    if (list->head == NULL) {
+        list->head = node;
+    } else {
+        node->next = list->head;
+        list->head = node;
+    }
+}
+
+void DeleteTask(TList *list, int uid)
+{
+    TNode *cur = list->head;
+    TNode *pre = NULL;
+    while (cur != NULL) {
+        if (cur->uid == uid) {
+            if (pre == NULL) {
+                list->head =  cur->next;
+            } else {
+                pre->next = cur->next;
+            }
+            HalFree(cur->permList);
+            HalFree(cur);
+            return;
+        }
+        pre = cur;
+        cur = cur->next;
+    }
+}
+
+TNode *GetTaskWithUid(TList *list, int uid)
+{
+    TNode *cur = list->head;
+    while (cur != NULL) {
+        if (cur->uid == uid) {
+            return cur;
+        }
+        cur = cur->next;
+    }
+    return NULL;
+}
+
+TNode *GetTaskWithPkgName(TList *list, const char *pkgName)
+{
+    TNode *cur = list->head;
+    while (cur != NULL) {
+        if (strcmp(cur->pkgName, pkgName) == 0) {
+            return cur;
+        }
+        cur = cur->next;
+    }
+    return NULL;
+}
\ No newline at end of file
diff --git a/base/security/permission/services/permission_lite/pms/src/pms_impl.c b/base/security/permission/services/permission_lite/pms/src/pms_impl.c
new file mode 100644
index 00000000..d4ffcde7
--- /dev/null
+++ b/base/security/permission/services/permission_lite/pms/src/pms_impl.c
@@ -0,0 +1,669 @@
+/*
+ * Copyright (c) 2020~2021 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "pms.h"
+
+#include <fcntl.h>
+#include <sys/stat.h>
+#include <unistd.h>
+
+#include "cJSON.h"
+#include "log.h"
+#include "securec.h"
+
+#include "hal_pms.h"
+#include "perm_operate.h"
+
+#define P_NAME_MAXLEN 32
+#define BUFF_SIZE 1024
+#define FIELD_PERMISSION "permissions"
+#define FIELD_NAME "name"
+#define FIELD_DESC "desc"
+#define FIELD_IS_GRANTED "isGranted"
+
+// Permission matrix of run-time tasks
+static struct TaskList g_taskList = {
+    NULL
+};
+
+// don't forget free() afterwards
+static char *ConcatString(const char *s1, const char *s2)
+{
+    unsigned int allocSize = strlen(s1) + strlen(s2) + 1;
+    if (allocSize > BUFF_SIZE) {
+        return NULL;
+    }
+    char *rst = (char *) HalMalloc(allocSize);
+    if (rst == NULL) {
+        return NULL;
+    }
+    if (memset_s(rst, allocSize, 0x0, allocSize) != EOK) {
+        HalFree(rst);
+        return NULL;
+    }
+    if (strcpy_s(rst, allocSize, s1) != EOK) {
+        HalFree(rst);
+        return NULL;
+    }
+    if (strcat_s(rst, allocSize, s2) != EOK) {
+        HalFree(rst);
+        return NULL;
+    }
+    return rst;
+}
+
+static int WriteString(const char *path, const char *string)
+{
+    int fd = open(path, O_RDWR | O_CREAT | O_TRUNC, S_IRUSR | S_IWUSR);
+    if (fd < 0) {
+        return PERM_ERRORCODE_OPENFD_FAIL;
+    }
+    int stringLength = strlen(string);
+    int writtenLength = write(fd, (void*)string, stringLength);
+    close(fd);
+    if (writtenLength != stringLength) {
+        unlink(path);
+        return PERM_ERRORCODE_WRITEFD_FAIL;
+    }
+    return PERM_ERRORCODE_SUCCESS;
+}
+
+// don't forget to call free() afterwards
+static char *ReadString(const char *path, int *errCode)
+{
+    if (!HalIsValidPath(path)) {
+        *errCode = PERM_ERRORCODE_PATH_INVALID;
+        return NULL;
+    }
+    struct stat buf = { 0 };
+    if (stat(path, &buf) || (buf.st_size <= 0)) {
+        *errCode = PERM_ERRORCODE_STAT_FAIL;
+        return NULL;
+    }
+    unsigned int readSize = buf.st_size;
+    char *rst = (char *)HalMalloc(readSize);
+    if (rst == NULL) {
+        *errCode = PERM_ERRORCODE_MALLOC_FAIL;
+        return NULL;
+    }
+
+    if (memset_s(rst, readSize, 0x0, readSize) != EOK) {
+        HalFree(rst);
+        *errCode = PERM_ERRORCODE_MEMSET_FAIL;
+        return NULL;
+    }
+
+    int fd = open(path, O_RDONLY, S_IRUSR | S_IWUSR);
+    if (fd < 0) {
+        HalFree(rst);
+        *errCode = PERM_ERRORCODE_OPENFD_FAIL;
+        return NULL;
+    }
+
+    int ret = read(fd, rst, readSize);
+    close(fd);
+    if (ret < 0) {
+        HalFree(rst);
+        *errCode = PERM_ERRORCODE_READFD_FAIL;
+        return NULL;
+    }
+    return rst;
+}
+
+static char *GetPath(const char *identifier)
+{
+    return ConcatString(HalGetPermissionPath(), identifier);
+}
+
+static int GetPermissionType(const char *permission)
+{
+    unsigned int permSize = 0;
+    PermissionDef *permList = HalGetPermissionList(&permSize);
+
+    for (int i = 0; i < permSize; i++) {
+        if (strcmp(permission, permList[i].name) == 0) {
+            return permList[i].type;
+        }
+    }
+    return PERM_ERRORCODE_INVALID_PERMNAME;
+}
+
+static int ParsePermissions(const char *jsonStr, PermissionSaved **perms, int *permNum)
+{
+    cJSON *root = cJSON_Parse(jsonStr);
+    if (root == NULL) {
+        return PERM_ERRORCODE_JSONPARSE_FAIL;
+    }
+    cJSON *array = cJSON_GetObjectItem(root, FIELD_PERMISSION);
+    int pSize = cJSON_GetArraySize(array);
+    int allocSize = sizeof(PermissionSaved) * pSize;
+    if (allocSize == 0) {
+        cJSON_Delete(root);
+        return PERM_ERRORCODE_SUCCESS;
+    }
+    *perms = (PermissionSaved *) HalMalloc(allocSize);
+    if (*perms == NULL) {
+        cJSON_Delete(root);
+        return PERM_ERRORCODE_MALLOC_FAIL;
+    }
+    for (int i = 0; i < pSize; i++) {
+        cJSON *object = cJSON_GetArrayItem(array, i);
+        cJSON *itemName = cJSON_GetObjectItem(object, FIELD_NAME);
+        cJSON *itemDesc = cJSON_GetObjectItem(object, FIELD_DESC);
+        cJSON *itemGranted = cJSON_GetObjectItem(object, FIELD_IS_GRANTED);
+        if (itemName == NULL || itemDesc == NULL || itemGranted == NULL ||
+            !cJSON_IsString(itemName) || !cJSON_IsString(itemDesc)) {
+            cJSON_Delete(root);
+            HalFree(*perms);
+            *perms = NULL;
+            return PERM_ERRORCODE_JSONPARSE_FAIL;
+        }
+        if (strcpy_s((*perms + i)->name, PERM_NAME_LEN, itemName->valuestring) != EOK) {
+            cJSON_Delete(root);
+            HalFree(*perms);
+            *perms = NULL;
+            return PERM_ERRORCODE_COPY_ERROR;
+        }
+        if (strcpy_s((*perms + i)->desc, PERM_DESC_LEN, itemDesc->valuestring) != EOK) {
+            cJSON_Delete(root);
+            HalFree(*perms);
+            *perms = NULL;
+            return PERM_ERRORCODE_COPY_ERROR;
+        }
+        (*perms + i)->granted = (enum IsGranted) itemGranted->valueint;
+    }
+    *permNum = pSize;
+    cJSON_Delete(root);
+    return PERM_ERRORCODE_SUCCESS;
+}
+
+static int WritePermissions(const cJSON *root, const char *path)
+{
+    char *jsonStr = NULL;
+    jsonStr = cJSON_PrintUnformatted(root);
+    if (jsonStr == NULL) {
+        HalFree((void *)path);
+        cJSON_Delete((cJSON *)root);
+        return PERM_ERRORCODE_MALLOC_FAIL;
+    }
+    int ret = WriteString(path, jsonStr);
+    HalFree(jsonStr);
+    HalFree((void *)path);
+    cJSON_Delete((cJSON *)root);
+    return ret;
+}
+
+static int SavePermissions(const char *identifier, const PermissionSaved *permissions, int permNum)
+{
+    if (identifier == NULL || permissions == NULL) {
+        return PERM_ERRORCODE_INVALID_PARAMS;
+    }
+
+    cJSON *root = NULL;
+    cJSON *array = NULL;
+    char *path = NULL;
+    root = cJSON_CreateObject();
+    if (root == NULL) {
+        return PERM_ERRORCODE_MALLOC_FAIL;
+    }
+    array = cJSON_CreateArray();
+    if (array == NULL) {
+        cJSON_Delete(root);
+        return PERM_ERRORCODE_MALLOC_FAIL;
+    }
+    path = GetPath(identifier);
+    if (path == NULL) {
+        cJSON_Delete(array);
+        cJSON_Delete(root);
+        return PERM_ERRORCODE_MALLOC_FAIL;
+    }
+    for (int i = 0; i < permNum; i++) {
+        cJSON *object = cJSON_CreateObject();
+        if (object == NULL) {
+            HalFree(path);
+            cJSON_Delete(array);
+            cJSON_Delete(root);
+            return PERM_ERRORCODE_MALLOC_FAIL;
+        }
+        cJSON_AddItemToObject(object, FIELD_NAME, cJSON_CreateString(permissions[i].name));
+        cJSON_AddItemToObject(object, FIELD_DESC, cJSON_CreateString(permissions[i].desc));
+        cJSON_AddItemToObject(object, FIELD_IS_GRANTED, cJSON_CreateBool(permissions[i].granted));
+        cJSON_AddItemToArray(array, object);
+    }
+    cJSON_AddItemToObject(root, FIELD_PERMISSION, array);
+    return WritePermissions(root, path);
+}
+
+char *QueryPermissionString(const char *identifier, int *errCode)
+{
+    if (identifier == NULL) {
+        *errCode = PERM_ERRORCODE_INVALID_PARAMS;
+        return NULL;
+    }
+
+    int ret;
+    char *path = NULL;
+    char *jsonStr = NULL;
+
+    path = GetPath(identifier);
+    if (path == NULL) {
+        *errCode = PERM_ERRORCODE_MALLOC_FAIL;
+        return NULL;
+    }
+    ret = HalAccess(path);
+    if (ret) {
+        HalFree(path);
+        *errCode = PERM_ERRORCODE_FILE_NOT_EXIST;
+        return NULL;
+    }
+
+    jsonStr = ReadString(path, errCode);
+    HalFree(path);
+    return jsonStr;
+}
+
+int QueryPermission(const char *identifier, PermissionSaved **permissions, int *permNum)
+{
+    int errCode = 0;
+    char *jsonStr = QueryPermissionString(identifier, &errCode);
+    if (errCode) {
+        return errCode;
+    }
+
+    int ret = ParsePermissions(jsonStr, permissions, permNum);
+    HalFree(jsonStr);
+    return ret;
+}
+
+int QueryAppCapabilities(const char *identifier, unsigned int **caps, unsigned int *capNum)
+{
+    if (caps == NULL || capNum == NULL) {
+        return PERM_ERRORCODE_INVALID_PARAMS;
+    }
+    PermissionSaved *permissions = NULL;
+    int permNum = 0;
+    int ret = QueryPermission(identifier, &permissions, &permNum);
+    if (ret != PERM_ERRORCODE_SUCCESS) {
+        return ret;
+    }
+    unsigned int allocSize = sizeof(unsigned int) * permNum;
+    if (allocSize == 0) {
+        HalFree(permissions);
+        return PERM_ERRORCODE_SUCCESS;
+    }
+    unsigned int *capsBinded = (unsigned int *) HalMalloc(allocSize);
+    if (capsBinded == NULL) {
+        HalFree(permissions);
+        return PERM_ERRORCODE_MALLOC_FAIL;
+    }
+
+    unsigned int permSize = 0;
+    PermissionDef *permList = HalGetPermissionList(&permSize);
+    unsigned int index = 0;
+    for (int j = 0; j < permNum; j++) {
+        for (int i = 0; i < permSize; i++) {
+            if (strcmp(permissions[j].name, permList[i].name) || permList[i].cap == CAP_NOT_BINDED) {
+                continue;
+            }
+            capsBinded[index] = permList[i].cap;
+            index++;
+            break;
+        }
+    }
+    HalFree(permissions);
+    allocSize = sizeof(unsigned int) * index;
+    if (allocSize == 0) {
+        HalFree(capsBinded);
+        return PERM_ERRORCODE_SUCCESS;
+    }
+    *caps = (unsigned int *)HalMalloc(allocSize);
+    if (*caps == NULL) {
+        HalFree(capsBinded);
+        return PERM_ERRORCODE_MALLOC_FAIL;
+    }
+    for (int k = 0; k < index; k++) {
+        *(*caps + k) = capsBinded[k];
+    }
+    *capNum = index;
+    HalFree(capsBinded);
+    return PERM_ERRORCODE_SUCCESS;
+}
+
+static int UpdateAppPermission(
+    const char *identifier, const PermissionTrans newPerms[], int newPermNum, enum IsUpdate isUpdate)
+{
+    PermissionSaved *permissions = NULL;
+    int permNum = 0;
+    int retCode = PERM_ERRORCODE_SUCCESS;
+    if (isUpdate == UPDATE) {
+        retCode = QueryPermission(identifier, &permissions, &permNum);
+    }
+    if ((retCode != PERM_ERRORCODE_SUCCESS) && (retCode != PERM_ERRORCODE_FILE_NOT_EXIST)) {
+        return retCode;
+    }
+    int allocSize = sizeof(PermissionSaved) * newPermNum;
+    PermissionSaved *updatePerms = (PermissionSaved *) HalMalloc(allocSize);
+    if (updatePerms == NULL) {
+        HalFree(permissions);
+        return PERM_ERRORCODE_MALLOC_FAIL;
+    }
+    for (int i = 0; i < newPermNum; i++) {
+        if (strlen(newPerms[i].name) > PERM_NAME_LEN - 1 || strlen(newPerms[i].desc) > PERM_DESC_LEN - 1) {
+            HalFree(updatePerms);
+            HalFree(permissions);
+            return PERM_ERRORCODE_FIELD_TOO_LONG;
+        }
+        if (strcpy_s(updatePerms[i].name, PERM_NAME_LEN, newPerms[i].name) != EOK) {
+            HalFree(updatePerms);
+            HalFree(permissions);
+            return PERM_ERRORCODE_COPY_ERROR;
+        }
+        if (strcpy_s(updatePerms[i].desc, PERM_DESC_LEN, newPerms[i].desc) != EOK) {
+            HalFree(updatePerms);
+            HalFree(permissions);
+            return PERM_ERRORCODE_COPY_ERROR;
+        }
+        int permType = GetPermissionType(newPerms[i].name);
+        updatePerms[i].granted = NOT_GRANTED;
+        if (permType != PERM_ERRORCODE_INVALID_PERMNAME) {
+            updatePerms[i].granted = (permType == SYSTEM_GRANT) ? GRANTED : NOT_GRANTED;
+        }
+        for (int j = 0; j < permNum; j++) {
+            if (strcmp(newPerms[i].name, (permissions + j)->name) == 0) {
+                updatePerms[i].granted = permissions[j].granted;
+            }
+        }
+    }
+    retCode = SavePermissions(identifier, updatePerms, newPermNum);
+    HalFree(updatePerms);
+    HalFree(permissions);
+    return retCode;
+}
+
+int SaveOrUpdatePermissions(
+    const char *identifier, PermissionTrans permissions[], int permNum, enum IsUpdate isUpdate)
+{
+    if ((identifier == NULL) || (permissions == NULL) || (permNum < 0) ||
+        (isUpdate != UPDATE && isUpdate != FIRST_INSTALL)) {
+        return PERM_ERRORCODE_INVALID_PARAMS;
+    }
+    if (permNum > HalGetMaxPermissionSize()) {
+        return PERM_ERRORCODE_TOO_MUCH_PERM;
+    }
+    char *path = GetPath(identifier);
+    if (path == NULL) {
+        return PERM_ERRORCODE_MALLOC_FAIL;
+    }
+    if (permNum == 0) {
+        unlink(path);
+        HalFree(path);
+        return PERM_ERRORCODE_SUCCESS;
+    }
+    HalFree(path);
+
+    int distinctNum = 0;
+    int *flag = (int *)HalMalloc(permNum * sizeof(int));
+    if (flag == NULL) {
+        return PERM_ERRORCODE_MALLOC_FAIL;
+    }
+    (void)memset_s(flag, permNum * sizeof(int), 0, permNum * sizeof(int));
+    for (int i = 0; i < permNum; i++) {
+        if (flag[i] != 0) {
+            continue;
+        }
+        permissions[distinctNum++] = permissions[i];
+        for (int j = i + 1; j < permNum; j++) {
+            if (strcmp(permissions[i].name, permissions[j].name) == 0) {
+                flag[j] = 1;
+            }
+        }
+    }
+    HalFree(flag);
+
+    return UpdateAppPermission(identifier, permissions, distinctNum, isUpdate);
+}
+
+int DeletePermissions(const char *identifier)
+{
+    if (identifier == NULL) {
+        return PERM_ERRORCODE_INVALID_PARAMS;
+    }
+    int ret;
+    char *path = NULL;
+    path = GetPath(identifier);
+    if (path == NULL) {
+        return PERM_ERRORCODE_MALLOC_FAIL;
+    }
+
+    ret = HalAccess(path);
+    if (ret != 0) {
+        HalFree(path);
+        return PERM_ERRORCODE_SUCCESS;
+    }
+
+    ret = unlink(path);
+    HalFree(path);
+    return (ret != 0) ? PERM_ERRORCODE_UNLINK_ERROR : PERM_ERRORCODE_SUCCESS;
+}
+
+int IsPermissionValid(const char *permissionName)
+{
+    unsigned int permSize = 0;
+    PermissionDef *permList = HalGetPermissionList(&permSize);
+
+    for (int i = 0; i < permSize; i++) {
+        if (strcmp(permissionName, permList[i].name) == 0) {
+            return PERM_ERRORCODE_SUCCESS;
+        }
+    }
+    return PERM_ERRORCODE_INVALID_PERMNAME;
+}
+
+int IsPermissionRestricted(const char *permissionName)
+{
+    unsigned int permSize = 0;
+    PermissionDef *permList = HalGetPermissionList(&permSize);
+
+    for (int i = 0; i < permSize; i++) {
+        if (strcmp(permissionName, permList[i].name) == 0) {
+            return permList[i].isRestricted;
+        }
+    }
+    return PERM_ERRORCODE_INVALID_PERMNAME;
+}
+
+int LoadPermissions(const char *identifier, int uid)
+{
+    if (uid < 0 || identifier == NULL) {
+        return PERM_ERRORCODE_INVALID_PARAMS;
+    }
+
+    HalMutexLock();
+    TNode *task = GetTaskWithUid(&g_taskList, uid);
+    if (task != NULL) {
+        HalMutexUnlock();
+        return PERM_ERRORCODE_SUCCESS;
+    }
+
+    PermissionSaved *permissions = NULL;
+    int permNum = 0;
+    int ret = QueryPermission(identifier, &permissions, &permNum);
+    if (ret == PERM_ERRORCODE_FILE_NOT_EXIST) {
+        HILOG_ERROR(HILOG_MODULE_APP, "Perm file not exists.");
+        HalMutexUnlock();
+        return PERM_ERRORCODE_SUCCESS;
+    }
+    if (ret != PERM_ERRORCODE_SUCCESS) {
+        HalMutexUnlock();
+        return ret;
+    }
+    TNode *node = (TNode *) HalMalloc(sizeof(TNode));
+    if (node == NULL) {
+        HalFree(permissions);
+        HalMutexUnlock();
+        return PERM_ERRORCODE_MALLOC_FAIL;
+    }
+    node->uid = uid;
+    if (strcpy_s(node->pkgName, PKG_NAME_LEN, identifier) != EOK) {
+        HalFree(permissions);
+        HalFree(node);
+        HalMutexUnlock();
+        return PERM_ERRORCODE_COPY_ERROR;
+    }
+    node->permList = permissions;
+    node->permNum = permNum;
+    node->next = NULL;
+
+    AddTask(&g_taskList, node);
+    HalMutexUnlock();
+
+    return PERM_ERRORCODE_SUCCESS;
+}
+
+int UnLoadPermissions(int uid)
+{
+    HalMutexLock();
+    DeleteTask(&g_taskList, uid);
+    HalMutexUnlock();
+    return PERM_ERRORCODE_SUCCESS;
+}
+
+int CheckPermissionStat(int uid, const char *permissionName)
+{
+    if (uid < 0 || permissionName == NULL) {
+        return PERM_ERRORCODE_INVALID_PARAMS;
+    }
+    HalMutexLock();
+    int ret = PermissionIsGranted(&g_taskList, uid, permissionName);
+    HalMutexUnlock();
+    return ret;
+}
+
+static int OnPermissionFileSync(const char *identifier, const char *permName, enum IsGranted isGranted)
+{
+    int retCode = PERM_ERRORCODE_SUCCESS;
+    bool isSave = false;
+    PermissionSaved *permissions = NULL;
+    int permNum = 0;
+    int ret = QueryPermission(identifier, &permissions, &permNum);
+    if (ret != PERM_ERRORCODE_SUCCESS) {
+        return ret;
+    }
+    for (int i = 0; i < permNum; i++) {
+        if (strcmp(permissions[i].name, permName) == 0) {
+            isSave = permissions[i].granted ^ isGranted;
+            permissions[i].granted = isGranted;
+            break;
+        }
+    }
+    if (isSave) {
+        retCode = SavePermissions(identifier, permissions, permNum);
+    }
+    HalFree(permissions);
+    return retCode;
+}
+
+int GrantPermission(const char *identifier, const char *permName)
+{
+    if ((identifier == NULL) || (permName == NULL)) {
+        return PERM_ERRORCODE_INVALID_PARAMS;
+    }
+    int ret = PERM_ERRORCODE_SUCCESS;
+    HalMutexLock();
+    TNode *node = GetTaskWithPkgName(&g_taskList, identifier);
+    if (node != NULL) {
+        ret = ModifyPermission(node, permName, GRANTED);
+    }
+    HalMutexUnlock();
+
+    if (ret != 0) {
+        return PERM_ERRORCODE_PERM_NOT_EXIST;
+    }
+
+    return OnPermissionFileSync(identifier, permName, GRANTED);
+}
+
+int RevokePermission(const char *identifier, const char *permName)
+{
+    if ((identifier == NULL) || (permName == NULL)) {
+        return PERM_ERRORCODE_INVALID_PARAMS;
+    }
+    int ret = PERM_ERRORCODE_SUCCESS;
+    HalMutexLock();
+    TNode *node = GetTaskWithPkgName(&g_taskList, identifier);
+    if (node != NULL) {
+        ret = ModifyPermission(node, permName, NOT_GRANTED);
+    }
+    HalMutexUnlock();
+
+    if (ret != 0) {
+        return PERM_ERRORCODE_PERM_NOT_EXIST;
+    }
+
+    return OnPermissionFileSync(identifier, permName, NOT_GRANTED);
+}
+
+int GrantRuntimePermission(int uid, const char *permissionName)
+{
+    if (permissionName == NULL) {
+        return PERM_ERRORCODE_INVALID_PARAMS;
+    }
+    HalMutexLock();
+    TNode *node = GetTaskWithUid(&g_taskList, uid);
+    if (node == NULL) {
+        HalMutexUnlock();
+        return PERM_ERRORCODE_TASKID_NOT_EXIST;
+    }
+
+    int ret = ModifyPermission(node, permissionName, GRANTED);
+    HalMutexUnlock();
+    if (ret < 0) {
+        return PERM_ERRORCODE_PERM_NOT_EXIST;
+    }
+
+    return OnPermissionFileSync(node->pkgName, permissionName, GRANTED);
+}
+
+int RevokeRuntimePermission(int uid, const char *permissionName)
+{
+    if (permissionName == NULL) {
+        return PERM_ERRORCODE_INVALID_PARAMS;
+    }
+    HalMutexLock();
+    TNode *node = GetTaskWithUid(&g_taskList, uid);
+    if (node == NULL) {
+        HalMutexUnlock();
+        return PERM_ERRORCODE_TASKID_NOT_EXIST;
+    }
+
+    int ret = ModifyPermission(node, permissionName, NOT_GRANTED);
+    HalMutexUnlock();
+    if (ret < 0) {
+        return PERM_ERRORCODE_PERM_NOT_EXIST;
+    }
+
+    return OnPermissionFileSync(node->pkgName, permissionName, NOT_GRANTED);
+}
+
+int GetDevUdid(unsigned char *udid, int size)
+{
+    if (size != (UDID_FINAL_BYTES + 1) || udid == NULL) {
+        HILOG_ERROR(HILOG_MODULE_APP, "Invalid hash size or buffer of udid!");
+        return PERM_ERRORCODE_INVALID_PARAMS;
+    }
+
+    return HalGetDevUdid(udid, size);
+}
+
diff --git a/base/security/permission/services/permission_lite/pms/src/pms_inner.c b/base/security/permission/services/permission_lite/pms/src/pms_inner.c
new file mode 100644
index 00000000..eda5dd81
--- /dev/null
+++ b/base/security/permission/services/permission_lite/pms/src/pms_inner.c
@@ -0,0 +1,88 @@
+/*
+ * Copyright (c) 2020~2021 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "pms_inner.h"
+
+#include <ohos_init.h>
+
+#include "feature.h"
+#include "log.h"
+#include "samgr_lite.h"
+#include "service.h"
+
+#include "pms.h"
+#include "pms_common.h"
+
+static void Init();
+static const char *GetName(Feature *feature);
+static void OnInitialize(Feature *feature, Service *parent, Identity identity);
+static void OnStop(Feature *feature, Identity identity);
+static BOOL OnMessage(Feature *feature, Request *request);
+
+static PmsInner g_permlite = {
+    .GetName = GetName,
+    .OnInitialize = OnInitialize,
+    .OnStop = OnStop,
+    .OnMessage = OnMessage,
+    DEFAULT_IUNKNOWN_ENTRY_BEGIN,
+    .CheckPermission = CheckPermissionStat,
+    .QueryPermission = QueryPermission,
+    .GrantPermission = GrantPermission,
+    .RevokePermission = RevokePermission,
+    .GrantRuntimePermission = GrantRuntimePermission,
+    .RevokeRuntimePermission = RevokeRuntimePermission,
+    .GetDevUdid = GetDevUdid,
+    DEFAULT_IUNKNOWN_ENTRY_END,
+    .identity = {-1, -1, NULL},
+};
+
+static void Init()
+{
+    SAMGR_GetInstance()->RegisterFeature(PERMISSION_SERVICE, (Feature *)&g_permlite);
+    SAMGR_GetInstance()->RegisterFeatureApi(PERMISSION_SERVICE, PERM_INNER, GET_IUNKNOWN(g_permlite));
+    HILOG_INFO(HILOG_MODULE_APP, "Init pms inner feature success");
+}
+APP_FEATURE_INIT(Init);
+
+static const char *GetName(Feature *feature)
+{
+    (void)feature;
+    return PERM_INNER;
+}
+
+static void OnInitialize(Feature *feature, Service *parent, Identity identity)
+{
+    (void)parent;
+    if (feature == NULL) {
+        return;
+    }
+    PmsInner *permlite = (PmsInner *)feature;
+    permlite->identity = identity;
+}
+
+static void OnStop(Feature *feature, Identity identity)
+{
+    (void)feature;
+    (void)identity;
+}
+
+static BOOL OnMessage(Feature *feature, Request *request)
+{
+    if (feature == NULL || request == NULL) {
+        return FALSE;
+    }
+    // call func
+    return TRUE;
+}
\ No newline at end of file
diff --git a/base/security/permission/services/permission_lite/pms/src/pms_server.c b/base/security/permission/services/permission_lite/pms/src/pms_server.c
new file mode 100644
index 00000000..e0d92f4e
--- /dev/null
+++ b/base/security/permission/services/permission_lite/pms/src/pms_server.c
@@ -0,0 +1,175 @@
+/*
+ * Copyright (c) 2020~2021 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include <ohos_errno.h>
+#include <ohos_init.h>
+#include <pthread.h>
+#include <string.h>
+
+#include "feature.h"
+#include "iproxy_client.h"
+#include "iproxy_server.h"
+#include "iunknown.h"
+#include "liteipc_adapter.h"
+#include "log.h"
+
+#include "pms.h"
+#include "pms_common.h"
+#include "pms_types.h"
+#include "samgr_lite.h"
+#include "service.h"
+
+typedef struct PermLiteApi {
+    INHERIT_SERVER_IPROXY;
+    int (*CheckPermission)(int uid, const char *permissionName);
+    int (*QueryPermission)(const char *identifier, PermissionSaved **permissions, int *permNum);
+} PermLiteApi;
+
+typedef struct PermLite {
+    INHERIT_FEATURE;
+    INHERIT_IUNKNOWNENTRY(PermLiteApi);
+    Identity identity;
+} PermLite;
+
+enum FUNCID {
+    ID_CHECK_SELF = 0,
+    ID_QUERY,
+};
+
+static void Init();
+static const char *GetName(Feature *feature);
+static void OnInitialize(Feature *feature, Service *parent, Identity identity);
+static void OnStop(Feature *feature, Identity identity);
+static BOOL OnMessage(Feature *feature, Request *request);
+static int32 Invoke(IServerProxy *iProxy, int funcId, void *origin, IpcIo *req, IpcIo *reply);
+
+static PermLite g_permlite = {
+    .GetName = GetName,
+    .OnInitialize = OnInitialize,
+    .OnStop = OnStop,
+    .OnMessage = OnMessage,
+    SERVER_IPROXY_IMPL_BEGIN,
+    .Invoke = Invoke,
+    .CheckPermission = CheckPermissionStat,
+    .QueryPermission = QueryPermission,
+    IPROXY_END,
+    .identity = {-1, -1, NULL},
+};
+
+static void Init()
+{
+    SAMGR_GetInstance()->RegisterFeature(PERMISSION_SERVICE, (Feature *)&g_permlite);
+    SAMGR_GetInstance()->RegisterFeatureApi(PERMISSION_SERVICE, PERM_FEATURE, GET_IUNKNOWN(g_permlite));
+    HILOG_INFO(HILOG_MODULE_APP, "Init pms lite feature success");
+}
+APP_FEATURE_INIT(Init);
+
+static const char *GetName(Feature *feature)
+{
+    (void)feature;
+    return PERM_FEATURE;
+}
+
+static void OnInitialize(Feature *feature, Service *parent, Identity identity)
+{
+    (void)parent;
+    if (feature == NULL) {
+        return;
+    }
+    PermLite *permlite = (PermLite *)feature;
+    permlite->identity = identity;
+    HILOG_INFO(HILOG_MODULE_APP, "onInitialize pms lite feature");
+}
+
+static void OnStop(Feature *feature, Identity identity)
+{
+    (void)feature;
+    (void)identity;
+}
+
+static BOOL OnMessage(Feature *feature, Request *request)
+{
+    if (feature == NULL || request == NULL) {
+        return FALSE;
+    }
+    // call func
+    return TRUE;
+}
+
+void static InnerFreeDataBuff(void *ptr)
+{
+    if (ptr != NULL) {
+        free(ptr);
+    }
+}
+
+static void ReplyCheckSelfPermission(const void *origin, IpcIo *req, IpcIo *reply, PermLiteApi* api)
+{
+    pid_t callingPid = GetCallingPid(origin);
+    uid_t callingUid = GetCallingUid(origin);
+    HILOG_INFO(HILOG_MODULE_APP, "Enter ID_CHECKSELF, [callerPid: %d][callerUid: %u]", callingPid, callingUid);
+
+    size_t permLen = 0;
+    char *permName = (char *)IpcIoPopString(req, &permLen);
+    int32_t ret = api->CheckPermission(callingUid, permName);
+    HILOG_INFO(HILOG_MODULE_APP, "check self permission, [uid: %u][perm: %s][ret: %d]", callingUid, permName, ret);
+    IpcIoPushInt32(reply, ret);
+}
+
+static void ReplyQueryPermission(const void *origin, IpcIo *req, IpcIo *reply)
+{
+    pid_t callingPid = GetCallingPid(origin);
+    uid_t callingUid = GetCallingUid(origin);
+    HILOG_INFO(HILOG_MODULE_APP, "Enter ID_Query, [callerPid: %d][callerUid: %u]", callingPid, callingUid);
+    size_t idLen = 0;
+    int ret = 0;
+    char *identifier = (char *)IpcIoPopString(req, &idLen);
+    char *jsonStr = QueryPermissionString(identifier, &ret);
+    if (jsonStr == NULL) {
+        return;
+    }
+
+    IpcIoPushInt32(reply, ret);
+    if (ret != PERM_ERRORCODE_SUCCESS) {
+        free(jsonStr);
+        return;
+    }
+#ifndef __LINUX__
+    BuffPtr dataBuff = {
+        .buffSz = strlen(jsonStr) + 1,
+        .buff = (char *)jsonStr,
+    };
+    IpcIoPushDataBuffWithFree(reply, &dataBuff, InnerFreeDataBuff);
+#else
+    IpcIoPushString(reply, jsonStr);
+    free(jsonStr);
+#endif
+}
+
+static int32 Invoke(IServerProxy *iProxy, int funcId, void *origin, IpcIo *req, IpcIo *reply)
+{
+    PermLiteApi *api = (PermLiteApi *)iProxy;
+    switch (funcId) {
+        case ID_CHECK_SELF:
+            ReplyCheckSelfPermission(origin, req, reply, api);
+            break;
+        case ID_QUERY:
+            ReplyQueryPermission(origin, req, reply);
+            break;
+        default:
+            break;
+    }
+    return EC_SUCCESS;
+}
diff --git a/base/security/permission/services/permission_lite/pms/src/pms_server_internal.c b/base/security/permission/services/permission_lite/pms/src/pms_server_internal.c
new file mode 100644
index 00000000..501c36ab
--- /dev/null
+++ b/base/security/permission/services/permission_lite/pms/src/pms_server_internal.c
@@ -0,0 +1,231 @@
+/*
+ * Copyright (c) 2020~2021 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include <ohos_errno.h>
+#include <ohos_init.h>
+#include <pthread.h>
+#include <string.h>
+
+#include "log.h"
+
+#include "feature.h"
+#include "iproxy_client.h"
+#include "iproxy_server.h"
+#include "iunknown.h"
+#include "liteipc_adapter.h"
+#include "samgr_lite.h"
+#include "service.h"
+
+#include "pms.h"
+#include "pms_common.h"
+#include "pms_types.h"
+
+typedef struct InnerPermLiteApi {
+    INHERIT_SERVER_IPROXY;
+    int (*CheckPermission)(int uid, const char *permissionName);
+    int (*GrantPermission)(const char *identifier, const char *permName);
+    int (*RevokePermission)(const char *identifier, const char *permName);
+    int (*GrantRuntimePermission)(int uid, const char *permissionName);
+    int (*RevokeRuntimePermission)(int uid, const char *permissionName);
+    int (*GetDevUdid)(unsigned char *udid, int size);
+} InnerPermLiteApi;
+
+typedef struct InnerPermLite {
+    INHERIT_FEATURE;
+    INHERIT_IUNKNOWNENTRY(InnerPermLiteApi);
+    Identity identity;
+} InnerPermLite;
+
+enum INNERFUNCID {
+    ID_CHECK = 10,
+    ID_GRANT,
+    ID_REVOKE,
+    ID_GRANT_RUNTIME,
+    ID_REVOKE_RUNTIME,
+    ID_GET_UDID
+};
+
+static void Init();
+static const char *GetName(Feature *feature);
+static void OnInitialize(Feature *feature, Service *parent, Identity identity);
+static void OnStop(Feature *feature, Identity identity);
+static BOOL OnMessage(Feature *feature, Request *request);
+static int32 Invoke(IServerProxy *iProxy, int funcId, void *origin, IpcIo *req, IpcIo *reply);
+
+static InnerPermLite g_permlite = {
+    .GetName = GetName,
+    .OnInitialize = OnInitialize,
+    .OnStop = OnStop,
+    .OnMessage = OnMessage,
+    SERVER_IPROXY_IMPL_BEGIN,
+    .Invoke = Invoke,
+    .CheckPermission = CheckPermissionStat,
+    .GrantPermission = GrantPermission,
+    .RevokePermission = RevokePermission,
+    .GrantRuntimePermission = GrantRuntimePermission,
+    .RevokeRuntimePermission = RevokeRuntimePermission,
+    .GetDevUdid = GetDevUdid,
+    IPROXY_END,
+    .identity = {-1, -1, NULL},
+};
+
+static void Init()
+{
+    SAMGR_GetInstance()->RegisterFeature(PERMISSION_SERVICE, (Feature *)&g_permlite);
+    SAMGR_GetInstance()->RegisterFeatureApi(PERMISSION_SERVICE, PERM_INNER_FEATURE, GET_IUNKNOWN(g_permlite));
+    HILOG_INFO(HILOG_MODULE_APP, "Init pms lite inner feature success");
+}
+APP_FEATURE_INIT(Init);
+
+static const char *GetName(Feature *feature)
+{
+    (void)feature;
+    return PERM_INNER_FEATURE;
+}
+
+static void OnInitialize(Feature *feature, Service *parent, Identity identity)
+{
+    (void)parent;
+    if (feature == NULL) {
+        return;
+    }
+    InnerPermLite *permlite = (InnerPermLite *)feature;
+    permlite->identity = identity;
+    HILOG_INFO(HILOG_MODULE_APP, "onInitialize pms lite inner feature");
+}
+
+static void OnStop(Feature *feature, Identity identity)
+{
+    (void)feature;
+    (void)identity;
+}
+
+static BOOL OnMessage(Feature *feature, Request *request)
+{
+    if (feature == NULL || request == NULL) {
+        return FALSE;
+    }
+    // call func
+    return TRUE;
+}
+
+static void ReplyCheckPermission(const void *origin, IpcIo *req, IpcIo *reply, InnerPermLiteApi* api)
+{
+    pid_t callingPid = GetCallingPid(origin);
+    uid_t callingUid = GetCallingUid(origin);
+    HILOG_INFO(HILOG_MODULE_APP, "Enter ID_CHECK, [callerPid: %d][callerUid: %u]", callingPid, callingUid);
+
+    size_t permLen = 0;
+    int64_t uid = IpcIoPopInt64(req);
+    char *permName = (char *)IpcIoPopString(req, &permLen);
+    int32_t ret = api->CheckPermission(uid, permName);
+    HILOG_INFO(HILOG_MODULE_APP, "check permission, [uid: %lld][perm: %s][ret: %d]", uid, permName, ret);
+    IpcIoPushInt32(reply, ret);
+}
+
+static void ReplyGrantPermission(const void *origin, IpcIo *req, IpcIo *reply, InnerPermLiteApi* api)
+{
+    pid_t callingPid = GetCallingPid(origin);
+    uid_t callingUid = GetCallingUid(origin);
+    HILOG_INFO(HILOG_MODULE_APP, "Enter ID_GRANT, [callerPid: %d][callerUid: %u]", callingPid, callingUid);
+    size_t permLen = 0;
+    size_t idLen = 0;
+    char *identifier = (char *)IpcIoPopString(req, &idLen);
+    char *permName = (char *)IpcIoPopString(req, &permLen);
+    int32_t ret = api->GrantPermission(identifier, permName);
+    HILOG_INFO(HILOG_MODULE_APP, "grant permission, [id: %s][perm: %s][ret: %d]", identifier, permName, ret);
+    IpcIoPushInt32(reply, ret);
+}
+
+static void ReplyRevokePermission(const void *origin, IpcIo *req, IpcIo *reply, InnerPermLiteApi* api)
+{
+    pid_t callingPid = GetCallingPid(origin);
+    uid_t callingUid = GetCallingUid(origin);
+    HILOG_INFO(HILOG_MODULE_APP, "Enter ID_REVOKE, [callerPid: %d][callerUid: %u]", callingPid, callingUid);
+    size_t permLen = 0;
+    size_t idLen = 0;
+    char *identifier = (char *)IpcIoPopString(req, &idLen);
+    char *permName = (char *)IpcIoPopString(req, &permLen);
+    int32_t ret = api->RevokePermission(identifier, permName);
+    HILOG_INFO(HILOG_MODULE_APP, "revoke permission, [id: %s][perm: %s][ret: %d]", identifier, permName, ret);
+    IpcIoPushInt32(reply, ret);
+}
+
+static void ReplyGrantRuntimePermission(const void *origin, IpcIo *req, IpcIo *reply, InnerPermLiteApi* api)
+{
+    pid_t callingPid = GetCallingPid(origin);
+    uid_t callingUid = GetCallingUid(origin);
+    HILOG_INFO(HILOG_MODULE_APP, "Enter ID_GRANTRUNTIME, [callerPid: %d][callerUid: %u]", callingPid, callingUid);
+    size_t permLen = 0;
+    int64_t uid = IpcIoPopInt64(req);
+    char *permName = (char *)IpcIoPopString(req, &permLen);
+    int32_t ret = api->GrantRuntimePermission(uid, permName);
+    HILOG_INFO(HILOG_MODULE_APP, "grant runtime permission, [uid: %lld][perm: %s][ret: %d]", uid, permName, ret);
+    IpcIoPushInt32(reply, ret);
+}
+
+static void ReplyRevokeRuntimePermission(const void *origin, IpcIo *req, IpcIo *reply, InnerPermLiteApi* api)
+{
+    pid_t callingPid = GetCallingPid(origin);
+    uid_t callingUid = GetCallingUid(origin);
+    HILOG_INFO(HILOG_MODULE_APP, "Enter ID_REVOKERUNTIME, [callerPid: %d][callerUid: %u]", callingPid, callingUid);
+    size_t permLen = 0;
+    int64_t uid = IpcIoPopInt64(req);
+    char *permName = (char *)IpcIoPopString(req, &permLen);
+    int32_t ret = api->RevokeRuntimePermission(uid, permName);
+    HILOG_INFO(HILOG_MODULE_APP, "revoke runtime permission, [uid: %lld][perm: %s][ret: %d]", uid, permName, ret);
+    IpcIoPushInt32(reply, ret);
+}
+
+static void ReplyGetDevUdid(const void *origin, IpcIo *req, IpcIo *reply, InnerPermLiteApi* api)
+{
+    pid_t callingPid = GetCallingPid(origin);
+    uid_t callingUid = GetCallingUid(origin);
+    HILOG_INFO(HILOG_MODULE_APP, "Enter ID_GET_UDID, [callerPid: %d][callerUid: %u]", callingPid, callingUid);
+    int size = IpcIoPopInt32(req);
+    unsigned char udid[UDID_FINAL_BYTES + 1] = {0};
+    int32_t ret = api->GetDevUdid(udid, size);
+    HILOG_INFO(HILOG_MODULE_APP, "get device udid");
+    IpcIoPushInt32(reply, ret);
+    IpcIoPushInt32(reply, (UDID_FINAL_BYTES + 1));
+    IpcIoPushString(reply, (const char *)udid);
+}
+static int32 Invoke(IServerProxy *iProxy, int funcId, void *origin, IpcIo *req, IpcIo *reply)
+{
+    InnerPermLiteApi *api = (InnerPermLiteApi *)iProxy;
+    switch (funcId) {
+        case ID_CHECK:
+            ReplyCheckPermission(origin, req, reply, api);
+            break;
+        case ID_GRANT:
+            ReplyGrantPermission(origin, req, reply, api);
+            break;
+        case ID_REVOKE:
+            ReplyRevokePermission(origin, req, reply, api);
+            break;
+        case ID_GRANT_RUNTIME:
+            ReplyGrantRuntimePermission(origin, req, reply, api);
+            break;
+        case ID_REVOKE_RUNTIME:
+            ReplyRevokeRuntimePermission(origin, req, reply, api);
+            break;
+        case ID_GET_UDID:
+            ReplyGetDevUdid(origin, req, reply, api);
+            break;
+        default:
+            break;
+    }
+    return EC_SUCCESS;
+}
diff --git a/base/security/permission/services/permission_lite/pms_base/BUILD.gn b/base/security/permission/services/permission_lite/pms_base/BUILD.gn
new file mode 100644
index 00000000..19d08ff3
--- /dev/null
+++ b/base/security/permission/services/permission_lite/pms_base/BUILD.gn
@@ -0,0 +1,40 @@
+# Copyright (c) 2020 Huawei Device Co., Ltd.
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+import("//build/lite/config/component/lite_component.gni")
+
+lite_library("pms_base") {
+  target_type = "shared_library"
+  sources = [ "//base/security/permission/services/permission_lite/pms_base/src/permission_service.c" ]
+  include_dirs = [
+    "//base/security/permission/services/permission_lite/pms_base/include",
+    "//foundation/distributedschedule/samgr_lite/interfaces/kits/registry",
+    "//foundation/distributedschedule/samgr_lite/interfaces/kits/samgr",
+    "//utils/native/lite/include",
+  ]
+
+  deps = [
+    "//base/hiviewdfx/hilog_lite/frameworks/featured:hilog_shared",
+    "//foundation/communication/ipc_lite:liteipc_adapter",
+    "//foundation/distributedschedule/samgr_lite/samgr:samgr",
+  ]
+
+  if (ohos_kernel_type == "liteos_a") {
+    include_dirs += [
+      "//kernel/liteos_a/kernel/include",
+      "//kernel/liteos_a/kernel/common",
+    ]
+  }
+
+  cflags = [ "-Wall" ]
+}
diff --git a/base/security/permission/services/permission_lite/pms_base/include/permission_service.h b/base/security/permission/services/permission_lite/pms_base/include/permission_service.h
new file mode 100755
index 00000000..312bf7f3
--- /dev/null
+++ b/base/security/permission/services/permission_lite/pms_base/include/permission_service.h
@@ -0,0 +1,41 @@
+/*
+ * Copyright (c) 2020 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef OHOS_PERMISSION_SERVICE_H
+#define OHOS_PERMISSION_SERVICE_H
+
+#include "service.h"
+
+#ifdef __cplusplus
+#if __cplusplus
+extern "C" {
+#endif
+#endif
+
+#ifndef PERMISSION_SERVICE
+#define PERMISSION_SERVICE "permissionms"
+#endif
+
+typedef struct {
+    INHERIT_SERVICE;
+    Identity identity;
+} PermissionService;
+
+#ifdef __cplusplus
+#if __cplusplus
+}
+#endif
+#endif
+#endif // OHOS_PERMISSION_SERVICE_H
\ No newline at end of file
diff --git a/base/security/permission/services/permission_lite/pms_base/include/pms_common.h b/base/security/permission/services/permission_lite/pms_base/include/pms_common.h
new file mode 100644
index 00000000..882fe829
--- /dev/null
+++ b/base/security/permission/services/permission_lite/pms_base/include/pms_common.h
@@ -0,0 +1,25 @@
+/*
+ * Copyright (c) 2020~2021 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef PERM_COMMON_H
+#define PERM_COMMON_H
+
+#define PERMISSION_SERVICE "permissionms"
+#define PERM_FEATURE "PmsFeature"
+#define PERM_INNER_FEATURE "PmsInnerFeature"
+#define PERM_INNER "PmsInner"
+#define IPCAUTH "ipc_auth"
+
+#endif // PERM_COMMON_H
\ No newline at end of file
diff --git a/base/security/permission/services/permission_lite/pms_base/src/permission_service.c b/base/security/permission/services/permission_lite/pms_base/src/permission_service.c
new file mode 100755
index 00000000..90800da2
--- /dev/null
+++ b/base/security/permission/services/permission_lite/pms_base/src/permission_service.c
@@ -0,0 +1,76 @@
+/*
+ * Copyright (c) 2020 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "permission_service.h"
+
+#include <ohos_init.h>
+
+#include "log.h"
+
+#include "samgr_lite.h"
+#include "service.h"
+
+#define STACK_SIZE 0x800
+#define QUEUE_SIZE 20
+
+static void Init();
+static const char *GetName(Service *service);
+static BOOL Initialize(Service *service, Identity identity);
+static TaskConfig GetTaskConfig(Service *service);
+static BOOL MessageHandle(Service *service, Request *request);
+
+static PermissionService g_permissionService = {
+    .GetName = GetName,
+    .Initialize = Initialize,
+    .MessageHandle = MessageHandle,
+    .GetTaskConfig = GetTaskConfig,
+    .identity = {-1, -1, NULL}
+};
+
+static void Init()
+{
+    SAMGR_GetInstance()->RegisterService((Service *)&g_permissionService);
+    HILOG_INFO(HILOG_MODULE_APP, "Init pms service success");
+}
+APP_SERVICE_INIT(Init);
+
+static const char *GetName(Service *service)
+{
+    (void)service;
+    return PERMISSION_SERVICE;
+}
+
+static BOOL Initialize(Service *service, Identity identity)
+{
+    PermissionService *pms = (PermissionService *)service;
+    pms->identity = identity;
+    return TRUE;
+}
+
+static BOOL MessageHandle(Service *service, Request *request)
+{
+    (void)service;
+    if (request == NULL) {
+        return FALSE;
+    }
+    return FALSE;
+}
+
+static TaskConfig GetTaskConfig(Service *service)
+{
+    (void)service;
+    TaskConfig config = {LEVEL_HIGH, PRI_NORMAL, STACK_SIZE, QUEUE_SIZE, SINGLE_TASK};
+    return config;
+}
diff --git a/base/security/permission/services/permission_lite/pms_client/BUILD.gn b/base/security/permission/services/permission_lite/pms_client/BUILD.gn
new file mode 100644
index 00000000..68420cd9
--- /dev/null
+++ b/base/security/permission/services/permission_lite/pms_client/BUILD.gn
@@ -0,0 +1,50 @@
+# Copyright (c) 2020 Huawei Device Co., Ltd.
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+import("//build/lite/config/component/lite_component.gni")
+
+lite_library("pms_client") {
+  target_type = "shared_library"
+  sources = [ "//base/security/permission/services/permission_lite/pms_client/perm_client.c" ]
+
+  include_dirs = [
+    "//base/security/permission/interfaces/innerkits/permission_lite",
+    "//base/security/permission/interfaces/kits/permission_lite",
+    "//base/security/permission/services/permission_lite/pms/include",
+    "//base/security/permission/services/permission_lite/pms_base/include",
+    "//utils/native/lite/include",
+    "//foundation/distributedschedule/samgr_lite/interfaces/kits/registry",
+    "//foundation/distributedschedule/samgr_lite/interfaces/kits/samgr",
+    "//foundation/distributedschedule/samgr_lite/interfaces/kits/communication/broadcast",
+    "//foundation/distributedschedule/samgr_lite/samgr/source",
+    "//third_party/cJSON",
+    "//third_party/bounds_checking_function/include",
+  ]
+
+  deps = [
+    "//base/hiviewdfx/hilog_lite/frameworks/featured:hilog_shared",
+    "//build/lite/config/component/cJSON:cjson_shared",
+    "//foundation/communication/ipc_lite:liteipc_adapter",
+    "//foundation/distributedschedule/samgr_lite/samgr:samgr",
+    "//third_party/bounds_checking_function:libsec_shared",
+  ]
+
+  if (ohos_kernel_type == "liteos_a") {
+    include_dirs += [
+      "//kernel/liteos_a/kernel/include",
+      "//kernel/liteos_a/kernel/common",
+    ]
+  }
+
+  cflags = [ "-Wall" ]
+}
diff --git a/base/security/permission/services/permission_lite/pms_client/perm_client.c b/base/security/permission/services/permission_lite/pms_client/perm_client.c
new file mode 100644
index 00000000..0503be3e
--- /dev/null
+++ b/base/security/permission/services/permission_lite/pms_client/perm_client.c
@@ -0,0 +1,470 @@
+/*
+ * Copyright (c) 2020~2021 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include <ohos_errno.h>
+#include <pthread.h>
+#include <securec.h>
+
+#include "cJSON.h"
+#include "iproxy_client.h"
+#include "liteipc_adapter.h"
+#include "log.h"
+#include "pms_interface.h"
+#include "pms_interface_inner.h"
+#include "pms_types.h"
+#include "registry.h"
+#include "samgr_lite.h"
+
+#define PERMISSION_SERVICE "permissionms"
+#define PERM_FEATURE "PmsFeature"
+#define PERM_INNER_FEATURE "PmsInnerFeature"
+#define MAX_DATA_LEN 0x100
+#define FIELD_PERMISSION "permissions"
+#define FIELD_NAME "name"
+#define FIELD_DESC "desc"
+#define FIELD_IS_GRANTED "isGranted"
+#define SYS_SVC_UID_MAX 99
+#define SYS_APP_UID_MIN 100
+#define SYS_APP_UID_MAX 999
+
+enum FUNCID {
+    ID_CHECK_SELF = 0,
+    ID_QUERY,
+    ID_CHECK = 10,
+    ID_GRANT,
+    ID_REVOKE,
+    ID_GRANT_RUNTIME,
+    ID_REVOKE_RUNTIME,
+    ID_GET_UDID,
+};
+
+typedef struct ClientApi {
+    INHERIT_CLIENT_IPROXY;
+    int (*CheckSelfPermission)(const char *permissionName);
+    int (*QueryPermission)(const char *identifier, PermissionSaved **permissions, int *permNum);
+} ClientApi;
+
+typedef struct ClientEntry {
+    INHERIT_IUNKNOWNENTRY(ClientApi);
+} ClientEntry;
+
+typedef struct InnerClientApi {
+    INHERIT_CLIENT_IPROXY;
+    int (*CheckPermission)(int uid, const char *permissionName);
+    int (*GrantPermission)(const char *identifier, const char *permName);
+    int (*RevokePermission)(const char *identifier, const char *permName);
+    int (*GrantRuntimePermission)(int uid, const char *permissionName);
+    int (*RevokeRuntimePermission)(int uid, const char *permissionName);
+    int (*RequestDevUdid)(unsigned char *udid, int size);
+} InnerClientApi;
+
+typedef struct ClientInnerEntry {
+    INHERIT_IUNKNOWNENTRY(InnerClientApi);
+} ClientInnerEntry;
+
+typedef struct RetOfQueryPerms {
+    int resultCode;
+    int length;
+    PermissionSaved *permission;
+} RetOfQueryPerms;
+
+typedef struct RetOfGetDevUdid {
+    unsigned char *udid;
+    int size;
+    int result;
+} RetOfGetDevUdid;
+
+void *CreatClient(const char *service, const char *feature, uint32 size)
+{
+    (void)service;
+    (void)feature;
+    uint32 len = size + sizeof(ClientEntry);
+    uint8 *client = malloc(len);
+    if (client == NULL) {
+        return NULL;
+    }
+    (void)memset_s(client, len, 0, len);
+    ClientEntry *entry = (ClientEntry *)&client[size];
+    entry->ver = ((uint16)CLIENT_PROXY_VER | (uint16)DEFAULT_VERSION);
+    entry->ref = 1;
+    entry->iUnknown.QueryInterface = IUNKNOWN_QueryInterface;
+    entry->iUnknown.AddRef = IUNKNOWN_AddRef;
+    entry->iUnknown.Release = IUNKNOWN_Release;
+    entry->iUnknown.Invoke = NULL;
+    entry->iUnknown.CheckSelfPermission = CheckSelfPermission;
+    entry->iUnknown.QueryPermission = QueryPermission;
+    return client;
+}
+
+void DestroyClient(const char *service, const char *feature, void *iproxy)
+{
+    free(iproxy);
+}
+
+static ClientApi *GetClientApi(void)
+{
+    SAMGR_RegisterFactory(PERMISSION_SERVICE, PERM_FEATURE, CreatClient, DestroyClient);
+    ClientApi *clientApi = NULL;
+    HILOG_INFO(HILOG_MODULE_APP, "[GetFeatureApi S:%s F:%s]: BEGIN\n", PERMISSION_SERVICE, PERM_FEATURE);
+    IUnknown *iUnknown = SAMGR_GetInstance()->GetFeatureApi(PERMISSION_SERVICE, PERM_FEATURE);
+    if (iUnknown == NULL) {
+        HILOG_INFO(HILOG_MODULE_APP, "[GetFeatureApi S:%s F:%s]: error is NULL\n", PERMISSION_SERVICE, PERM_FEATURE);
+        return NULL;
+    }
+
+    (void)iUnknown->QueryInterface(iUnknown, CLIENT_PROXY_VER, (void **)&clientApi);
+    HILOG_INFO(HILOG_MODULE_APP, "[QueryInterface CLIENT_PROXY_VER S:%s, F:%s]: is %p\n",
+               PERMISSION_SERVICE, PERM_FEATURE, clientApi);
+    return clientApi;
+}
+
+static void ReleaseClientApi(ClientApi *clientApi)
+{
+    if (clientApi == NULL) {
+        return;
+    }
+    int32 ref = clientApi->Release((IUnknown *)clientApi);
+    HILOG_INFO(HILOG_MODULE_APP, "[Release api S:%s, F:%s]: is %p ref:%d\n",
+               PERMISSION_SERVICE, PERM_FEATURE, clientApi, ref);
+}
+
+void *CreatInnerClient(const char *service, const char *feature, uint32 size)
+{
+    (void)service;
+    (void)feature;
+    uint32 len = size + sizeof(ClientInnerEntry);
+    uint8 *client = malloc(len);
+    if (client == NULL) {
+        return NULL;
+    }
+    (void)memset_s(client, len, 0, len);
+    ClientInnerEntry *entry = (ClientInnerEntry *)&client[size];
+    entry->ver = ((uint16)CLIENT_PROXY_VER | (uint16)DEFAULT_VERSION);
+    entry->ref = 1;
+    entry->iUnknown.QueryInterface = IUNKNOWN_QueryInterface;
+    entry->iUnknown.AddRef = IUNKNOWN_AddRef;
+    entry->iUnknown.Release = IUNKNOWN_Release;
+    entry->iUnknown.Invoke = NULL;
+    entry->iUnknown.CheckPermission = CheckPermission;
+    entry->iUnknown.GrantPermission = GrantPermission;
+    entry->iUnknown.RevokePermission = RevokePermission;
+    entry->iUnknown.GrantRuntimePermission = GrantRuntimePermission;
+    entry->iUnknown.RevokeRuntimePermission = RevokeRuntimePermission;
+    entry->iUnknown.RequestDevUdid = RequestDevUdid;
+    return client;
+}
+
+void DestroyInnerClient(const char *service, const char *feature, void *iproxy)
+{
+    free(iproxy);
+}
+
+static InnerClientApi *GetInnerClientApi(void)
+{
+    SAMGR_RegisterFactory(PERMISSION_SERVICE, PERM_INNER_FEATURE, CreatInnerClient, DestroyInnerClient);
+    InnerClientApi *clientApi = NULL;
+    HILOG_INFO(HILOG_MODULE_APP, "[GetFeatureApi S:%s F:%s]: BEGIN\n", PERMISSION_SERVICE, PERM_INNER_FEATURE);
+    IUnknown *iUnknown = SAMGR_GetInstance()->GetFeatureApi(PERMISSION_SERVICE, PERM_INNER_FEATURE);
+    if (iUnknown == NULL) {
+        HILOG_INFO(HILOG_MODULE_APP, "[GetFeatureApi S:%s F:%s]: error is NULL\n", PERMISSION_SERVICE,
+            PERM_INNER_FEATURE);
+        return NULL;
+    }
+    (void)iUnknown->QueryInterface(iUnknown, CLIENT_PROXY_VER, (void **)&clientApi);
+    HILOG_INFO(HILOG_MODULE_APP, "[QueryInterface CLIENT_PROXY_VER S:%s, F:%s]: is %p\n",
+               PERMISSION_SERVICE, PERM_INNER_FEATURE, clientApi);
+    return clientApi;
+}
+
+static void ReleaseInnerClientApi(InnerClientApi *clientApi)
+{
+    if (clientApi == NULL) {
+        return;
+    }
+    int32 ref = clientApi->Release((IUnknown *)clientApi);
+    HILOG_INFO(HILOG_MODULE_APP, "[Release api S:%s, F:%s]: is %p ref:%d\n",
+               PERMISSION_SERVICE, PERM_INNER_FEATURE, clientApi, ref);
+}
+
+static int ParsePermissions(const char *jsonStr, PermissionSaved **perms, int *permNum)
+{
+    cJSON *root = cJSON_Parse(jsonStr);
+    if (root == NULL) {
+        return PERM_ERRORCODE_JSONPARSE_FAIL;
+    }
+    cJSON *array = cJSON_GetObjectItem(root, FIELD_PERMISSION);
+    int pSize = cJSON_GetArraySize(array);
+    int allocSize = sizeof(PermissionSaved) * pSize;
+    if (allocSize == 0) {
+        cJSON_Delete(root);
+        return PERM_ERRORCODE_SUCCESS;
+    }
+    *perms = (PermissionSaved *) malloc(allocSize);
+    if (*perms == NULL) {
+        cJSON_Delete(root);
+        return PERM_ERRORCODE_MALLOC_FAIL;
+    }
+    for (int i = 0; i < pSize; i++) {
+        cJSON *object = cJSON_GetArrayItem(array, i);
+        cJSON *itemName = cJSON_GetObjectItem(object, FIELD_NAME);
+        cJSON *itemDesc = cJSON_GetObjectItem(object, FIELD_DESC);
+        cJSON *itemGranted = cJSON_GetObjectItem(object, FIELD_IS_GRANTED);
+        if (itemName == NULL || itemDesc == NULL || itemGranted == NULL) {
+            cJSON_Delete(root);
+            free(*perms);
+            *perms = NULL;
+            return PERM_ERRORCODE_JSONPARSE_FAIL;
+        }
+        if (strcpy_s((*perms + i)->name, PERM_NAME_LEN, itemName->valuestring) != EOK) {
+            cJSON_Delete(root);
+            free(*perms);
+            *perms = NULL;
+            return PERM_ERRORCODE_COPY_ERROR;
+        }
+        if (strcpy_s((*perms + i)->desc, PERM_DESC_LEN, itemDesc->valuestring) != EOK) {
+            cJSON_Delete(root);
+            free(*perms);
+            *perms = NULL;
+            return PERM_ERRORCODE_COPY_ERROR;
+        }
+        (*perms + i)->granted = (enum IsGranted) itemGranted->valueint;
+    }
+    *permNum = pSize;
+    cJSON_Delete(root);
+    return PERM_ERRORCODE_SUCCESS;
+}
+
+static int Notify(IOwner owner, int code, IpcIo *reply)
+{
+    if ((reply == NULL) || (owner == NULL)) {
+        HILOG_ERROR(HILOG_MODULE_APP, "Lite Ipc reply or owner is NULL");
+        return OHOS_FAILURE;
+    }
+
+    int32_t *ret = (int32_t *)owner;
+    *ret = IpcIoPopInt32(reply);
+
+    return EC_SUCCESS;
+}
+
+static int DealQueryReply(IOwner owner, int code, IpcIo *reply)
+{
+    if ((reply == NULL) || (owner == NULL)) {
+        return OHOS_FAILURE;
+    }
+    int resultCode = IpcIoPopInt32(reply);
+    RetOfQueryPerms *ret = (RetOfQueryPerms *)(owner);
+    if (resultCode != PERM_ERRORCODE_SUCCESS) {
+        ret->resultCode = resultCode;
+        return resultCode;
+    }
+#ifndef __LINUX__
+    BuffPtr *buff = IpcIoPopDataBuff(reply);
+    if (buff == NULL) {
+        ret->resultCode = OHOS_FAILURE;
+        HILOG_ERROR(HILOG_MODULE_APP, "Permission string popped is empty!");
+        return OHOS_FAILURE;
+    }
+    char *jsonStr = (char *)(buff->buff);
+#else
+    char *jsonStr = (char *)IpcIoPopString(reply, NULL);
+#endif
+    HILOG_INFO(HILOG_MODULE_APP, "[perms: %s]", jsonStr);
+    int retCode = ParsePermissions(jsonStr, &(ret->permission), &(ret->length));
+#ifndef __LINUX__
+    FreeBuffer(NULL, buff->buff);
+#endif
+    ret->resultCode = retCode;
+    return retCode;
+}
+
+static int DealUdidReply(IOwner owner, int code, IpcIo *reply)
+{
+    if ((reply == NULL) || (owner == NULL)) {
+        return OHOS_FAILURE;
+    }
+    int resultCode = IpcIoPopInt32(reply);
+    RetOfGetDevUdid *ret = (RetOfGetDevUdid *)(owner);
+    if (resultCode != PERM_ERRORCODE_SUCCESS) {
+        ret->result = resultCode;
+        return resultCode;
+    }
+    int len = IpcIoPopInt32(reply);
+    char *id = (char *)IpcIoPopString(reply, (size_t *)&len);
+    if (id == NULL) {
+        return OHOS_FAILURE;
+    }
+    if (memcpy_s(ret->udid, ret->size, id, len) != EOK) {
+        return OHOS_FAILURE;
+    }
+    ret->result = PERM_ERRORCODE_SUCCESS;
+    return PERM_ERRORCODE_SUCCESS;
+}
+
+int CheckSelfPermission(const char *permissionName)
+{
+    uid_t callingUid = getuid();
+    if (callingUid <= SYS_APP_UID_MAX) {
+        return GRANTED;
+    }
+    ClientApi *proxy = GetClientApi();
+    if (proxy == NULL) {
+        return OHOS_FAILURE;
+    }
+    IpcIo request;
+    char data[MAX_DATA_LEN];
+    IpcIoInit(&request, data, MAX_DATA_LEN, 0);
+    IpcIoPushString(&request, permissionName);
+    int32_t ret;
+    proxy->Invoke((IClientProxy *)proxy, ID_CHECK_SELF, &request, &ret, Notify);
+    ReleaseClientApi(proxy);
+    return ret;
+}
+
+int CheckPermission(int uid, const char *permissionName)
+{
+    uid_t callingUid = getuid();
+    if (callingUid <= SYS_APP_UID_MAX) {
+        return GRANTED;
+    }
+    InnerClientApi *proxy = GetInnerClientApi();
+    if (proxy == NULL) {
+        return OHOS_FAILURE;
+    }
+    IpcIo request;
+    char data[MAX_DATA_LEN];
+    IpcIoInit(&request, data, MAX_DATA_LEN, 0);
+    IpcIoPushInt64(&request, uid);
+    IpcIoPushString(&request, permissionName);
+    int32_t ret;
+    proxy->Invoke((IClientProxy *)proxy, ID_CHECK, &request, &ret, Notify);
+    ReleaseInnerClientApi(proxy);
+    return ret;
+}
+
+int QueryPermission(const char *identifier, PermissionSaved **permissions, int *permNum)
+{
+    ClientApi *proxy = GetClientApi();
+    if (proxy == NULL) {
+        return OHOS_FAILURE;
+    }
+    IpcIo request;
+    char data[MAX_DATA_LEN];
+    IpcIoInit(&request, data, MAX_DATA_LEN, 0);
+    IpcIoPushString(&request, identifier);
+    RetOfQueryPerms ret = {
+        .resultCode = 0,
+        .length = 0,
+        .permission = NULL
+    };
+    proxy->Invoke((IClientProxy *)proxy, ID_QUERY, &request, &ret, DealQueryReply);
+    *permissions = ret.permission;
+    *permNum = ret.length;
+    ReleaseClientApi(proxy);
+    return ret.resultCode;
+}
+
+int GrantPermission(const char *identifier, const char *permName)
+{
+    InnerClientApi *proxy = GetInnerClientApi();
+    if (proxy == NULL) {
+        return OHOS_FAILURE;
+    }
+    IpcIo request;
+    char data[MAX_DATA_LEN];
+    IpcIoInit(&request, data, MAX_DATA_LEN, 0);
+    IpcIoPushString(&request, identifier);
+    IpcIoPushString(&request, permName);
+    int32_t ret;
+    proxy->Invoke((IClientProxy *)proxy, ID_GRANT, &request, &ret, Notify);
+    ReleaseInnerClientApi(proxy);
+    HILOG_INFO(HILOG_MODULE_APP, "client grant[ret: %d]", ret);
+    return ret;
+}
+
+int RevokePermission(const char *identifier, const char *permName)
+{
+    InnerClientApi *proxy = GetInnerClientApi();
+    if (proxy == NULL) {
+        return OHOS_FAILURE;
+    }
+    IpcIo request;
+    char data[MAX_DATA_LEN];
+    IpcIoInit(&request, data, MAX_DATA_LEN, 0);
+    IpcIoPushString(&request, identifier);
+    IpcIoPushString(&request, permName);
+    int32_t ret;
+    proxy->Invoke((IClientProxy *)proxy, ID_REVOKE, &request, &ret, Notify);
+    ReleaseInnerClientApi(proxy);
+    HILOG_INFO(HILOG_MODULE_APP, "client revoke[ret: %d]", ret);
+    return ret;
+}
+
+int GrantRuntimePermission(int uid, const char *permissionName)
+{
+    InnerClientApi *proxy = GetInnerClientApi();
+    if (proxy == NULL) {
+        return OHOS_FAILURE;
+    }
+    IpcIo request;
+    char data[MAX_DATA_LEN];
+    IpcIoInit(&request, data, MAX_DATA_LEN, 0);
+    IpcIoPushInt64(&request, uid);
+    IpcIoPushString(&request, permissionName);
+    int32_t ret;
+    proxy->Invoke((IClientProxy *)proxy, ID_GRANT_RUNTIME, &request, &ret, Notify);
+    ReleaseInnerClientApi(proxy);
+    return ret;
+}
+
+int RevokeRuntimePermission(int uid, const char *permissionName)
+{
+    InnerClientApi *proxy = GetInnerClientApi();
+    if (proxy == NULL) {
+        return OHOS_FAILURE;
+    }
+    IpcIo request;
+    char data[MAX_DATA_LEN];
+    IpcIoInit(&request, data, MAX_DATA_LEN, 0);
+    IpcIoPushInt64(&request, uid);
+    IpcIoPushString(&request, permissionName);
+    int32_t ret;
+    proxy->Invoke((IClientProxy *)proxy, ID_REVOKE_RUNTIME, &request, &ret, Notify);
+    ReleaseInnerClientApi(proxy);
+    return ret;
+}
+
+int RequestDevUdid(unsigned char *udid, int size)
+{
+    if (udid == NULL || size != (UDID_FINAL_BYTES + 1)) {
+        return OHOS_FAILURE;
+    }
+    InnerClientApi *proxy = GetInnerClientApi();
+    if (proxy == NULL) {
+        return OHOS_FAILURE;
+    }
+    IpcIo request;
+    char data[MAX_DATA_LEN];
+    IpcIoInit(&request, data, MAX_DATA_LEN, 0);
+    IpcIoPushInt32(&request, size);
+    RetOfGetDevUdid ret = {
+        .udid = udid,
+        .size = size,
+        .result = OHOS_FAILURE
+    };
+    proxy->Invoke((IClientProxy *)proxy, ID_GET_UDID, &request, &ret, DealUdidReply);
+    ReleaseInnerClientApi(proxy);
+    return ret.result;
+}
diff --git a/base/sensors/miscdevice_lite/LICENSE b/base/sensors/miscdevice_lite/LICENSE
new file mode 100755
index 00000000..4a459866
--- /dev/null
+++ b/base/sensors/miscdevice_lite/LICENSE
@@ -0,0 +1,177 @@
+
+                                 Apache License
+                           Version 2.0, January 2004
+                        http://www.apache.org/licenses/
+
+   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
+
+   1. Definitions.
+
+      "License" shall mean the terms and conditions for use, reproduction,
+      and distribution as defined by Sections 1 through 9 of this document.
+
+      "Licensor" shall mean the copyright owner or entity authorized by
+      the copyright owner that is granting the License.
+
+      "Legal Entity" shall mean the union of the acting entity and all
+      other entities that control, are controlled by, or are under common
+      control with that entity. For the purposes of this definition,
+      "control" means (i) the power, direct or indirect, to cause the
+      direction or management of such entity, whether by contract or
+      otherwise, or (ii) ownership of fifty percent (50%) or more of the
+      outstanding shares, or (iii) beneficial ownership of such entity.
+
+      "You" (or "Your") shall mean an individual or Legal Entity
+      exercising permissions granted by this License.
+
+      "Source" form shall mean the preferred form for making modifications,
+      including but not limited to software source code, documentation
+      source, and configuration files.
+
+      "Object" form shall mean any form resulting from mechanical
+      transformation or translation of a Source form, including but
+      not limited to compiled object code, generated documentation,
+      and conversions to other media types.
+
+      "Work" shall mean the work of authorship, whether in Source or
+      Object form, made available under the License, as indicated by a
+      copyright notice that is included in or attached to the work
+      (an example is provided in the Appendix below).
+
+      "Derivative Works" shall mean any work, whether in Source or Object
+      form, that is based on (or derived from) the Work and for which the
+      editorial revisions, annotations, elaborations, or other modifications
+      represent, as a whole, an original work of authorship. For the purposes
+      of this License, Derivative Works shall not include works that remain
+      separable from, or merely link (or bind by name) to the interfaces of,
+      the Work and Derivative Works thereof.
+
+      "Contribution" shall mean any work of authorship, including
+      the original version of the Work and any modifications or additions
+      to that Work or Derivative Works thereof, that is intentionally
+      submitted to Licensor for inclusion in the Work by the copyright owner
+      or by an individual or Legal Entity authorized to submit on behalf of
+      the copyright owner. For the purposes of this definition, "submitted"
+      means any form of electronic, verbal, or written communication sent
+      to the Licensor or its representatives, including but not limited to
+      communication on electronic mailing lists, source code control systems,
+      and issue tracking systems that are managed by, or on behalf of, the
+      Licensor for the purpose of discussing and improving the Work, but
+      excluding communication that is conspicuously marked or otherwise
+      designated in writing by the copyright owner as "Not a Contribution."
+
+      "Contributor" shall mean Licensor and any individual or Legal Entity
+      on behalf of whom a Contribution has been received by Licensor and
+      subsequently incorporated within the Work.
+
+   2. Grant of Copyright License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      copyright license to reproduce, prepare Derivative Works of,
+      publicly display, publicly perform, sublicense, and distribute the
+      Work and such Derivative Works in Source or Object form.
+
+   3. Grant of Patent License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      (except as stated in this section) patent license to make, have made,
+      use, offer to sell, sell, import, and otherwise transfer the Work,
+      where such license applies only to those patent claims licensable
+      by such Contributor that are necessarily infringed by their
+      Contribution(s) alone or by combination of their Contribution(s)
+      with the Work to which such Contribution(s) was submitted. If You
+      institute patent litigation against any entity (including a
+      cross-claim or counterclaim in a lawsuit) alleging that the Work
+      or a Contribution incorporated within the Work constitutes direct
+      or contributory patent infringement, then any patent licenses
+      granted to You under this License for that Work shall terminate
+      as of the date such litigation is filed.
+
+   4. Redistribution. You may reproduce and distribute copies of the
+      Work or Derivative Works thereof in any medium, with or without
+      modifications, and in Source or Object form, provided that You
+      meet the following conditions:
+
+      (a) You must give any other recipients of the Work or
+          Derivative Works a copy of this License; and
+
+      (b) You must cause any modified files to carry prominent notices
+          stating that You changed the files; and
+
+      (c) You must retain, in the Source form of any Derivative Works
+          that You distribute, all copyright, patent, trademark, and
+          attribution notices from the Source form of the Work,
+          excluding those notices that do not pertain to any part of
+          the Derivative Works; and
+
+      (d) If the Work includes a "NOTICE" text file as part of its
+          distribution, then any Derivative Works that You distribute must
+          include a readable copy of the attribution notices contained
+          within such NOTICE file, excluding those notices that do not
+          pertain to any part of the Derivative Works, in at least one
+          of the following places: within a NOTICE text file distributed
+          as part of the Derivative Works; within the Source form or
+          documentation, if provided along with the Derivative Works; or,
+          within a display generated by the Derivative Works, if and
+          wherever such third-party notices normally appear. The contents
+          of the NOTICE file are for informational purposes only and
+          do not modify the License. You may add Your own attribution
+          notices within Derivative Works that You distribute, alongside
+          or as an addendum to the NOTICE text from the Work, provided
+          that such additional attribution notices cannot be construed
+          as modifying the License.
+
+      You may add Your own copyright statement to Your modifications and
+      may provide additional or different license terms and conditions
+      for use, reproduction, or distribution of Your modifications, or
+      for any such Derivative Works as a whole, provided Your use,
+      reproduction, and distribution of the Work otherwise complies with
+      the conditions stated in this License.
+
+   5. Submission of Contributions. Unless You explicitly state otherwise,
+      any Contribution intentionally submitted for inclusion in the Work
+      by You to the Licensor shall be under the terms and conditions of
+      this License, without any additional terms or conditions.
+      Notwithstanding the above, nothing herein shall supersede or modify
+      the terms of any separate license agreement you may have executed
+      with Licensor regarding such Contributions.
+
+   6. Trademarks. This License does not grant permission to use the trade
+      names, trademarks, service marks, or product names of the Licensor,
+      except as required for reasonable and customary use in describing the
+      origin of the Work and reproducing the content of the NOTICE file.
+
+   7. Disclaimer of Warranty. Unless required by applicable law or
+      agreed to in writing, Licensor provides the Work (and each
+      Contributor provides its Contributions) on an "AS IS" BASIS,
+      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
+      implied, including, without limitation, any warranties or conditions
+      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
+      PARTICULAR PURPOSE. You are solely responsible for determining the
+      appropriateness of using or redistributing the Work and assume any
+      risks associated with Your exercise of permissions under this License.
+
+   8. Limitation of Liability. In no event and under no legal theory,
+      whether in tort (including negligence), contract, or otherwise,
+      unless required by applicable law (such as deliberate and grossly
+      negligent acts) or agreed to in writing, shall any Contributor be
+      liable to You for damages, including any direct, indirect, special,
+      incidental, or consequential damages of any character arising as a
+      result of this License or out of the use or inability to use the
+      Work (including but not limited to damages for loss of goodwill,
+      work stoppage, computer failure or malfunction, or any and all
+      other commercial damages or losses), even if such Contributor
+      has been advised of the possibility of such damages.
+
+   9. Accepting Warranty or Additional Liability. While redistributing
+      the Work or Derivative Works thereof, You may choose to offer,
+      and charge a fee for, acceptance of support, warranty, indemnity,
+      or other liability obligations and/or rights consistent with this
+      License. However, in accepting such obligations, You may act only
+      on Your own behalf and on Your sole responsibility, not on behalf
+      of any other Contributor, and only if You agree to indemnify,
+      defend, and hold each Contributor harmless for any liability
+      incurred by, or claims asserted against, such Contributor by reason
+      of your accepting any such warranty or additional liability.
+
+   END OF TERMS AND CONDITIONS
\ No newline at end of file
diff --git a/base/sensors/miscdevice_lite/README.md b/base/sensors/miscdevice_lite/README.md
new file mode 100755
index 00000000..ec73c0a9
--- /dev/null
+++ b/base/sensors/miscdevice_lite/README.md
@@ -0,0 +1,17 @@
+# miscdevice\_lite<a name="EN-US_TOPIC_0000001130675747"></a>
+
+-   [Introduction](#section203661231192714)
+-   [Repositories Involved](#section539917374284)
+
+## Introduction<a name="section203661231192714"></a>
+
+Misc devices, including vibrators and LED lights, are used to send signals externally. You can call APIs to control the vibration of vibrators and lighting-on and lighting-off of LED lights.
+
+## Repositories Involved<a name="section539917374284"></a>
+
+[Pan-sensor subsystem](https://gitee.com/openharmony/docs/blob/master/en/readme/pan-sensor.md)
+
+[sensors_sensor_lite](https://gitee.com/openharmony/sensors_sensor_lite/blob/master/README.md)
+
+**sensors_miscdevice_lite**
+
diff --git a/base/sensors/miscdevice_lite/README_zh.md b/base/sensors/miscdevice_lite/README_zh.md
new file mode 100755
index 00000000..c028e11f
--- /dev/null
+++ b/base/sensors/miscdevice_lite/README_zh.md
@@ -0,0 +1,17 @@
+# miscdevice\_lite组件<a name="ZH-CN_TOPIC_0000001130675747"></a>
+
+-   [简介](#section203661231192714)
+-   [相关仓](#section539917374284)
+
+## 简介<a name="section203661231192714"></a>
+
+小器件是指用于向外传递信号的设备，包括马达和LED灯，本组件对开发者提供控制马达振动和LED灯开关的能力。
+
+## 相关仓<a name="section539917374284"></a>
+
+[泛Sensor子系统](https://gitee.com/openharmony/docs/blob/master/zh-cn/readme/%E6%B3%9BSensor%E5%AD%90%E7%B3%BB%E7%BB%9F.md)
+
+[sensors_sensor_lite](https://gitee.com/openharmony/sensors_sensor_lite/blob/master/README_zh.md)
+
+**sensors_miscdevice_lite**
+
diff --git a/base/sensors/sensor_lite/LICENSE b/base/sensors/sensor_lite/LICENSE
new file mode 100755
index 00000000..4a459866
--- /dev/null
+++ b/base/sensors/sensor_lite/LICENSE
@@ -0,0 +1,177 @@
+
+                                 Apache License
+                           Version 2.0, January 2004
+                        http://www.apache.org/licenses/
+
+   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
+
+   1. Definitions.
+
+      "License" shall mean the terms and conditions for use, reproduction,
+      and distribution as defined by Sections 1 through 9 of this document.
+
+      "Licensor" shall mean the copyright owner or entity authorized by
+      the copyright owner that is granting the License.
+
+      "Legal Entity" shall mean the union of the acting entity and all
+      other entities that control, are controlled by, or are under common
+      control with that entity. For the purposes of this definition,
+      "control" means (i) the power, direct or indirect, to cause the
+      direction or management of such entity, whether by contract or
+      otherwise, or (ii) ownership of fifty percent (50%) or more of the
+      outstanding shares, or (iii) beneficial ownership of such entity.
+
+      "You" (or "Your") shall mean an individual or Legal Entity
+      exercising permissions granted by this License.
+
+      "Source" form shall mean the preferred form for making modifications,
+      including but not limited to software source code, documentation
+      source, and configuration files.
+
+      "Object" form shall mean any form resulting from mechanical
+      transformation or translation of a Source form, including but
+      not limited to compiled object code, generated documentation,
+      and conversions to other media types.
+
+      "Work" shall mean the work of authorship, whether in Source or
+      Object form, made available under the License, as indicated by a
+      copyright notice that is included in or attached to the work
+      (an example is provided in the Appendix below).
+
+      "Derivative Works" shall mean any work, whether in Source or Object
+      form, that is based on (or derived from) the Work and for which the
+      editorial revisions, annotations, elaborations, or other modifications
+      represent, as a whole, an original work of authorship. For the purposes
+      of this License, Derivative Works shall not include works that remain
+      separable from, or merely link (or bind by name) to the interfaces of,
+      the Work and Derivative Works thereof.
+
+      "Contribution" shall mean any work of authorship, including
+      the original version of the Work and any modifications or additions
+      to that Work or Derivative Works thereof, that is intentionally
+      submitted to Licensor for inclusion in the Work by the copyright owner
+      or by an individual or Legal Entity authorized to submit on behalf of
+      the copyright owner. For the purposes of this definition, "submitted"
+      means any form of electronic, verbal, or written communication sent
+      to the Licensor or its representatives, including but not limited to
+      communication on electronic mailing lists, source code control systems,
+      and issue tracking systems that are managed by, or on behalf of, the
+      Licensor for the purpose of discussing and improving the Work, but
+      excluding communication that is conspicuously marked or otherwise
+      designated in writing by the copyright owner as "Not a Contribution."
+
+      "Contributor" shall mean Licensor and any individual or Legal Entity
+      on behalf of whom a Contribution has been received by Licensor and
+      subsequently incorporated within the Work.
+
+   2. Grant of Copyright License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      copyright license to reproduce, prepare Derivative Works of,
+      publicly display, publicly perform, sublicense, and distribute the
+      Work and such Derivative Works in Source or Object form.
+
+   3. Grant of Patent License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      (except as stated in this section) patent license to make, have made,
+      use, offer to sell, sell, import, and otherwise transfer the Work,
+      where such license applies only to those patent claims licensable
+      by such Contributor that are necessarily infringed by their
+      Contribution(s) alone or by combination of their Contribution(s)
+      with the Work to which such Contribution(s) was submitted. If You
+      institute patent litigation against any entity (including a
+      cross-claim or counterclaim in a lawsuit) alleging that the Work
+      or a Contribution incorporated within the Work constitutes direct
+      or contributory patent infringement, then any patent licenses
+      granted to You under this License for that Work shall terminate
+      as of the date such litigation is filed.
+
+   4. Redistribution. You may reproduce and distribute copies of the
+      Work or Derivative Works thereof in any medium, with or without
+      modifications, and in Source or Object form, provided that You
+      meet the following conditions:
+
+      (a) You must give any other recipients of the Work or
+          Derivative Works a copy of this License; and
+
+      (b) You must cause any modified files to carry prominent notices
+          stating that You changed the files; and
+
+      (c) You must retain, in the Source form of any Derivative Works
+          that You distribute, all copyright, patent, trademark, and
+          attribution notices from the Source form of the Work,
+          excluding those notices that do not pertain to any part of
+          the Derivative Works; and
+
+      (d) If the Work includes a "NOTICE" text file as part of its
+          distribution, then any Derivative Works that You distribute must
+          include a readable copy of the attribution notices contained
+          within such NOTICE file, excluding those notices that do not
+          pertain to any part of the Derivative Works, in at least one
+          of the following places: within a NOTICE text file distributed
+          as part of the Derivative Works; within the Source form or
+          documentation, if provided along with the Derivative Works; or,
+          within a display generated by the Derivative Works, if and
+          wherever such third-party notices normally appear. The contents
+          of the NOTICE file are for informational purposes only and
+          do not modify the License. You may add Your own attribution
+          notices within Derivative Works that You distribute, alongside
+          or as an addendum to the NOTICE text from the Work, provided
+          that such additional attribution notices cannot be construed
+          as modifying the License.
+
+      You may add Your own copyright statement to Your modifications and
+      may provide additional or different license terms and conditions
+      for use, reproduction, or distribution of Your modifications, or
+      for any such Derivative Works as a whole, provided Your use,
+      reproduction, and distribution of the Work otherwise complies with
+      the conditions stated in this License.
+
+   5. Submission of Contributions. Unless You explicitly state otherwise,
+      any Contribution intentionally submitted for inclusion in the Work
+      by You to the Licensor shall be under the terms and conditions of
+      this License, without any additional terms or conditions.
+      Notwithstanding the above, nothing herein shall supersede or modify
+      the terms of any separate license agreement you may have executed
+      with Licensor regarding such Contributions.
+
+   6. Trademarks. This License does not grant permission to use the trade
+      names, trademarks, service marks, or product names of the Licensor,
+      except as required for reasonable and customary use in describing the
+      origin of the Work and reproducing the content of the NOTICE file.
+
+   7. Disclaimer of Warranty. Unless required by applicable law or
+      agreed to in writing, Licensor provides the Work (and each
+      Contributor provides its Contributions) on an "AS IS" BASIS,
+      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
+      implied, including, without limitation, any warranties or conditions
+      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
+      PARTICULAR PURPOSE. You are solely responsible for determining the
+      appropriateness of using or redistributing the Work and assume any
+      risks associated with Your exercise of permissions under this License.
+
+   8. Limitation of Liability. In no event and under no legal theory,
+      whether in tort (including negligence), contract, or otherwise,
+      unless required by applicable law (such as deliberate and grossly
+      negligent acts) or agreed to in writing, shall any Contributor be
+      liable to You for damages, including any direct, indirect, special,
+      incidental, or consequential damages of any character arising as a
+      result of this License or out of the use or inability to use the
+      Work (including but not limited to damages for loss of goodwill,
+      work stoppage, computer failure or malfunction, or any and all
+      other commercial damages or losses), even if such Contributor
+      has been advised of the possibility of such damages.
+
+   9. Accepting Warranty or Additional Liability. While redistributing
+      the Work or Derivative Works thereof, You may choose to offer,
+      and charge a fee for, acceptance of support, warranty, indemnity,
+      or other liability obligations and/or rights consistent with this
+      License. However, in accepting such obligations, You may act only
+      on Your own behalf and on Your sole responsibility, not on behalf
+      of any other Contributor, and only if You agree to indemnify,
+      defend, and hold each Contributor harmless for any liability
+      incurred by, or claims asserted against, such Contributor by reason
+      of your accepting any such warranty or additional liability.
+
+   END OF TERMS AND CONDITIONS
\ No newline at end of file
diff --git a/base/sensors/sensor_lite/README.md b/base/sensors/sensor_lite/README.md
new file mode 100755
index 00000000..65d78ad3
--- /dev/null
+++ b/base/sensors/sensor_lite/README.md
@@ -0,0 +1,160 @@
+# sensor\_lite<a name="EN-US_TOPIC_0000001078194836"></a>
+
+-   [Introduction](#section11660541593)
+-   [Directory Structure](#section161941989596)
+-   [Usage](#section1312121216216)
+    -   [Available APIs](#section827111510217)
+    -   [Usage Guidelines](#section129654513264)
+
+-   [Repositories Involved](#section1371113476307)
+
+## Introduction<a name="section11660541593"></a>
+
+The pan-sensor service subsystem provides a lightweight sensor service framework, through which you can perform the following operations:
+
+-   Query the sensor list.
+-   Enable or disable a sensor.
+-   Subscribe to or unsubscribe from sensor data.
+-   Set the data reporting mode of a sensor.
+-   Set the data sampling interval.
+
+The following figure shows the architecture of the pan-sensor framework.
+
+**Figure  1**  Pan-sensor service architecture<a name="fig15658513184019"></a>  
+![](figures/pan-sensor-service-architecture.png "pan-sensor-service-architecture")
+
+## Directory Structure<a name="section161941989596"></a>
+
+```
+/base/sensors/sensor_lite
+├── frameworks      # Framework code
+│   ├── include     # Header files
+│   └── src         # Source code
+├── interfaces      # APIs
+│   └── kits        # Native APIs
+├── services        # Code of services
+│   ├── include     # Header files
+│   └── src         # Source code
+```
+
+## Usage<a name="section1312121216216"></a>
+
+### Available APIs<a name="section827111510217"></a>
+
+**Table  1**  Major APIs in SensorAgent
+
+<a name="table411220157213"></a>
+<table><thead align="left"><tr id="row131101415123"><th class="cellrowborder" valign="top" width="62.339999999999996%" id="mcps1.2.3.1.1"><p id="p181106151923"><a name="p181106151923"></a><a name="p181106151923"></a>API</p>
+</th>
+<th class="cellrowborder" valign="top" width="37.66%" id="mcps1.2.3.1.2"><p id="p1511021515212"><a name="p1511021515212"></a><a name="p1511021515212"></a>Description</p>
+</th>
+</tr>
+</thead>
+<tbody><tr id="row711081513219"><td class="cellrowborder" valign="top" width="62.339999999999996%" headers="mcps1.2.3.1.1 "><p id="p111020153217"><a name="p111020153217"></a><a name="p111020153217"></a><strong id="b1411081511214"><a name="b1411081511214"></a><a name="b1411081511214"></a>GetAllSensors</strong>(SensorInfo **sensorInfo, int32_t *count)</p>
+</td>
+<td class="cellrowborder" valign="top" width="37.66%" headers="mcps1.2.3.1.2 "><p id="p71104156214"><a name="p71104156214"></a><a name="p71104156214"></a>Obtains information about all sensors in the system.</p>
+</td>
+</tr>
+<tr id="row7111111511212"><td class="cellrowborder" valign="top" width="62.339999999999996%" headers="mcps1.2.3.1.1 "><p id="p1111091510212"><a name="p1111091510212"></a><a name="p1111091510212"></a><strong id="b1011011514211"><a name="b1011011514211"></a><a name="b1011011514211"></a>SubscribeSensor</strong>(int32_t sensorTypeId, SensorUser *user)</p>
+</td>
+<td class="cellrowborder" valign="top" width="37.66%" headers="mcps1.2.3.1.2 "><p id="p011014153214"><a name="p011014153214"></a><a name="p011014153214"></a>Subscribes to sensor data. The system will report the obtained sensor data to the subscriber.</p>
+</td>
+</tr>
+<tr id="row8111121512211"><td class="cellrowborder" valign="top" width="62.339999999999996%" headers="mcps1.2.3.1.1 "><p id="p1211117151227"><a name="p1211117151227"></a><a name="p1211117151227"></a><strong id="b141111715023"><a name="b141111715023"></a><a name="b141111715023"></a>UnsubscribeSensor</strong>(int32_t sensorTypeId, SensorUser *user)</p>
+</td>
+<td class="cellrowborder" valign="top" width="37.66%" headers="mcps1.2.3.1.2 "><p id="p311115159211"><a name="p311115159211"></a><a name="p311115159211"></a>Unsubscribes from sensor data. The system will no longer report sensor data to the subscriber.</p>
+</td>
+</tr>
+<tr id="row21111151822"><td class="cellrowborder" valign="top" width="62.339999999999996%" headers="mcps1.2.3.1.1 "><p id="p311110151824"><a name="p311110151824"></a><a name="p311110151824"></a><strong id="b8111201519219"><a name="b8111201519219"></a><a name="b8111201519219"></a>SetBatch</strong>(int32_t sensorTypeId, SensorUser *user, int64_t samplingInterval, int64_t reportInterval)</p>
+</td>
+<td class="cellrowborder" valign="top" width="37.66%" headers="mcps1.2.3.1.2 "><p id="p91111151727"><a name="p91111151727"></a><a name="p91111151727"></a>Sets the data sampling interval and data reporting interval for the specified sensor.</p>
+</td>
+</tr>
+<tr id="row8111115520"><td class="cellrowborder" valign="top" width="62.339999999999996%" headers="mcps1.2.3.1.1 "><p id="p411113155213"><a name="p411113155213"></a><a name="p411113155213"></a><strong id="b1111181512210"><a name="b1111181512210"></a><a name="b1111181512210"></a>ActivateSensor</strong>(int32_t sensorTypeId, SensorUser *user)</p>
+</td>
+<td class="cellrowborder" valign="top" width="37.66%" headers="mcps1.2.3.1.2 "><p id="p13111111520217"><a name="p13111111520217"></a><a name="p13111111520217"></a>Enables the sensor that has been subscribed to. The subscriber can obtain the sensor data only after the sensor is enabled.</p>
+</td>
+</tr>
+<tr id="row15111151518213"><td class="cellrowborder" valign="top" width="62.339999999999996%" headers="mcps1.2.3.1.1 "><p id="p11112158215"><a name="p11112158215"></a><a name="p11112158215"></a><strong id="b2011118151228"><a name="b2011118151228"></a><a name="b2011118151228"></a>DeactivateSensor</strong>(int32_t sensorTypeId, SensorUser *user)</p>
+</td>
+<td class="cellrowborder" valign="top" width="37.66%" headers="mcps1.2.3.1.2 "><p id="p51111215729"><a name="p51111215729"></a><a name="p51111215729"></a>Disables an enabled sensor.</p>
+</td>
+</tr>
+<tr id="row10111171514213"><td class="cellrowborder" valign="top" width="62.339999999999996%" headers="mcps1.2.3.1.1 "><p id="p21114151528"><a name="p21114151528"></a><a name="p21114151528"></a><strong id="b1911119151727"><a name="b1911119151727"></a><a name="b1911119151727"></a>SetMode</strong>(int32_t sensorTypeId, SensorUser *user, int32_t mode)</p>
+</td>
+<td class="cellrowborder" valign="top" width="37.66%" headers="mcps1.2.3.1.2 "><p id="p51110150210"><a name="p51110150210"></a><a name="p51110150210"></a>Sets the data reporting mode for the specified sensor.</p>
+</td>
+</tr>
+</tbody>
+</table>
+
+### Usage Guidelines<a name="section129654513264"></a>
+
+This section uses the acceleration sensor as an example to describe how to use sensor APIs.
+
+1.  Import the required header files.
+
+```
+#include "sensor_agent.h"
+#include "sensor_agent_type.h"
+```
+
+1.  Create a callback.
+
+```
+void SensorDataCallbackImpl(SensorEvent *event)
+{
+    if(event == NULL){
+        return;
+    }
+    float *sensorData=(float *)event->data;
+}
+```
+
+1.  Obtain the list of sensors supported by the device.
+
+```
+SensorInfo *sensorInfo = (SensorInfo *)NULL;
+int32_t count = 0;
+int32_t ret = GetAllSensors(&sensorInfo, &count);
+```
+
+1.  Create a sensor user.
+
+```
+SensorUser sensorUser;
+sensorUser.callback = SensorDataCallbackImpl; // Assign the created callback SensorDataCallbackImpl to the member variable callback.
+```
+
+1.  Enable the sensor.
+
+```
+int32_t ret = ActivateSensor(SENSOR_TYPE_ID_ACCELEROMETER, &sensorUser);
+```
+
+1.  Subscribe to sensor data.
+
+```
+int32_t ret = SubscribeSensor(SENSOR_TYPE_ID_ACCELEROMETER, &sensorUser);
+```
+
+1.  Unsubscribe from the sensor data.
+
+```
+int32_t ret = UnsubscribeSensor(SENSOR_TYPE_ID_ACCELEROMETER, &sensorUser);
+```
+
+1.  Disable the sensor.
+
+```
+int32_t ret = DeactivateSensor(SENSOR_TYPE_ID_ACCELEROMETER, &sensorUser);
+```
+
+## Repositories Involved<a name="section1371113476307"></a>
+
+[Pan-sensor subsystem](https://gitee.com/openharmony/docs/blob/master/en/readme/pan-sensor.md)
+
+**sensors_sensor_lite**
+
+[sensors_miscdevice_lite](https://gitee.com/openharmony/sensors_miscdevice_lite/blob/master/README.md)
+
diff --git a/base/sensors/sensor_lite/README_zh.md b/base/sensors/sensor_lite/README_zh.md
new file mode 100755
index 00000000..d9d23deb
--- /dev/null
+++ b/base/sensors/sensor_lite/README_zh.md
@@ -0,0 +1,160 @@
+# Sensor\_lite组件<a name="ZH-CN_TOPIC_0000001078194836"></a>
+
+-   [简介](#section11660541593)
+-   [目录](#section161941989596)
+-   [说明](#section1312121216216)
+    -   [接口说明](#section827111510217)
+    -   [使用说明](#section129654513264)
+
+-   [相关仓](#section1371113476307)
+
+## 简介<a name="section11660541593"></a>
+
+泛Sensor服务子系统提供了轻量级sensor服务基础框架，提供了如下功能：
+
+-   Sensor列表查询
+-   Sensor启停
+-   Sensor订阅/去订阅
+-   设置数据上报模式
+-   设置采样间隔等
+
+泛Sensor服务框架如下图所示：
+
+**图 1**  泛Sensor服务框架图<a name="fig15658513184019"></a>  
+![](figures/泛Sensor服务框架图.png "泛Sensor服务框架图")
+
+## 目录<a name="section161941989596"></a>
+
+```
+/base/sensors/sensor_lite
+├── frameworks      # 框架代码
+│   ├── include     # 头文件目录
+│   └── src         # 源代码目录
+├── interfaces      # 接口目录
+│   └── kits        # Native接口目录
+├── services        # 服务代码目录
+│   ├── include     # 头文件目录
+│   └── src         # 源代码目录
+```
+
+## 说明<a name="section1312121216216"></a>
+
+### 接口说明<a name="section827111510217"></a>
+
+**表 1**  SensorAgent的主要接口
+
+<a name="table411220157213"></a>
+<table><thead align="left"><tr id="row131101415123"><th class="cellrowborder" valign="top" width="62.339999999999996%" id="mcps1.2.3.1.1"><p id="p181106151923"><a name="p181106151923"></a><a name="p181106151923"></a>接口名</p>
+</th>
+<th class="cellrowborder" valign="top" width="37.66%" id="mcps1.2.3.1.2"><p id="p1511021515212"><a name="p1511021515212"></a><a name="p1511021515212"></a>描述</p>
+</th>
+</tr>
+</thead>
+<tbody><tr id="row711081513219"><td class="cellrowborder" valign="top" width="62.339999999999996%" headers="mcps1.2.3.1.1 "><p id="p111020153217"><a name="p111020153217"></a><a name="p111020153217"></a><strong id="b1411081511214"><a name="b1411081511214"></a><a name="b1411081511214"></a>GetAllSensors</strong>(SensorInfo **sensorInfo, int32_t *count)</p>
+</td>
+<td class="cellrowborder" valign="top" width="37.66%" headers="mcps1.2.3.1.2 "><p id="p71104156214"><a name="p71104156214"></a><a name="p71104156214"></a>获取系统中所有传感器的信息</p>
+</td>
+</tr>
+<tr id="row7111111511212"><td class="cellrowborder" valign="top" width="62.339999999999996%" headers="mcps1.2.3.1.1 "><p id="p1111091510212"><a name="p1111091510212"></a><a name="p1111091510212"></a><strong id="b1011011514211"><a name="b1011011514211"></a><a name="b1011011514211"></a>SubscribeSensor</strong>(int32_t sensorTypeId, SensorUser *user)</p>
+</td>
+<td class="cellrowborder" valign="top" width="37.66%" headers="mcps1.2.3.1.2 "><p id="p011014153214"><a name="p011014153214"></a><a name="p011014153214"></a>订阅传感器数据，系统会将获取到的传感器数据上报给订阅者</p>
+</td>
+</tr>
+<tr id="row8111121512211"><td class="cellrowborder" valign="top" width="62.339999999999996%" headers="mcps1.2.3.1.1 "><p id="p1211117151227"><a name="p1211117151227"></a><a name="p1211117151227"></a><strong id="b141111715023"><a name="b141111715023"></a><a name="b141111715023"></a>UnsubscribeSensor</strong>(int32_t sensorTypeId, SensorUser *user)</p>
+</td>
+<td class="cellrowborder" valign="top" width="37.66%" headers="mcps1.2.3.1.2 "><p id="p311115159211"><a name="p311115159211"></a><a name="p311115159211"></a>去订阅传感器数据，系统将取消传感器数据上报给订阅者</p>
+</td>
+</tr>
+<tr id="row21111151822"><td class="cellrowborder" valign="top" width="62.339999999999996%" headers="mcps1.2.3.1.1 "><p id="p311110151824"><a name="p311110151824"></a><a name="p311110151824"></a><strong id="b8111201519219"><a name="b8111201519219"></a><a name="b8111201519219"></a>SetBatch</strong>(int32_t sensorTypeId, SensorUser *user, int64_t samplingInterval, int64_t reportInterval)</p>
+</td>
+<td class="cellrowborder" valign="top" width="37.66%" headers="mcps1.2.3.1.2 "><p id="p91111151727"><a name="p91111151727"></a><a name="p91111151727"></a>设置传感器的数据采样间隔和数据上报间隔</p>
+</td>
+</tr>
+<tr id="row8111115520"><td class="cellrowborder" valign="top" width="62.339999999999996%" headers="mcps1.2.3.1.1 "><p id="p411113155213"><a name="p411113155213"></a><a name="p411113155213"></a><strong id="b1111181512210"><a name="b1111181512210"></a><a name="b1111181512210"></a>ActivateSensor</strong>(int32_t sensorTypeId, SensorUser *user)</p>
+</td>
+<td class="cellrowborder" valign="top" width="37.66%" headers="mcps1.2.3.1.2 "><p id="p13111111520217"><a name="p13111111520217"></a><a name="p13111111520217"></a>使能一个传感器订阅用户，只有在传感器使能之后，订阅该传感器的用户才能获取到数据</p>
+</td>
+</tr>
+<tr id="row15111151518213"><td class="cellrowborder" valign="top" width="62.339999999999996%" headers="mcps1.2.3.1.1 "><p id="p11112158215"><a name="p11112158215"></a><a name="p11112158215"></a><strong id="b2011118151228"><a name="b2011118151228"></a><a name="b2011118151228"></a>DeactivateSensor</strong>(int32_t sensorTypeId, SensorUser *user)</p>
+</td>
+<td class="cellrowborder" valign="top" width="37.66%" headers="mcps1.2.3.1.2 "><p id="p51111215729"><a name="p51111215729"></a><a name="p51111215729"></a>去使能一个传感器订阅用户</p>
+</td>
+</tr>
+<tr id="row10111171514213"><td class="cellrowborder" valign="top" width="62.339999999999996%" headers="mcps1.2.3.1.1 "><p id="p21114151528"><a name="p21114151528"></a><a name="p21114151528"></a><strong id="b1911119151727"><a name="b1911119151727"></a><a name="b1911119151727"></a>SetMode</strong>(int32_t sensorTypeId, SensorUser *user, int32_t mode)</p>
+</td>
+<td class="cellrowborder" valign="top" width="37.66%" headers="mcps1.2.3.1.2 "><p id="p51110150210"><a name="p51110150210"></a><a name="p51110150210"></a>设置传感器的数据上报模式</p>
+</td>
+</tr>
+</tbody>
+</table>
+
+### 使用说明<a name="section129654513264"></a>
+
+本节以订阅加速度传感器数据为例进行介绍。
+
+1.  导入需要的包
+
+```
+#include "sensor_agent.h"
+#include "sensor_agent_type.h"
+```
+
+1.  创建回调函数
+
+```
+void SensorDataCallbackImpl(SensorEvent *event)
+{
+    if(event == NULL){
+        return;
+    }
+    float *sensorData=(float *)event->data;
+}
+```
+
+1.  获取设备支持的Sensor列表
+
+```
+SensorInfo *sensorInfo = (SensorInfo *)NULL;
+int32_t count = 0;
+int32_t ret = GetAllSensors(&sensorInfo, &count);
+```
+
+1.  创建传感器用户
+
+```
+SensorUser sensorUser;
+sensorUser.callback = SensorDataCallbackImpl; //成员变量callback指向创建的回调方法
+```
+
+1.  使能传感器
+
+```
+int32_t ret = ActivateSensor(SENSOR_TYPE_ID_ACCELEROMETER, &sensorUser);
+```
+
+1.  订阅传感器数据
+
+```
+int32_t ret = SubscribeSensor(SENSOR_TYPE_ID_ACCELEROMETER, &sensorUser);
+```
+
+1.  取消传感器数据订阅
+
+```
+int32_t ret = UnsubscribeSensor(SENSOR_TYPE_ID_ACCELEROMETER, &sensorUser);
+```
+
+1.  去使能一个传感器
+
+```
+int32_t ret = DeactivateSensor(SENSOR_TYPE_ID_ACCELEROMETER, &sensorUser);
+```
+
+## 相关仓<a name="section1371113476307"></a>
+
+[泛Sensor子系统](https://gitee.com/openharmony/docs/blob/master/zh-cn/readme/%E6%B3%9BSensor%E5%AD%90%E7%B3%BB%E7%BB%9F.md)
+
+**sensors_sensor_lite**
+
+[sensors_miscdevice_lite](https://gitee.com/openharmony/sensors_miscdevice_lite/blob/master/README_zh.md)
+
diff --git a/base/sensors/sensor_lite/figures/pan-sensor-service-architecture.png b/base/sensors/sensor_lite/figures/pan-sensor-service-architecture.png
new file mode 100755
index 0000000000000000000000000000000000000000..bb4c2bd03c68110938949d4d1f2bd63f4a21de34
GIT binary patch
literal 15601
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
J!9MS+{|i}1Wo`ff

literal 0
HcmV?d00001

diff --git "a/base/sensors/sensor_lite/figures/\346\263\233Sensor\346\234\215\345\212\241\346\241\206\346\236\266\345\233\276.png" "b/base/sensors/sensor_lite/figures/\346\263\233Sensor\346\234\215\345\212\241\346\241\206\346\236\266\345\233\276.png"
new file mode 100755
index 0000000000000000000000000000000000000000..2f6a9a6026d86bfcdd6462825334b450e481f563
GIT binary patch
literal 18603
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

literal 0
HcmV?d00001

diff --git a/base/sensors/sensor_lite/frameworks/BUILD.gn b/base/sensors/sensor_lite/frameworks/BUILD.gn
new file mode 100755
index 00000000..fec39dc8
--- /dev/null
+++ b/base/sensors/sensor_lite/frameworks/BUILD.gn
@@ -0,0 +1,18 @@
+# Copyright (c) 2021 Huawei Device Co., Ltd.
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+import("//build/lite/config/component/lite_component.gni")
+
+lite_component("sensor_lite") {
+  features = [ "src:sensor_client" ]
+}
diff --git a/base/sensors/sensor_lite/frameworks/include/sensor_agent.h b/base/sensors/sensor_lite/frameworks/include/sensor_agent.h
new file mode 100755
index 00000000..b70c5768
--- /dev/null
+++ b/base/sensors/sensor_lite/frameworks/include/sensor_agent.h
@@ -0,0 +1,147 @@
+/*
+ * Copyright (c) 2021 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+/**
+ * @addtogroup PanSensor
+ * @{
+ *
+ * @brief Provides standard open APIs for you to use common capabilities of sensors.
+ *
+ * For example, you can call these APIs to obtain sensor information,
+ * subscribe to or unsubscribe from sensor data, enable or disable a sensor,
+ * and set the sensor data reporting mode.
+ *
+ * @since 5
+ */
+
+/**
+ * @file sensor_agent.h
+ *
+ * @brief Declares common APIs for sensor management, such as APIs for subscribing to
+ * and obtaining sensor data, enabling a sensor, and setting the sensor data reporting mode.
+ *
+ * @since 5
+ */
+
+#ifndef SENSOR_AGENT_H
+#define SENSOR_AGENT_H
+
+#include "hilog/log.h"
+#include "sensor_agent_type.h"
+
+#undef LOG_TAG
+#define LOG_TAG "SENSOR_LITE"
+
+#ifdef __cplusplus
+#if __cplusplus
+extern "C" {
+#endif
+#endif
+
+/**
+ * @brief Obtains information about all sensors in the system.
+ *
+ * @param sensorInfo Indicates the double pointer to the information about all sensors in the system.
+ * For details, see {@link SensorInfo}.
+ * @param count Indicates the pointer to the total number of sensors in the system.
+ * @return Returns <b>0</b> if the information is obtained; returns a non-zero value otherwise.
+ *
+ * @since 5
+ */
+int32_t GetAllSensors(SensorInfo **sensorInfo, int32_t *count);
+
+/**
+ * @brief Subscribes to sensor data. The system will report the obtained sensor data to the subscriber.
+ *
+ * @param sensorTypeId Indicates the ID of a sensor type. For details, see {@link SensorTypeId}.
+ * @param user Indicates the pointer to the sensor subscriber that requests sensor data. For details,
+ * see {@link SensorUser}. A subscriber can obtain data from only one sensor.
+ * @return Returns <b>0</b> if the subscription is successful; returns a non-zero value otherwise.
+ *
+ * @since 5
+ */
+int32_t SubscribeSensor(int32_t sensorTypeId, SensorUser *user);
+
+/**
+ * @brief Unsubscribes from sensor data.
+ *
+ * @param sensorTypeId Indicates the ID of a sensor type. For details, see {@link SensorTypeId}.
+ * @param user Indicates the pointer to the sensor subscriber that requests sensor data.
+ * For details, see {@link SensorUser}. A subscriber can obtain data from only one sensor.
+ * @return Returns <b>0</b> if the unsubscription is successful; returns a non-zero value otherwise.
+ *
+ * @since 5
+ */
+int32_t UnsubscribeSensor(int32_t sensorTypeId, SensorUser *user);
+
+/**
+ * @brief Sets the data sampling interval and data reporting interval for the specified sensor.
+ *
+ * @param sensorTypeId Indicates the ID of a sensor type. For details, see {@link SensorTypeId}.
+ * @param user Indicates the pointer to the sensor subscriber that requests sensor data.
+ * For details, see {@link SensorUser}. A subscriber can obtain data from only one sensor.
+ * @param samplingInterval Indicates the sensor data sampling interval to set, in nanoseconds.
+ * @param reportInterval Indicates the sensor data reporting interval, in nanoseconds.
+ * @return Returns <b>0</b> if the setting is successful; returns a non-zero value otherwise.
+ *
+ * @since 5
+ */
+int32_t SetBatch(int32_t sensorTypeId, SensorUser *user, int64_t samplingInterval, int64_t reportInterval);
+
+/**
+ * @brief Enables the sensor that has been subscribed to. The subscriber can obtain the sensor data
+ * only after the sensor is enabled.
+ *
+ * @param sensorTypeId Indicates the ID of a sensor type. For details, see {@link SensorTypeId}.
+ * @param user Indicates the pointer to the sensor subscriber that requests sensor data.
+ * For details, see {@link SensorUser}. A subscriber can obtain data from only one sensor.
+ * @return Returns <b>0</b> if the sensor is successfully enabled; returns a non-zero value otherwise.
+ *
+ * @since 5
+ */
+int32_t ActivateSensor(int32_t sensorTypeId, SensorUser *user);
+
+/**
+ * @brief Disables an enabled sensor.
+ *
+ * @param sensorTypeId Indicates the ID of a sensor type. For details, see {@link SensorTypeId}.
+ * @param user Indicates the pointer to the sensor subscriber that requests sensor data.
+ * For details, see {@link SensorUser}. A subscriber can obtain data from only one sensor.
+ * @return Returns <b>0</b> if the sensor is successfully disabled; returns a non-zero value otherwise.
+ *
+ * @since 5
+ */
+int32_t DeactivateSensor(int32_t sensorTypeId, SensorUser *user);
+
+/**
+ * @brief Sets the data reporting mode for the specified sensor.
+ *
+ * @param sensorTypeId Indicates the ID of a sensor type. For details, see {@link SensorTypeId}.
+ * @param user Indicates the pointer to the sensor subscriber that requests sensor data.
+ * For details, see {@link SensorUser}. A subscriber can obtain data from only one sensor.
+ * @param mode Indicates the data reporting mode to set. For details, see {@link SensorMode}.
+ * @return Returns <b>0</b> if the sensor data reporting mode is successfully set; returns a non-zero value otherwise.
+ *
+ * @since 5
+ */
+int32_t SetMode(int32_t sensorTypeId, SensorUser *user, int32_t mode);
+
+#ifdef __cplusplus
+#if __cplusplus
+}
+#endif
+#endif
+#endif /* SENSOR_AGENT_H */
+/** @} */
\ No newline at end of file
diff --git a/base/sensors/sensor_lite/frameworks/include/sensor_agent_proxy.h b/base/sensors/sensor_lite/frameworks/include/sensor_agent_proxy.h
new file mode 100755
index 00000000..73f73dfc
--- /dev/null
+++ b/base/sensors/sensor_lite/frameworks/include/sensor_agent_proxy.h
@@ -0,0 +1,58 @@
+/*
+ * Copyright (c) 2021 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef SENSOR_CLIENT_ADAPTER_DEF_H
+#define SENSOR_CLIENT_ADAPTER_DEF_H
+
+#include <pthread.h>
+
+#include <iproxy_client.h>
+#include <iunknown.h>
+#include "liteipc_adapter.h"
+#include <log.h>
+#include "samgr_lite.h"
+#include "sensor_agent.h"
+#include "sensor_agent_type.h"
+#include "sensor_service.h"
+#include "serializer.h"
+
+#ifdef __cplusplus
+#if __cplusplus
+extern "C" {
+#endif
+#endif
+
+#define SENSOR_SERVICE "sensor_service"
+#define SENSOR_FEATURE "sensor_feature"
+#define MAX_DATA_LEN 0x100
+#define IPC_MAX_OBJECTS 3
+
+void *GetServiceProxy();
+int32_t GetAllSensorsByProxy(const void *proxy, SensorInfo **sensorInfo, int32_t *count);
+int32_t ActivateSensorByProxy(const void *proxy, int32_t sensorId, const SensorUser *user);
+int32_t DeactivateSensorByProxy(const void *proxy, int32_t sensorId, const SensorUser *user);
+int32_t SetBatchByProxy(const void *proxy, int32_t sensorId, const SensorUser *user, int64_t samplingInterval,
+    int64_t reportInterval);
+int32_t SubscribeSensorByProxy(const void *proxy, int32_t sensorId, const SensorUser *user);
+int32_t UnsubscribeSensorByProxy(const void *proxy, int32_t sensorId, const SensorUser *user);
+int32_t SetModeByProxy(const void *proxy, int32_t sensorId, const SensorUser *user, int32_t mode);
+int32_t SetOptionByProxy(const void *proxy, int32_t sensorId, const SensorUser *user, int32_t option);
+
+#ifdef __cplusplus
+#if __cplusplus
+}
+#endif
+#endif
+#endif
\ No newline at end of file
diff --git a/base/sensors/sensor_lite/frameworks/include/sensor_agent_type.h b/base/sensors/sensor_lite/frameworks/include/sensor_agent_type.h
new file mode 100755
index 00000000..972cc1db
--- /dev/null
+++ b/base/sensors/sensor_lite/frameworks/include/sensor_agent_type.h
@@ -0,0 +1,185 @@
+/*
+ * Copyright (c) 2021 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+/**
+ * @addtogroup PanSensor
+ * @{
+ *
+ * @brief Provides standard open APIs for you to use common capabilities of sensors.
+ *
+ * For example, you can call these APIs to obtain sensor information,
+ * subscribe to or unsubscribe from sensor data, enable or disable a sensor,
+ * and set the sensor data reporting mode.
+ *
+ * @since 5
+ */
+
+/**
+ * @file sensor_agent_type.h
+ *
+ * @brief Defines the basic data used by the sensor agent to manage sensors.
+ *
+ * @since 5
+ */
+
+#ifndef SENSOR_AGENT_TYPE_H
+#define SENSOR_AGENT_TYPE_H
+
+#include <stdint.h>
+
+#ifdef __cplusplus
+#if __cplusplus
+extern "C" {
+#endif
+#endif
+
+#define SENSOR_ERROR_UNKNOWN (-1)
+#define SENSOR_ERROR_INVALID_ID (-2)
+#define SENSOR_ERROR_INVALID_PARAM (-3)
+#define SENSOR_OK 0
+#ifndef SENSOR_NAME_MAX_LEN
+/** Maximum length of the sensor name */
+#define SENSOR_NAME_MAX_LEN 16
+#endif /* SENSOR_NAME_MAX_LEN */
+
+#ifndef SENSOR_USER_DATA_SIZE
+/** Size of sensor data */
+#define SENSOR_USER_DATA_SIZE 104
+#endif /* SENSOR_USER_DATA_SIZE */
+
+#ifndef VERSION_MAX_LEN
+/** Maximum length of the sensor version */
+#define VERSION_MAX_LEN 16
+#endif /* SENSOR_USER_DATA_SIZE */
+
+/**
+ * @brief Enumerates sensor types.
+ *
+ * @since 5
+ */
+typedef enum SensorTypeId {
+    SENSOR_TYPE_ID_NONE = 0,                   /**< None */
+    SENSOR_TYPE_ID_ACCELEROMETER = 1,          /**< Acceleration sensor */
+    SENSOR_TYPE_ID_GYROSCOPE = 2,              /**< Gyroscope sensor */
+    SENSOR_TYPE_ID_PHOTOPLETHYSMOGRAPH = 3,    /**< Photoplethysmography sensor */
+    SENSOR_TYPE_ID_ELECTROCARDIOGRAPH = 4,     /**< Electrocardiogram (ECG) sensor */
+    SENSOR_TYPE_ID_AMBIENT_LIGHT = 5,          /**< Ambient light sensor */
+    SENSOR_TYPE_ID_MAGNETIC_FIELD = 6,         /**< Magnetic field sensor */
+    SENSOR_TYPE_ID_CAPACITIVE = 7,             /**< Capacitive sensor */
+    SENSOR_TYPE_ID_BAROMETER = 8,              /**< Barometric pressure sensor */
+    SENSOR_TYPE_ID_TEMPERATURE = 9,            /**< Temperature sensor */
+    SENSOR_TYPE_ID_HALL = 10,                  /**< Hall effect sensor */
+    SENSOR_TYPE_ID_GESTURE = 11,               /**< Gesture sensor */
+    SENSOR_TYPE_ID_PROXIMITY = 12,             /**< Proximity sensor */
+    SENSOR_TYPE_ID_HUMIDITY = 13,              /**< Humidity sensor */
+    SENSOR_TYPE_ID_PHYSICAL_MAX = 0xFF,        /**< Maximum type ID of a physical sensor */
+    SENSOR_TYPE_ID_ORIENTATION = 256,          /**< Orientation sensor */
+    SENSOR_TYPE_ID_GRAVITY = 257,              /**< Gravity sensor */
+    SENSOR_TYPE_ID_LINEAR_ACCELERATION = 258,  /**< Linear acceleration sensor */
+    SENSOR_TYPE_ID_ROTATION_VECTOR = 259,      /**< Rotation vector sensor */
+    SENSOR_TYPE_ID_AMBIENT_TEMPERATURE = 260,  /**< Ambient temperature sensor */
+    SENSOR_TYPE_ID_MAGNETIC_FIELD_UNCALIBRATED = 261,  /**< Uncalibrated magnetic field sensor */
+    SENSOR_TYPE_ID_GAME_ROTATION_VECTOR = 262,    /**< Game rotation vector sensor */
+    SENSOR_TYPE_ID_GYROSCOPE_UNCALIBRATED = 263,  /**< Uncalibrated gyroscope sensor */
+    SENSOR_TYPE_ID_SIGNIFICANT_MOTION = 264,    /**< Significant motion sensor */
+    SENSOR_TYPE_ID_PEDOMETER_DETECTION = 265,   /**< Pedometer detection sensor */
+    SENSOR_TYPE_ID_PEDOMETER = 266,             /**< Pedometer sensor */
+    SENSOR_TYPE_ID_GEOMAGNETIC_ROTATION_VECTOR = 277,  /**< Geomagnetic rotation vector sensor */
+    SENSOR_TYPE_ID_HEART_RATE = 278,            /**< Heart rate sensor */
+    SENSOR_TYPE_ID_DEVICE_ORIENTATION = 279,    /**< Device orientation sensor */
+    SENSOR_TYPE_ID_WEAR_DETECTION = 280,        /**< Wear detection sensor */
+    SENSOR_TYPE_ID_ACCELEROMETER_UNCALIBRATED = 281,   /**< Uncalibrated acceleration sensor */
+    SENSOR_TYPE_ID_MAX = 30,      /**< Maximum number of sensor type IDs*/
+} SensorTypeId;
+
+/**
+ * @brief Defines sensor information.
+ *
+ * @since 5
+ */
+typedef struct SensorInfo {
+    char sensorName[SENSOR_NAME_MAX_LEN];   /**< Sensor name */
+    char vendorName[SENSOR_NAME_MAX_LEN];   /**< Sensor vendor */
+    char firmwareVersion[VERSION_MAX_LEN];  /**< Sensor firmware version */
+    char hardwareVersion[VERSION_MAX_LEN];  /**< Sensor hardware version */
+    int32_t sensorTypeId;  /**< Sensor type ID */
+    int32_t sensorId;      /**< Sensor ID */
+    float maxRange;        /**< Maximum measurement range of the sensor */
+    float precision;       /**< Sensor accuracy */
+    float power;           /**< Sensor power */
+} SensorInfo;
+
+/**
+ * @brief Defines the data reported by the sensor.
+ *
+ * @since 5
+ */
+typedef struct SensorEvent {
+    int32_t sensorTypeId;  /**< Sensor type ID */
+    int32_t version;       /**< Sensor algorithm version */
+    int64_t timestamp;     /**< Time when sensor data was reported */
+    uint32_t option;       /**< Sensor data options, including the measurement range and accuracy */
+    int32_t mode;          /**< Sensor data reporting mode (described in {@link SensorMode}) */
+    uint8_t *data;         /**< Sensor data */
+    uint32_t dataLen;      /**< Sensor data length */
+} SensorEvent;
+
+/**
+ * @brief Defines the callback for data reporting by the sensor agent.
+ *
+ * @since 5
+ */
+typedef void (*RecordSensorCallback)(SensorEvent *event);
+
+/**
+ * @brief Defines a reserved field for the sensor data subscriber.
+ *
+ * @since 5
+ */
+typedef struct UserData {
+    char userData[SENSOR_USER_DATA_SIZE];  /**< Reserved for the sensor data subscriber */
+} UserData;
+
+/**
+ * @brief Defines information about the sensor data subscriber.
+ *
+ * @since 5
+ */
+typedef struct SensorUser {
+    char name[SENSOR_NAME_MAX_LEN];  /**< Name of the sensor data subscriber */
+    RecordSensorCallback callback;   /**< Callback for reporting sensor data */
+    UserData *userData;              /**< Reserved field for the sensor data subscriber */
+} SensorUser;
+
+/**
+ * @brief Enumerates data reporting modes of sensors.
+ *
+ * @since 5
+ */
+typedef enum SensorMode {
+    SENSOR_DEFAULT_MODE = 0,   /**< Default data reporting mode */
+    SENSOR_REALTIME_MODE = 1,  /**< Real-time data reporting mode to report a group of data each time */
+    SENSOR_ON_CHANGE = 2,   /**< Real-time data reporting mode to report data upon status changes */
+    SENSOR_ONE_SHOT = 3,    /**< Real-time data reporting mode to report data only once */
+    SENSOR_FIFO_MODE = 4,   /**< FIFO-based data reporting mode to report data based on the <b>BatchCnt</b> setting */
+} SensorMode;
+
+#ifdef __cplusplus
+#if __cplusplus
+}
+#endif
+#endif
+#endif /* SENSOR_AGENT_TYPE_H */
+/** @} */
\ No newline at end of file
diff --git a/base/sensors/sensor_lite/frameworks/src/BUILD.gn b/base/sensors/sensor_lite/frameworks/src/BUILD.gn
new file mode 100755
index 00000000..b33d968f
--- /dev/null
+++ b/base/sensors/sensor_lite/frameworks/src/BUILD.gn
@@ -0,0 +1,50 @@
+# Copyright (c) 2021 Huawei Device Co., Ltd.
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+import("//build/lite/config/component/lite_component.gni")
+
+shared_library("sensor_client") {
+  if (ohos_kernel_type == "liteos_riscv") {
+    sources = [
+      "sensor_agent.c",
+      "sensor_agent_client.c",
+    ]
+  }
+  if (ohos_kernel_type == "liteos_a" || ohos_kernel_type == "linux") {
+    sources = [
+      "sensor_agent.c",
+      "sensor_agent_proxy.c",
+    ]
+  }
+
+  ldflags = [ "-Wl,-Map=provider_proc.map" ]
+
+  include_dirs = [
+    "../include",
+    "//third_party/bounds_checking_function/include",
+    "//kernel/liteos_a/kernel/include",
+    "//kernel/liteos_a/kernel/common",
+    "//utils/native/lite/include",
+    "//kernel/liteos_a/kernel/include",
+    "//kernel/liteos_a/kernel/common",
+    "//foundation/distributedschedule/samgr_lite/interfaces/kits/registry",
+    "//foundation/distributedschedule/samgr_lite/interfaces/kits/samgr",
+    "//foundation/distributedschedule/samgr_lite/interfaces/kits/communication/broadcast",
+    "//foundation/distributedschedule/samgr_lite/samgr/source",
+    "//foundation/communication/ipc_lite/frameworks/liteipc/include",
+    "//foundation/communication/ipc_lite/interfaces/kits",
+    "//base/sensors/sensor_lite/services/include",
+  ]
+
+  deps = [ "//foundation/distributedschedule/samgr_lite/samgr:samgr" ]
+}
diff --git a/base/sensors/sensor_lite/frameworks/src/sensor_agent.c b/base/sensors/sensor_lite/frameworks/src/sensor_agent.c
new file mode 100755
index 00000000..540175fa
--- /dev/null
+++ b/base/sensors/sensor_lite/frameworks/src/sensor_agent.c
@@ -0,0 +1,82 @@
+/*
+ * Copyright (c) 2021 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "sensor_agent_proxy.h"
+
+void *g_proxy;
+
+int32_t GetAllSensors(SensorInfo **sensorInfo, int32_t *count)
+{
+    if (g_proxy == NULL) {
+        g_proxy = GetServiceProxy();
+    }
+    return GetAllSensorsByProxy(g_proxy, sensorInfo, count);
+}
+
+int32_t ActivateSensor(int32_t sensorTypeId, SensorUser *user)
+{
+    if (g_proxy == NULL) {
+        g_proxy = GetServiceProxy();
+    }
+    return ActivateSensorByProxy(g_proxy, sensorTypeId, user);
+}
+
+int32_t DeactivateSensor(int32_t sensorTypeId, SensorUser *user)
+{
+    if (g_proxy == NULL) {
+        g_proxy = GetServiceProxy();
+    }
+    return DeactivateSensorByProxy(g_proxy, sensorTypeId, user);
+}
+
+int32_t SetBatch(int32_t sensorTypeId, SensorUser *user, int64_t samplingInterval, int64_t reportInterval)
+{
+    if (g_proxy == NULL) {
+        g_proxy = GetServiceProxy();
+    }
+    return SetBatchByProxy(g_proxy, sensorTypeId, user, samplingInterval, reportInterval);
+}
+
+int32_t SubscribeSensor(int32_t sensorTypeId, SensorUser *user)
+{
+    if (g_proxy == NULL) {
+        g_proxy = GetServiceProxy();
+    }
+    return SubscribeSensorByProxy(g_proxy, sensorTypeId, user);
+}
+
+int32_t UnsubscribeSensor(int32_t sensorTypeId, SensorUser *user)
+{
+    if (g_proxy == NULL) {
+        g_proxy = GetServiceProxy();
+    }
+    return UnsubscribeSensorByProxy(g_proxy, sensorTypeId, user);
+}
+
+int32_t SetMode(int32_t sensorTypeId, SensorUser *user, int32_t mode)
+{
+    if (g_proxy == NULL) {
+        g_proxy = GetServiceProxy();
+    }
+    return SetModeByProxy(g_proxy, sensorTypeId, user, mode);
+}
+
+int32_t SetOption(int32_t sensorTypeId, SensorUser *user, int32_t option)
+{
+    if (g_proxy == NULL) {
+        g_proxy = GetServiceProxy();
+    }
+    return SetOptionByProxy(g_proxy, sensorTypeId, user, option);
+}
\ No newline at end of file
diff --git a/base/sensors/sensor_lite/frameworks/src/sensor_agent_client.c b/base/sensors/sensor_lite/frameworks/src/sensor_agent_client.c
new file mode 100755
index 00000000..f2b4fd09
--- /dev/null
+++ b/base/sensors/sensor_lite/frameworks/src/sensor_agent_client.c
@@ -0,0 +1,114 @@
+/*
+ * Copyright (c) 2021 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "sensor_agent_proxy.h"
+#include "sensor_service.h"
+
+void *GetServiceProxy()
+{
+    IUnknown *iUnknown = SAMGR_GetInstance()->GetDefaultFeatureApi(SENSOR_SERVICE);
+    if (iUnknown == NULL) {
+        HILOG_ERROR(HILOG_MODULE_APP, "%s get sensor service failed", __func__);
+        return NULL;
+    }
+    SensorFeatureApi *sensor = NULL;
+    int32_t result = iUnknown->QueryInterface(iUnknown, DEFAULT_VERSION, (void **)&sensor);
+    if ((result != 0) || (sensor == NULL)) {
+        HILOG_ERROR(HILOG_MODULE_APP, "%s query interface failed", __func__);
+        return NULL;
+    }
+    return sensor;
+}
+
+int32_t GetAllSensorsByProxy(const void *proxy, SensorInfo **sensorInfo, int32_t *count)
+{
+    if ((proxy == NULL) || (count == NULL)) {
+        HILOG_ERROR(HILOG_MODULE_APP, "%s proxy or count is NULL", __func__);
+        return SENSOR_ERROR_INVALID_PARAM;
+    }
+    SensorFeatureApi *sensor = (SensorFeatureApi *)proxy;
+    return sensor->GetAllSensors(sensorInfo, count);
+}
+
+int32_t ActivateSensorByProxy(const void *proxy, int32_t sensorId, const SensorUser *sensorUser)
+{
+    if (proxy == NULL) {
+        HILOG_ERROR(HILOG_MODULE_APP, "%s proxy is NULL", __func__);
+        return SENSOR_ERROR_INVALID_PARAM;
+    }
+    SensorFeatureApi *sensor = (SensorFeatureApi *)proxy;
+    return sensor->ActivateSensor(sensorId);
+}
+
+int32_t DeactivateSensorByProxy(const void *proxy, int32_t sensorId, const SensorUser *sensorUser)
+{
+    if (proxy == NULL) {
+        HILOG_ERROR(HILOG_MODULE_APP, "%s proxy is NULL", __func__);
+        return SENSOR_ERROR_INVALID_PARAM;
+    }
+    SensorFeatureApi *sensor = (SensorFeatureApi *)proxy;
+    return sensor->DeactivateSensor(sensorId);
+}
+
+int32_t SetBatchByProxy(const void *proxy, int32_t sensorId, const SensorUser *user, int64_t samplingInterval,
+    int64_t reportInterval)
+{
+    if (proxy == NULL) {
+        HILOG_ERROR(HILOG_MODULE_APP, "%s proxy is NULL", __func__);
+        return SENSOR_ERROR_INVALID_PARAM;
+    }
+    SensorFeatureApi *sensor = (SensorFeatureApi *)proxy;
+    return sensor->SetBatch(sensorId, user, samplingInterval, reportInterval);
+}
+
+int32_t SubscribeSensorByProxy(const void *proxy, int32_t sensorId, const SensorUser *sensorUser)
+{
+    if (proxy == NULL) {
+        HILOG_ERROR(HILOG_MODULE_APP, "%s proxy is NULL", __func__);
+        return SENSOR_ERROR_INVALID_PARAM;
+    }
+    SensorFeatureApi *sensor = (SensorFeatureApi *)proxy;
+    return sensor->SubscribeSensor(sensorId, sensorUser);
+}
+
+int32_t UnsubscribeSensorByProxy(const void *proxy, int32_t sensorId, const SensorUser *sensorUser)
+{
+    if (proxy == NULL) {
+        HILOG_ERROR(HILOG_MODULE_APP, "%s proxy is NULL", __func__);
+        return;
+    }
+    SensorFeatureApi *sensor = (SensorFeatureApi *)proxy;
+    return sensor->UnsubscribeSensor(sensorId, sensorUser);
+}
+
+int32_t SetModeByProxy(const void *proxy, int32_t sensorId, const SensorUser *user, int32_t mode)
+{
+    if (proxy == NULL) {
+        HILOG_ERROR(HILOG_MODULE_APP, "%s proxy is NULL", __func__);
+        return SENSOR_ERROR_INVALID_PARAM;
+    }
+    SensorFeatureApi *sensor = (SensorFeatureApi *)proxy;
+    return sensor->SetMode(sensorId, user, mode);
+}
+
+int32_t SetOptionByProxy(const void *proxy, int32_t sensorId, const SensorUser *user, int32_t option)
+{
+    if (proxy == NULL) {
+        HILOG_ERROR(HILOG_MODULE_APP, "%s proxy is NULL", __func__);
+        return SENSOR_ERROR_INVALID_PARAM;
+    }
+    SensorFeatureApi *sensor = (SensorFeatureApi *)proxy;
+    return sensor->SetOption(sensorId, user, option);
+}
diff --git a/base/sensors/sensor_lite/frameworks/src/sensor_agent_proxy.c b/base/sensors/sensor_lite/frameworks/src/sensor_agent_proxy.c
new file mode 100755
index 00000000..c14a04de
--- /dev/null
+++ b/base/sensors/sensor_lite/frameworks/src/sensor_agent_proxy.c
@@ -0,0 +1,530 @@
+/*
+ * Copyright (c) 2021 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "sensor_agent_proxy.h"
+
+#include <stdint.h>
+#include <stdlib.h>
+#include <string.h>
+
+static SensorInfo *g_sensorLists;
+static SensorEvent *g_sensorEvent;
+static int32_t g_sensorListsLength;
+static SvcIdentity g_svcIdentity = {
+    .handle = 0,
+    .token = 0,
+};
+
+typedef struct CallbackNode {
+    RecordSensorCallback callback;
+    void *next;
+} CallbackNode;
+
+CallbackNode g_callbackNodes[(int32_t)SENSOR_TYPE_ID_MAX] = {
+    {NULL, NULL}, {NULL, NULL}, {NULL, NULL}, {NULL, NULL}, {NULL, NULL},
+    {NULL, NULL}, {NULL, NULL}, {NULL, NULL}, {NULL, NULL}, {NULL, NULL},
+    {NULL, NULL}, {NULL, NULL}, {NULL, NULL}, {NULL, NULL}, {NULL, NULL},
+    {NULL, NULL}, {NULL, NULL}, {NULL, NULL}, {NULL, NULL}, {NULL, NULL},
+    {NULL, NULL}, {NULL, NULL}, {NULL, NULL}, {NULL, NULL}, {NULL, NULL},
+    {NULL, NULL}, {NULL, NULL}, {NULL, NULL}, {NULL, NULL}, {NULL, NULL},
+};
+
+int32_t IsRegisterCallback()
+{
+    HILOG_DEBUG(HILOG_MODULE_APP, "%s begin", __func__);
+    int32_t isRegisterCallback = 0;
+    for (int32_t sensorTypeId = 0; sensorTypeId < SENSOR_TYPE_ID_MAX; sensorTypeId++) {
+        if (g_callbackNodes[sensorTypeId].next != NULL) {
+            isRegisterCallback = 1;
+            break;
+        }
+    }
+    return isRegisterCallback;
+}
+
+static int32_t InsertCallbackNode(int32_t sensorTypeId, const SensorUser *user)
+{
+    HILOG_DEBUG(HILOG_MODULE_APP, "%s begin", __func__);
+    if ((sensorTypeId >= (int32_t)SENSOR_TYPE_ID_MAX) || (sensorTypeId < 0)) {
+        HILOG_ERROR(HILOG_MODULE_SEN, "%s invalid sensor type id", __func__);
+        return SENSOR_ERROR_INVALID_PARAM;
+    }
+    CallbackNode *pre = &(g_callbackNodes[sensorTypeId]);
+    CallbackNode *node = (CallbackNode *)(g_callbackNodes[sensorTypeId].next);
+    while (node != NULL) {
+        if (node->callback == user->callback) {
+            HILOG_DEBUG(HILOG_MODULE_SEN, "%s callback has been inserted", __func__);
+            return SENSOR_OK;
+        }
+        pre = node;
+        node = (CallbackNode *)(node->next);
+    }
+    CallbackNode *nd = (CallbackNode *)malloc(sizeof(CallbackNode));
+    if (nd == NULL) {
+        HILOG_ERROR(HILOG_MODULE_SEN, "%s malloc failed", __func__);
+        return SENSOR_ERROR_INVALID_PARAM;
+    }
+    nd->callback = user->callback;
+    nd->next = NULL;
+    pre->next = nd;
+    return SENSOR_OK;
+}
+
+static int32_t DeleteCallbackNode(int32_t sensorTypeId, const SensorUser *user)
+{
+    HILOG_DEBUG(HILOG_MODULE_APP, "%s begin", __func__);
+    if ((sensorTypeId >= (int32_t)SENSOR_TYPE_ID_MAX) || (sensorTypeId < 0)) {
+        HILOG_ERROR(HILOG_MODULE_SEN, "%s invalid sensor id", __func__);
+        return SENSOR_ERROR_INVALID_PARAM;
+    }
+    CallbackNode *pre = &(g_callbackNodes[sensorTypeId]);
+    CallbackNode *node = (CallbackNode *)(g_callbackNodes[sensorTypeId].next);
+    while (node != NULL) {
+        if (node->callback == user->callback) {
+            pre->next = (CallbackNode *)(node->next);
+            free(node);
+            return SENSOR_OK;
+        }
+        node = (CallbackNode *)(node->next);
+    }
+    return SENSOR_ERROR_INVALID_PARAM;
+}
+
+void *GetServiceProxy()
+{
+    IUnknown *iUnknown = SAMGR_GetInstance()->GetDefaultFeatureApi(SENSOR_SERVICE);
+    if (iUnknown == NULL) {
+        HILOG_ERROR(HILOG_MODULE_APP, "%s get sensor service failed", __func__);
+        return NULL;
+    }
+    IClientProxy *sensorApi = NULL;
+    (void)iUnknown->QueryInterface(iUnknown, CLIENT_PROXY_VER, (void **)&sensorApi);
+    return sensorApi;
+}
+
+typedef struct SensorNotifyBuffer {
+    int32_t retCode;
+    int32_t count;
+    SensorInfo **sensorInfo;
+} SensorNotifyBuffer;
+
+int32_t GetSensorInfos(IOwner owner, IpcIo *reply)
+{
+    HILOG_DEBUG(HILOG_MODULE_APP, "%s begin", __func__);
+    SensorNotifyBuffer *notify = (SensorNotifyBuffer *)owner;
+    notify->retCode = IpcIoPopInt32(reply);
+    if (notify->retCode < 0) {
+        HILOG_ERROR(HILOG_MODULE_APP, "%s failed, retCode: %d", __func__, notify->retCode);
+        return SENSOR_ERROR_INVALID_PARAM;
+    }
+    notify->count = IpcIoPopInt32(reply);
+    BuffPtr *dataBuf = IpcIoPopDataBuff(reply);
+    if ((notify->count <= 0) || (dataBuf == NULL) || (dataBuf->buff == NULL)) {
+        HILOG_ERROR(HILOG_MODULE_APP, "%s failed, count is incorrect or dataBuf is NULL or buff is NULL", __func__);
+        notify->retCode = SENSOR_ERROR_INVALID_PARAM;
+        return SENSOR_ERROR_INVALID_PARAM;
+    }
+    SensorInfo *sensorInfo = (SensorInfo *)(dataBuf->buff);
+    *(notify->sensorInfo) = (SensorInfo *)malloc(sizeof(SensorInfo) * notify->count);
+    if (*(notify->sensorInfo) == NULL) {
+        HILOG_ERROR(HILOG_MODULE_APP, "%s malloc sensorInfo failed", __func__);
+        FreeBuffer(NULL, dataBuf->buff);
+        notify->retCode = SENSOR_ERROR_INVALID_PARAM;
+        return SENSOR_ERROR_INVALID_PARAM;
+    }
+    for (int32_t i = 0; i < notify->count; i++) {
+        if (memcpy_s((*(notify->sensorInfo) + i), sizeof(SensorInfo), (sensorInfo + i),
+            sizeof(SensorInfo))) {
+            HILOG_ERROR(HILOG_MODULE_APP, "%s copy sensorInfo failed", __func__);
+            FreeBuffer(NULL, dataBuf->buff);
+            free(*(notify->sensorInfo));
+            *(notify->sensorInfo) = NULL;
+            notify->retCode = SENSOR_ERROR_INVALID_PARAM;
+            return SENSOR_ERROR_INVALID_PARAM;
+        }
+    }
+    FreeBuffer(NULL, dataBuf->buff);
+    return notify->retCode;
+}
+
+int32_t Notify(IOwner owner, int32_t code, IpcIo *reply)
+{
+    HILOG_DEBUG(HILOG_MODULE_APP, "%s begin", __func__);
+    int32_t functionId = IpcIoPopInt32(reply);
+    if (functionId == SENSOR_SERVICE_ID_GetAllSensors) {
+        return GetSensorInfos(owner, reply);
+    }
+    int32_t *ret = (int32_t *)owner;
+    if ((functionId > SENSOR_SERVICE_ID_GetAllSensors) && (functionId < SENSORMGR_LISTENER_NAME_LEN)) {
+        *ret = IpcIoPopInt32(reply);
+        HILOG_DEBUG(HILOG_MODULE_APP, "%s ret: %d", __func__, *ret);
+    } else {
+        *ret = SENSOR_ERROR_INVALID_PARAM;
+        HILOG_ERROR(HILOG_MODULE_APP, "%s functionId: %d is invalid", __func__, functionId);
+    }
+    return *ret;
+}
+
+void DispatchData(SensorEvent *sensorEvent)
+{
+    HILOG_DEBUG(HILOG_MODULE_APP, "%s begin", __func__);
+    if (sensorEvent == NULL) {
+        HILOG_ERROR(HILOG_MODULE_APP, "%s failed, sensorEvent is NULL", __func__);
+        return;
+    }
+    int32_t sensorId = sensorEvent->sensorTypeId;
+    CallbackNode *node = (CallbackNode *)(g_callbackNodes[sensorId].next);
+    while (node != NULL) {
+        node->callback(sensorEvent);
+        node = (CallbackNode *)(node->next);
+    }
+}
+
+int32_t SensorChannelCallback(const IpcContext *context, void *ipcMsg, IpcIo *io, void *arg)
+{
+    HILOG_DEBUG(HILOG_MODULE_APP, "%s begin", __func__);
+    if (ipcMsg == NULL || io == NULL) {
+        HILOG_ERROR(HILOG_MODULE_APP, "%s failed, ipcMsg or io is NULL", __func__);
+        return SENSOR_ERROR_INVALID_PARAM;
+    }
+    BuffPtr *eventBuff = IpcIoPopDataBuff(io);
+    BuffPtr *sensorDataBuff = IpcIoPopDataBuff(io);
+    if ((eventBuff == NULL) || (eventBuff->buff == NULL) || (sensorDataBuff == NULL) ||
+        (sensorDataBuff->buff == NULL)) {
+        HILOG_ERROR(HILOG_MODULE_APP, "%s failed, eventBuff or sensorDataBuff or buff is NULL", __func__);
+        return SENSOR_ERROR_INVALID_PARAM;
+    }
+    SensorEvent *event = (SensorEvent *)(eventBuff->buff);
+    uint8_t *sensorData = (uint8_t *)(sensorDataBuff->buff);
+    g_sensorEvent->dataLen = event->dataLen;
+    g_sensorEvent->timestamp = event->timestamp;
+    g_sensorEvent->mode = event->mode;
+    g_sensorEvent->option = event->option;
+    g_sensorEvent->sensorTypeId = event->sensorTypeId;
+    g_sensorEvent->version = event->version;
+    g_sensorEvent->data = sensorData;
+    DispatchData(g_sensorEvent);
+    FreeBuffer(NULL, eventBuff->buff);
+    FreeBuffer(NULL, sensorDataBuff->buff);
+    return SENSOR_OK;
+}
+
+int32_t RegisterSensorChannel(const void *proxy, int32_t sensorId)
+{
+    HILOG_DEBUG(HILOG_MODULE_APP, "%s begin", __func__);
+    if (!IsRegisterCallback()) {
+        int32_t ret = RegisterIpcCallback(SensorChannelCallback, 0, IPC_WAIT_FOREVER, &g_svcIdentity, NULL);
+        if (ret != LITEIPC_OK) {
+            HILOG_ERROR(HILOG_MODULE_APP, "%s failed, ret: %d", __func__, ret);
+            return SENSOR_ERROR_INVALID_PARAM;
+        }
+        IpcIo request;
+        char data[IPC_IO_DATA_MAX];
+        IpcIoInit(&request, data, IPC_IO_DATA_MAX, IPC_MAX_OBJECTS);
+        IpcIoPushInt32(&request, sensorId);
+        IpcIoPushSvc(&request, &g_svcIdentity);
+        if (!IpcIoAvailable(&request)) {
+            HILOG_ERROR(HILOG_MODULE_APP, "%s ipc communication failed", __func__);
+            return SENSOR_ERROR_INVALID_PARAM;
+        }
+        IClientProxy *client = (IClientProxy *)proxy;
+        int32_t retCode = -1;
+        ret = client->Invoke(client, SENSOR_SERVICE_ID_SubscribeSensor, &request, &retCode, Notify);
+        if ((ret != LITEIPC_OK) || (retCode != SENSOR_OK)) {
+            HILOG_ERROR(HILOG_MODULE_APP, "%s failed, ret: %d, retCode: %d", __func__, ret, retCode);
+            return SENSOR_ERROR_INVALID_PARAM;
+        }
+        if (g_sensorEvent == NULL) {
+            g_sensorEvent = (SensorEvent *)malloc(sizeof(SensorEvent));
+            if (g_sensorEvent == NULL) {
+                HILOG_ERROR(HILOG_MODULE_APP, "%s malloc failed", __func__);
+                return SENSOR_ERROR_INVALID_PARAM;
+            }
+        }
+    } else {
+        HILOG_DEBUG(HILOG_MODULE_APP, "%s sensorChannel has been registered ", __func__);
+    }
+    return SENSOR_OK;
+}
+
+int32_t UnregisterSensorChannel(const void *proxy, int32_t sensorId)
+{
+    HILOG_DEBUG(HILOG_MODULE_APP, "%s begin", __func__);
+    if (!IsRegisterCallback()) {
+        (void) UnregisterIpcCallback(g_svcIdentity);
+        IpcIo request;
+        char data[IPC_IO_DATA_MAX];
+        IpcIoInit(&request, data, IPC_IO_DATA_MAX, 0);
+        IpcIoPushInt32(&request, sensorId);
+        if (!IpcIoAvailable(&request)) {
+            HILOG_ERROR(HILOG_MODULE_APP, "%s ipc communication failed", __func__);
+            return SENSOR_ERROR_INVALID_PARAM;
+        }
+        int32_t retCode = -1;
+        IClientProxy *client = (IClientProxy *)proxy;
+        int32_t ret = client->Invoke(client, SENSOR_SERVICE_ID_UnsubscribeSensor, &request, &retCode, Notify);
+        if ((ret != SENSOR_OK) || (retCode != SENSOR_OK)) {
+            HILOG_ERROR(HILOG_MODULE_APP, "%s failed, ret: %d, retCode: %d", __func__, ret, retCode);
+            return SENSOR_ERROR_INVALID_PARAM;
+        }
+        if (g_sensorEvent != NULL) {
+            free(g_sensorEvent);
+            g_sensorEvent = NULL;
+        }
+        HILOG_DEBUG(HILOG_MODULE_APP, "%s sensorChannel has been destroyed ", __func__);
+    }
+    return SENSOR_OK;
+}
+
+int32_t InitSensorList(const void *proxy)
+{
+    HILOG_DEBUG(HILOG_MODULE_APP, "%s begin", __func__);
+    if (proxy == NULL) {
+        HILOG_ERROR(HILOG_MODULE_APP, "%s proxy is NULL", __func__);
+        return SENSOR_ERROR_INVALID_PARAM;
+    }
+    SensorNotifyBuffer owner = {
+        .retCode = -1,
+        .count = 0,
+        .sensorInfo = &g_sensorLists,
+    };
+    IpcIo request;
+    char data[IPC_IO_DATA_MAX];
+    IpcIoInit(&request, data, IPC_IO_DATA_MAX, IPC_MAX_OBJECTS);
+    if (!IpcIoAvailable(&request)) {
+        HILOG_ERROR(HILOG_MODULE_APP, "%s ipc communication failed", __func__);
+        return SENSOR_ERROR_INVALID_PARAM;
+    }
+    IClientProxy *client = (IClientProxy *)proxy;
+    int32_t ret = client->Invoke(client, SENSOR_SERVICE_ID_GetAllSensors, &request, &owner, Notify);
+    if ((ret != SENSOR_OK) || (owner.retCode != SENSOR_OK)) {
+        HILOG_ERROR(HILOG_MODULE_APP, "%s failed, ret: %d, retCode: %d", __func__, ret, owner.retCode);
+        return SENSOR_ERROR_INVALID_PARAM;
+    }
+    g_sensorListsLength = owner.count;
+    return SENSOR_OK;
+}
+
+int32_t GetAllSensorsByProxy(const void *proxy, SensorInfo **sensorInfo, int32_t *count)
+{
+    HILOG_DEBUG(HILOG_MODULE_APP, "%s begin", __func__);
+    if ((sensorInfo == NULL) || (count == NULL)) {
+        HILOG_ERROR(HILOG_MODULE_APP, "%s sensorInfo or count is NULL", __func__);
+        return SENSOR_ERROR_INVALID_PARAM;
+    }
+    if (g_sensorLists == NULL) {
+        int32_t ret = InitSensorList(proxy);
+        if (ret != SENSOR_OK) {
+            HILOG_ERROR(HILOG_MODULE_APP, "%s init sensorList failed, ret: %d", __func__, ret);
+            return SENSOR_ERROR_INVALID_PARAM;
+        }
+    }
+    *count = g_sensorListsLength;
+    *sensorInfo = g_sensorLists;
+    return SENSOR_OK;
+}
+
+int32_t ActivateSensorByProxy(const void *proxy, int32_t sensorId, const SensorUser *user)
+{
+    HILOG_DEBUG(HILOG_MODULE_APP, "%s begin", __func__);
+    if ((proxy == NULL) || (user == NULL)) {
+        HILOG_ERROR(HILOG_MODULE_APP, "%s proxy or user is NULL", __func__);
+        return SENSOR_ERROR_INVALID_PARAM;
+    }
+    IpcIo request;
+    char data[IPC_IO_DATA_MAX];
+    IpcIoInit(&request, data, IPC_IO_DATA_MAX, 0);
+    IpcIoPushInt32(&request, sensorId);
+    if (!IpcIoAvailable(&request)) {
+        HILOG_ERROR(HILOG_MODULE_APP, "%s ipc communication failed", __func__);
+        return SENSOR_ERROR_INVALID_PARAM;
+    }
+    int32_t retCode = -1;
+    IClientProxy *client = (IClientProxy *)proxy;
+    int32_t ret = client->Invoke(client, SENSOR_SERVICE_ID_ActivateSensor, &request, &retCode, Notify);
+    if ((ret != SENSOR_OK) || (retCode != SENSOR_OK)) {
+        HILOG_ERROR(HILOG_MODULE_APP, "%s failed, ret: %d, retCode: %d", __func__, ret, retCode);
+        return SENSOR_ERROR_INVALID_PARAM;
+    }
+    return retCode;
+}
+
+int32_t DeactivateSensorByProxy(const void *proxy, int32_t sensorId, const SensorUser *user)
+{
+    HILOG_DEBUG(HILOG_MODULE_APP, "%s begin", __func__);
+    if ((proxy == NULL) || (user == NULL)) {
+        HILOG_ERROR(HILOG_MODULE_APP, "%s proxy or user is NULL", __func__);
+        return SENSOR_ERROR_INVALID_PARAM;
+    }
+    IpcIo request;
+    char data[IPC_IO_DATA_MAX];
+    IpcIoInit(&request, data, IPC_IO_DATA_MAX, 0);
+    IpcIoPushInt32(&request, sensorId);
+    if (!IpcIoAvailable(&request)) {
+        HILOG_ERROR(HILOG_MODULE_APP, "%s ipc communication failed", __func__);
+        return SENSOR_ERROR_INVALID_PARAM;
+    }
+    int32_t retCode = -1;
+    IClientProxy *client = (IClientProxy *)proxy;
+    int32_t ret = client->Invoke(client, SENSOR_SERVICE_ID_DeactivateSensor, &request, &retCode, Notify);
+    if ((ret != SENSOR_OK) || (retCode != SENSOR_OK)) {
+        HILOG_ERROR(HILOG_MODULE_APP, "%s failed, ret: %d, retCode: %d", __func__, ret, retCode);
+        return SENSOR_ERROR_INVALID_PARAM;
+    }
+    return retCode;
+}
+
+int32_t SetBatchByProxy(const void *proxy, int32_t sensorId, const SensorUser *user, int64_t samplingInterval,
+    int64_t reportInterval)
+{
+    HILOG_DEBUG(HILOG_MODULE_APP, "%s begin", __func__);
+    if ((proxy == NULL) || (user == NULL)) {
+        HILOG_ERROR(HILOG_MODULE_APP, "%s proxy or user is NULL", __func__);
+        return SENSOR_ERROR_INVALID_PARAM;
+    }
+    IpcIo request;
+    char data[IPC_IO_DATA_MAX];
+    IpcIoInit(&request, data, IPC_IO_DATA_MAX, 0);
+    IpcIoPushInt32(&request, sensorId);
+    IpcIoPushInt64(&request, samplingInterval);
+    IpcIoPushInt64(&request, reportInterval);
+    if (!IpcIoAvailable(&request)) {
+        HILOG_ERROR(HILOG_MODULE_APP, "%s ipc communication failed", __func__);
+        return SENSOR_ERROR_INVALID_PARAM;
+    }
+    int32_t retCode = -1;
+    IClientProxy *client = (IClientProxy *)proxy;
+    int32_t ret = client->Invoke(client, SENSOR_SERVICE_ID_SetBatchs, &request, &retCode, Notify);
+    if ((ret != SENSOR_OK) || (retCode != SENSOR_OK)) {
+        HILOG_ERROR(HILOG_MODULE_APP, "%s failed, ret: %d, retCode: %d", __func__, ret, retCode);
+        return SENSOR_ERROR_INVALID_PARAM;
+    }
+    return retCode;
+}
+
+int32_t CheckSensorTypeId(int32_t sensorTypeId)
+{
+    if ((g_sensorLists == NULL) || (g_sensorListsLength == 0)) {
+        HILOG_ERROR(HILOG_MODULE_APP, "%s g_sensorLists or g_sensorListsLength is invalid", __func__);
+        return SENSOR_ERROR_INVALID_PARAM;
+    }
+    for (int32_t i = 0; i < g_sensorListsLength; i++) {
+        if ((g_sensorLists + i)->sensorId == sensorTypeId) {
+            return SENSOR_OK;
+        }
+    }
+    return SENSOR_ERROR_INVALID_PARAM;
+}
+
+int32_t SubscribeSensorByProxy(const void *proxy, int32_t sensorId, const SensorUser *user)
+{
+    HILOG_DEBUG(HILOG_MODULE_APP, "%s begin", __func__);
+    if ((proxy == NULL) || (user == NULL) || (user->callback == NULL)) {
+        HILOG_ERROR(HILOG_MODULE_APP, "%s proxy or user or callback is NULL", __func__);
+        return SENSOR_ERROR_INVALID_PARAM;
+    }
+    if (CheckSensorTypeId(sensorId)) {
+        HILOG_ERROR(HILOG_MODULE_APP, "%s sensorid: %d is invalid", __func__, sensorId);
+        return SENSOR_ERROR_INVALID_PARAM;
+    }
+    int32_t ret = RegisterSensorChannel(proxy, sensorId);
+    if (ret != SENSOR_OK) {
+        HILOG_ERROR(HILOG_MODULE_APP, "%s register sensor channel failed, ret: %d", __func__, ret);
+        return SENSOR_ERROR_INVALID_PARAM;
+    }
+    ret = InsertCallbackNode(sensorId, user);
+    if (ret != SENSOR_OK) {
+        HILOG_ERROR(HILOG_MODULE_APP, "%s insert callback node failed, ret: %d", __func__, ret);
+        return SENSOR_ERROR_INVALID_PARAM;
+    }
+    return SENSOR_OK;
+}
+
+int32_t UnsubscribeSensorByProxy(const void *proxy, int32_t sensorId, const SensorUser *user)
+{
+    HILOG_DEBUG(HILOG_MODULE_APP, "%s begin", __func__);
+    if ((proxy == NULL) || (user == NULL) || (user->callback == NULL)) {
+        HILOG_ERROR(HILOG_MODULE_APP, "%s proxy or user or callback is NULL", __func__);
+        return SENSOR_ERROR_INVALID_PARAM;
+    }
+    if (CheckSensorTypeId(sensorId)) {
+        HILOG_ERROR(HILOG_MODULE_APP, "%s sensorid: %d is invalid", __func__, sensorId);
+        return SENSOR_ERROR_INVALID_PARAM;
+    }
+    int32_t ret = DeleteCallbackNode(sensorId, user);
+    if (ret != SENSOR_OK) {
+        HILOG_ERROR(HILOG_MODULE_APP, "%s delete callback node failed, ret: %d", __func__, ret);
+        return SENSOR_ERROR_INVALID_PARAM;
+    }
+
+    ret = UnregisterSensorChannel(proxy, sensorId);
+    if (ret != SENSOR_OK) {
+        HILOG_ERROR(HILOG_MODULE_APP, "%s delete callback node failed, ret: %d", __func__, ret);
+        return SENSOR_ERROR_INVALID_PARAM;
+    }
+    return SENSOR_OK;
+}
+
+int32_t SetModeByProxy(const void *proxy, int32_t sensorId, const SensorUser *user, int32_t mode)
+{
+    HILOG_DEBUG(HILOG_MODULE_APP, "%s begin", __func__);
+    if ((proxy == NULL) || (user == NULL)) {
+        HILOG_ERROR(HILOG_MODULE_APP, "%s proxy or user is NULL", __func__);
+        return SENSOR_ERROR_INVALID_PARAM;
+    }
+    IpcIo request;
+    char data[IPC_IO_DATA_MAX];
+    IpcIoInit(&request, data, IPC_IO_DATA_MAX, 0);
+    IpcIoPushInt32(&request, sensorId);
+    IpcIoPushInt32(&request, mode);
+    if (!IpcIoAvailable(&request)) {
+        HILOG_ERROR(HILOG_MODULE_APP, "%s ipc communication failed", __func__);
+        return SENSOR_ERROR_INVALID_PARAM;
+    }
+    int32_t retCode = -1;
+    IClientProxy *client = (IClientProxy *)proxy;
+    int32_t ret = client->Invoke(client, SENSOR_SERVICE_ID_SetMode, &request, &retCode, Notify);
+    if ((ret != SENSOR_OK) || (retCode != SENSOR_OK)) {
+        HILOG_ERROR(HILOG_MODULE_APP, "%s failed, ret: %d, retCode: %d", __func__, ret, retCode);
+        return SENSOR_ERROR_INVALID_PARAM;
+    }
+    return retCode;
+}
+
+int32_t SetOptionByProxy(const void *proxy, int32_t sensorId, const SensorUser *user, int32_t option)
+{
+    HILOG_DEBUG(HILOG_MODULE_APP, "%s begin", __func__);
+    if ((proxy == NULL) || (user == NULL)) {
+        HILOG_ERROR(HILOG_MODULE_APP, "%s proxy or user is NULL", __func__);
+        return SENSOR_ERROR_INVALID_PARAM;
+    }
+    IpcIo request;
+    char data[IPC_IO_DATA_MAX];
+    IpcIoInit(&request, data, IPC_IO_DATA_MAX, 0);
+    IpcIoPushInt32(&request, sensorId);
+    IpcIoPushInt32(&request, option);
+    if (!IpcIoAvailable(&request)) {
+        HILOG_ERROR(HILOG_MODULE_APP, "%s ipc communication failed", __func__);
+        return SENSOR_ERROR_INVALID_PARAM;
+    }
+    int32_t retCode = -1;
+    IClientProxy *client = (IClientProxy *)proxy;
+    int32_t ret = client->Invoke(client, SENSOR_SERVICE_ID_SetOption, &request, &retCode, Notify);
+    if ((ret != SENSOR_OK) || (retCode != SENSOR_OK)) {
+        HILOG_ERROR(HILOG_MODULE_APP, "%s failed, ret: %d, retCode: %d", __func__, ret, retCode);
+        return SENSOR_ERROR_INVALID_PARAM;
+    }
+    return retCode;
+}
diff --git a/base/sensors/sensor_lite/interfaces/kits/native/BUILD.gn b/base/sensors/sensor_lite/interfaces/kits/native/BUILD.gn
new file mode 100755
index 00000000..378f6e3f
--- /dev/null
+++ b/base/sensors/sensor_lite/interfaces/kits/native/BUILD.gn
@@ -0,0 +1,34 @@
+# Copyright (c) 2021 Huawei Device Co., Ltd.
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+import("//build/lite/config/component/lite_component.gni")
+import("//build/lite/ndk/ndk.gni")
+
+group("unittest") {
+  deps = [
+    "./test/performance:performance",
+    "./test/unittest:unittest",
+  ]
+}
+
+group("sensors_api") {
+  deps = []
+  if (ohos_kernel_type == "liteos_a") {
+    deps += [ ":sensoragent_notes" ]
+  }
+}
+
+ndk_lib("sensoragent_notes") {
+  deps = []
+  head_files = [ "//base/sensors/sensor_lite/interfaces/kits/native/include" ]
+}
diff --git a/base/sensors/sensor_lite/interfaces/kits/native/include/sensor_agent.h b/base/sensors/sensor_lite/interfaces/kits/native/include/sensor_agent.h
new file mode 100755
index 00000000..4654751b
--- /dev/null
+++ b/base/sensors/sensor_lite/interfaces/kits/native/include/sensor_agent.h
@@ -0,0 +1,143 @@
+/*
+ * Copyright (c) 2021 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+/**
+ * @addtogroup PanSensor
+ * @{
+ *
+ * @brief Provides standard open APIs for you to use common capabilities of sensors.
+ *
+ * For example, you can call these APIs to obtain sensor information,
+ * subscribe to or unsubscribe from sensor data, enable or disable a sensor,
+ * and set the sensor data reporting mode.
+ *
+ * @since 5
+ */
+
+/**
+ * @file sensor_agent.h
+ *
+ * @brief Declares common APIs for sensor management, such as APIs for subscribing to
+ * and obtaining sensor data, enabling a sensor, and setting the sensor data reporting mode.
+ *
+ * @since 5
+ */
+
+#ifndef SENSOR_AGENT_H
+#define SENSOR_AGENT_H
+
+#include "sensor_agent_type.h"
+
+#ifdef __cplusplus
+#if __cplusplus
+extern "C" {
+#endif
+#endif
+
+/**
+ * @brief Obtains information about all sensors in the system.
+ *
+ * @param sensorInfo Indicates the double pointer to the information about all sensors in the system.
+ * For details, see {@link SensorInfo}.
+ * @param count Indicates the pointer to the total number of sensors in the system.
+ * @return Returns <b>0</b> if the information is obtained; returns a non-zero value otherwise.
+ *
+ * @since 5
+ */
+int32_t GetAllSensors(SensorInfo **sensorInfo, int32_t *count);
+
+/**
+ * @brief Subscribes to sensor data. The system will report the obtained sensor data to the subscriber.
+ *
+ * @param sensorTypeId Indicates the ID of a sensor type. For details, see {@link SensorTypeId}.
+ * @param user Indicates the pointer to the sensor subscriber that requests sensor data. For details,
+ * see {@link SensorUser}. A subscriber can obtain data from only one sensor.
+ * @return Returns <b>0</b> if the subscription is successful; returns a non-zero value otherwise.
+ *
+ * @since 5
+ */
+int32_t SubscribeSensor(int32_t sensorTypeId, SensorUser *user);
+
+/**
+ * @brief Unsubscribes from sensor data.
+ *
+ * @param sensorTypeId Indicates the ID of a sensor type. For details, see {@link SensorTypeId}.
+ * @param user Indicates the pointer to the sensor subscriber that requests sensor data.
+ * For details, see {@link SensorUser}. A subscriber can obtain data from only one sensor.
+ * @return Returns <b>0</b> if the unsubscription is successful; returns a non-zero value otherwise.
+ *
+ * @since 5
+ */
+int32_t UnsubscribeSensor(int32_t sensorTypeId, SensorUser *user);
+
+/**
+ * @brief Sets the data sampling interval and data reporting interval for the specified sensor.
+ *
+ * @param sensorTypeId Indicates the ID of a sensor type. For details, see {@link SensorTypeId}.
+ * @param user Indicates the pointer to the sensor subscriber that requests sensor data.
+ * For details, see {@link SensorUser}. A subscriber can obtain data from only one sensor.
+ * @param samplingInterval Indicates the sensor data sampling interval to set, in nanoseconds.
+ * @param reportInterval Indicates the sensor data reporting interval, in nanoseconds.
+ * @return Returns <b>0</b> if the setting is successful; returns a non-zero value otherwise.
+ *
+ * @since 5
+ */
+int32_t SetBatch(int32_t sensorTypeId, SensorUser *user, int64_t samplingInterval, int64_t reportInterval);
+
+/**
+ * @brief Enables the sensor that has been subscribed to. The subscriber can obtain the sensor data
+ * only after the sensor is enabled.
+ *
+ * @param sensorTypeId Indicates the ID of a sensor type. For details, see {@link SensorTypeId}.
+ * @param user Indicates the pointer to the sensor subscriber that requests sensor data.
+ * For details, see {@link SensorUser}. A subscriber can obtain data from only one sensor.
+ * @return Returns <b>0</b> if the sensor is successfully enabled; returns a non-zero value otherwise.
+ *
+ * @since 5
+ */
+int32_t ActivateSensor(int32_t sensorTypeId, SensorUser *user);
+
+/**
+ * @brief Disables an enabled sensor.
+ *
+ * @param sensorTypeId Indicates the ID of a sensor type. For details, see {@link SensorTypeId}.
+ * @param user Indicates the pointer to the sensor subscriber that requests sensor data.
+ * For details, see {@link SensorUser}. A subscriber can obtain data from only one sensor.
+ * @return Returns <b>0</b> if the sensor is successfully disabled; returns a non-zero value otherwise.
+ *
+ * @since 5
+ */
+int32_t DeactivateSensor(int32_t sensorTypeId, SensorUser *user);
+
+/**
+ * @brief Sets the data reporting mode for the specified sensor.
+ *
+ * @param sensorTypeId Indicates the ID of a sensor type. For details, see {@link SensorTypeId}.
+ * @param user Indicates the pointer to the sensor subscriber that requests sensor data.
+ * For details, see {@link SensorUser}. A subscriber can obtain data from only one sensor.
+ * @param mode Indicates the data reporting mode to set. For details, see {@link SensorMode}.
+ * @return Returns <b>0</b> if the sensor data reporting mode is successfully set; returns a non-zero value otherwise.
+ *
+ * @since 5
+ */
+int32_t SetMode(int32_t sensorTypeId, SensorUser *user, int32_t mode);
+
+#ifdef __cplusplus
+#if __cplusplus
+}
+#endif
+#endif
+#endif /* SENSOR_AGENT_H */
+/** @} */
\ No newline at end of file
diff --git a/base/sensors/sensor_lite/interfaces/kits/native/include/sensor_agent_type.h b/base/sensors/sensor_lite/interfaces/kits/native/include/sensor_agent_type.h
new file mode 100755
index 00000000..c4d8c60b
--- /dev/null
+++ b/base/sensors/sensor_lite/interfaces/kits/native/include/sensor_agent_type.h
@@ -0,0 +1,182 @@
+/*
+ * Copyright (c) 2021 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+/**
+ * @addtogroup PanSensor
+ * @{
+ *
+ * @brief Provides standard open APIs for you to use common capabilities of sensors.
+ *
+ * For example, you can call these APIs to obtain sensor information,
+ * subscribe to or unsubscribe from sensor data, enable or disable a sensor,
+ * and set the sensor data reporting mode.
+ *
+ * @since 5
+ */
+
+/**
+ * @file sensor_agent_type.h
+ *
+ * @brief Defines the basic data used by the sensor agent to manage sensors.
+ *
+ * @since 5
+ */
+
+#ifndef SENSOR_AGENT_TYPE_H
+#define SENSOR_AGENT_TYPE_H
+
+#include <stdint.h>
+
+#ifdef __cplusplus
+#if __cplusplus
+extern "C" {
+#endif
+#endif
+
+#ifndef SENSOR_NAME_MAX_LEN
+/** Maximum length of the sensor name */
+#define SENSOR_NAME_MAX_LEN 16
+#endif /* SENSOR_NAME_MAX_LEN */
+
+#ifndef SENSOR_USER_DATA_SIZE
+/** Size of sensor data */
+#define SENSOR_USER_DATA_SIZE 104
+#endif /* SENSOR_USER_DATA_SIZE */
+
+#ifndef VERSION_MAX_LEN
+/** Maximum length of the sensor version */
+#define VERSION_MAX_LEN 16
+#endif /* SENSOR_USER_DATA_SIZE */
+
+/**
+ * @brief Enumerates sensor types.
+ *
+ * @since 5
+ */
+typedef enum SensorTypeId {
+    SENSOR_TYPE_ID_NONE = 0,                   /**< None */
+    SENSOR_TYPE_ID_ACCELEROMETER = 1,          /**< Acceleration sensor */
+    SENSOR_TYPE_ID_GYROSCOPE = 2,              /**< Gyroscope sensor */
+    SENSOR_TYPE_ID_PHOTOPLETHYSMOGRAPH = 3,    /**< Photoplethysmography sensor */
+    SENSOR_TYPE_ID_ELECTROCARDIOGRAPH = 4,     /**< Electrocardiogram (ECG) sensor */
+    SENSOR_TYPE_ID_AMBIENT_LIGHT = 5,          /**< Ambient light sensor */
+    SENSOR_TYPE_ID_MAGNETIC_FIELD = 6,         /**< Magnetic field sensor */
+    SENSOR_TYPE_ID_CAPACITIVE = 7,             /**< Capacitive sensor */
+    SENSOR_TYPE_ID_BAROMETER = 8,              /**< Barometric pressure sensor */
+    SENSOR_TYPE_ID_TEMPERATURE = 9,            /**< Temperature sensor */
+    SENSOR_TYPE_ID_HALL = 10,                  /**< Hall effect sensor */
+    SENSOR_TYPE_ID_GESTURE = 11,               /**< Gesture sensor */
+    SENSOR_TYPE_ID_PROXIMITY = 12,             /**< Proximity sensor */
+    SENSOR_TYPE_ID_HUMIDITY = 13,              /**< Humidity sensor */
+    SENSOR_TYPE_ID_PHYSICAL_MAX = 0xFF,        /**< Maximum type ID of a physical sensor */
+    SENSOR_TYPE_ID_ORIENTATION = 256,          /**< Orientation sensor */
+    SENSOR_TYPE_ID_GRAVITY = 257,              /**< Gravity sensor */
+    SENSOR_TYPE_ID_LINEAR_ACCELERATION = 258,  /**< Linear acceleration sensor */
+    SENSOR_TYPE_ID_ROTATION_VECTOR = 259,      /**< Rotation vector sensor */
+    SENSOR_TYPE_ID_AMBIENT_TEMPERATURE = 260,  /**< Ambient temperature sensor */
+    SENSOR_TYPE_ID_MAGNETIC_FIELD_UNCALIBRATED = 261,  /**< Uncalibrated magnetic field sensor */
+    SENSOR_TYPE_ID_GAME_ROTATION_VECTOR = 262,    /**< Game rotation vector sensor */
+    SENSOR_TYPE_ID_GYROSCOPE_UNCALIBRATED = 263,  /**< Uncalibrated gyroscope sensor */
+    SENSOR_TYPE_ID_SIGNIFICANT_MOTION = 264,    /**< Significant motion sensor */
+    SENSOR_TYPE_ID_PEDOMETER_DETECTION = 265,   /**< Pedometer detection sensor */
+    SENSOR_TYPE_ID_PEDOMETER = 266,             /**< Pedometer sensor */
+    SENSOR_TYPE_ID_GEOMAGNETIC_ROTATION_VECTOR = 277,  /**< Geomagnetic rotation vector sensor */
+    SENSOR_TYPE_ID_HEART_RATE = 278,            /**< Heart rate sensor */
+    SENSOR_TYPE_ID_DEVICE_ORIENTATION = 279,    /**< Device orientation sensor */
+    SENSOR_TYPE_ID_WEAR_DETECTION = 280,        /**< Wear detection sensor */
+    SENSOR_TYPE_ID_ACCELEROMETER_UNCALIBRATED = 281,   /**< Uncalibrated acceleration sensor */
+    SENSOR_TYPE_ID_MAX = 30,      /**< Maximum number of sensor type IDs*/
+} SensorTypeId;
+
+/**
+ * @brief Defines sensor information.
+ *
+ * @since 5
+ */
+typedef struct SensorInfo {
+    char sensorName[SENSOR_NAME_MAX_LEN];   /**< Sensor name */
+    char vendorName[SENSOR_NAME_MAX_LEN];   /**< Sensor vendor */
+    char firmwareVersion[VERSION_MAX_LEN];  /**< Sensor firmware version */
+    char hardwareVersion[VERSION_MAX_LEN];  /**< Sensor hardware version */
+    int32_t sensorTypeId;  /**< Sensor type ID */
+    int32_t sensorId;      /**< Sensor ID */
+    float maxRange;        /**< Maximum measurement range of the sensor */
+    float precision;       /**< Sensor accuracy */
+    float power;           /**< Sensor power */
+} SensorInfo;
+
+/**
+ * @brief Defines the data reported by the sensor.
+ *
+ * @since 5
+ */
+typedef struct SensorEvent {
+    int32_t sensorTypeId;  /**< Sensor type ID */
+    int32_t version;       /**< Sensor algorithm version */
+    int64_t timestamp;     /**< Time when sensor data was reported */
+    uint32_t option;       /**< Sensor data options, including the measurement range and accuracy */
+    int32_t mode;          /**< Sensor data reporting mode (described in {@link SensorMode}) */
+    uint8_t *data;         /**< Sensor data */
+    uint32_t dataLen;      /**< Sensor data length */
+} SensorEvent;
+
+/**
+ * @brief Defines the callback for data reporting by the sensor agent.
+ *
+ * @since 5
+ */
+typedef void (*RecordSensorCallback)(SensorEvent *event);
+
+/**
+ * @brief Defines a reserved field for the sensor data subscriber.
+ *
+ * @since 5
+ */
+typedef struct UserData {
+    char userData[SENSOR_USER_DATA_SIZE];  /**< Reserved for the sensor data subscriber */
+} UserData;
+
+/**
+ * @brief Defines information about the sensor data subscriber.
+ *
+ * @since 5
+ */
+typedef struct SensorUser {
+    char name[SENSOR_NAME_MAX_LEN];  /**< Name of the sensor data subscriber */
+    RecordSensorCallback callback;   /**< Callback for reporting sensor data */
+    UserData *userData;              /**< Reserved field for the sensor data subscriber */
+} SensorUser;
+
+/**
+ * @brief Enumerates data reporting modes of sensors.
+ *
+ * @since 5
+ */
+typedef enum SensorMode {
+    SENSOR_DEFAULT_MODE = 0,   /**< Default data reporting mode */
+    SENSOR_REALTIME_MODE = 1,  /**< Real-time data reporting mode to report a group of data each time */
+    SENSOR_ON_CHANGE = 2,   /**< Real-time data reporting mode to report data upon status changes */
+    SENSOR_ONE_SHOT = 3,    /**< Real-time data reporting mode to report data only once */
+    SENSOR_FIFO_MODE = 4,   /**< FIFO-based data reporting mode to report data based on the <b>BatchCnt</b> setting */
+    SENSOR_MODE_MAX,        /**< Maximum sensor data reporting mode */
+} SensorMode;
+
+#ifdef __cplusplus
+#if __cplusplus
+}
+#endif
+#endif
+#endif /* SENSOR_AGENT_TYPE_H */
+/** @} */
\ No newline at end of file
diff --git a/base/sensors/sensor_lite/interfaces/kits/native/test/performance/BUILD.gn b/base/sensors/sensor_lite/interfaces/kits/native/test/performance/BUILD.gn
new file mode 100755
index 00000000..83525261
--- /dev/null
+++ b/base/sensors/sensor_lite/interfaces/kits/native/test/performance/BUILD.gn
@@ -0,0 +1,36 @@
+# Copyright (c) 2021 Huawei Device Co., Ltd.
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+import("//build/lite/config/component/lite_component.gni")
+import("//build/lite/config/test.gni")
+
+unittest("sensor_lite_test_performance") {
+  output_extension = "bin"
+  output_dir = "$root_out_dir/test/unittest/sensor"
+
+  sources = [ "src/sensor_lite_test_performance.cpp" ]
+
+  include_dirs = [
+    "//base/sensors/sensor_lite/interfaces/kits/native/include",
+    "//base/hiviewdfx/hilog_lite/interfaces/native/kits",
+    "//third_party/bounds_checking_function/include",
+  ]
+  deps = [
+    "//base/hiviewdfx/hilog_lite/frameworks/featured:hilog_shared",
+    "//base/sensors/sensor_lite/frameworks/src:sensor_client",
+  ]
+}
+
+group("performance") {
+  deps = [ ":sensor_lite_test_performance" ]
+}
diff --git a/base/sensors/sensor_lite/interfaces/kits/native/test/performance/src/sensor_lite_test_performance.cpp b/base/sensors/sensor_lite/interfaces/kits/native/test/performance/src/sensor_lite_test_performance.cpp
new file mode 100755
index 00000000..ee0ce46e
--- /dev/null
+++ b/base/sensors/sensor_lite/interfaces/kits/native/test/performance/src/sensor_lite_test_performance.cpp
@@ -0,0 +1,256 @@
+/*
+ * Copyright (c) 2021 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include <ctime>
+
+#include "gtest/gtest.h"
+#include "hilog/log.h"
+#include "sensor_agent.h"
+#include "sensor_agent_type.h"
+
+#undef LOG_TAG
+#define LOG_TAG "SENSOR_LITE"
+
+using namespace std;
+using namespace testing::ext;
+
+#define NULLPTR ((void *)0)
+
+namespace OHOS {
+const int MS_PER_SECOND = 1000;
+const int NS_PER_MS = 1000000;
+const int SENSOR_PERFORMANCE_TIME = 100;
+static int32_t g_dataCount = 0;
+
+class SensorLiteTestPerformance : public testing::Test {
+protected:
+    static void SetUpTestCase(void) {};
+    static void TearDownTestCase(void) {}
+};
+
+void SensorDataCallbackImpl(SensorEvent *event)
+{
+    HILOG_DEBUG(HILOG_MODULE_APP, "SensorDataCallbackImpl called");
+    if (event == NULLPTR) {
+        HILOG_ERROR(HILOG_MODULE_APP, "SensorDataCallbackImpl event is NULL");
+        return;
+    }
+    float *sensorData = (float *)event->data;
+    for (int32_t i = 0; i < (int32_t)(event->dataLen / sizeof(uint8_t *)); i++) {
+        HILOG_DEBUG(HILOG_MODULE_APP, "SensorDataCallbackImpl data: %f", *(sensorData + i));
+    }
+    g_dataCount++;
+}
+
+uint64_t GetCurrentMillSecTime()
+{
+    struct timespec ts = {0, 0};
+    clock_gettime(CLOCK_REALTIME, &ts);
+    return ((ts.tv_sec * MS_PER_SECOND) + (ts.tv_nsec / NS_PER_MS));
+}
+
+/**
+ * @tc.name: GetAllSensorsPerformance001
+ * @tc.desc: Get sensor list performance test.
+ * @tc.type: PERF
+ * @tc.require: SR000F46AC
+ */
+HWTEST_F(SensorLiteTestPerformance, GetAllSensorsPerformance001, TestSize.Level0)
+{
+    SensorInfo *sensorInfo = (SensorInfo *)NULLPTR;
+    int32_t count = 0;
+    uint64_t startTime = GetCurrentMillSecTime();
+    int32_t ret = GetAllSensors(&sensorInfo, &count);
+    uint64_t endTime = GetCurrentMillSecTime();
+    uint64_t duration = endTime - startTime;
+    EXPECT_TRUE(((duration >= 0) && (duration <= SENSOR_PERFORMANCE_TIME)));
+    HILOG_DEBUG(HILOG_MODULE_APP, "GetAllSensorsPerformance001 starttime: %lld, endTime: %lld, duration:%lld",
+        startTime, endTime, duration);
+    EXPECT_EQ(ret, 0) << "GetAllSensorsTest001 ret = " << ret << endl;
+    for (int i = 0; i < count; i++) {
+        HILOG_INFO(HILOG_MODULE_APP, "%s %s %s %s %d %d %f %f %f!",
+            (sensorInfo + i)->sensorName, (sensorInfo + i)->vendorName,
+            (sensorInfo + i)->firmwareVersion, (sensorInfo + i)->hardwareVersion,
+            (sensorInfo + i)->sensorTypeId, (sensorInfo + i)->sensorId,
+            (sensorInfo + i)->maxRange, (sensorInfo + i)->precision,
+            (sensorInfo + i)->power);
+    }
+};
+
+/**
+ * @tc.name: SubscribeSensorPerformance001
+ * @tc.desc: Subscribe sensor performance test.
+ * @tc.type: PERF
+ * @tc.require: SR000F46AE
+ */
+HWTEST_F(SensorLiteTestPerformance, SubscribeSensorPerformance001, TestSize.Level0)
+{
+    SensorUser sensorUser;
+    sensorUser.callback = SensorDataCallbackImpl;
+
+    SensorInfo *sensorInfo = (SensorInfo *)NULLPTR;
+    int32_t count = 0;
+
+    int32_t ret = GetAllSensors(&sensorInfo, &count);
+    EXPECT_EQ(ret, 0) << "GetAllSensorsTest001 ret = " << ret << endl;
+
+    uint64_t startTime = GetCurrentMillSecTime();
+    ret = SubscribeSensor(0, &sensorUser);
+    uint64_t endTime = GetCurrentMillSecTime();
+    uint64_t duration = endTime - startTime;
+    EXPECT_TRUE(((duration >= 0) && (duration <= SENSOR_PERFORMANCE_TIME)));
+    EXPECT_EQ(ret, 0) << "SubscribeSensor ret = " << ret << endl;
+    HILOG_DEBUG(HILOG_MODULE_APP, "SubscribeSensorPerformance001 starttime: %lld, endTime: %lld, duration:%lld",
+        startTime, endTime, duration);
+    sleep(1);
+    ret = UnsubscribeSensor(0, &sensorUser);
+    EXPECT_EQ(ret, 0) << "UnsubscribeSensor ret = " << ret << endl;
+};
+
+/**
+ * @tc.name: UnsubscribeSensorPerformance001
+ * @tc.desc: Unsubscribe sensor performance test.
+ * @tc.type: PERF
+ * @tc.require: AR000F46AM
+ */
+HWTEST_F(SensorLiteTestPerformance, UnsubscribeSensorPerformance001, TestSize.Level0)
+{
+    SensorUser sensorUser;
+    sensorUser.callback = SensorDataCallbackImpl;
+
+    SensorInfo *sensorInfo = (SensorInfo *)NULLPTR;
+    int32_t count = 0;
+
+    int32_t ret = GetAllSensors(&sensorInfo, &count);
+    EXPECT_EQ(ret, 0) << "UnsubscribeSensorPerformance001 ret = " << ret << endl;
+
+    ret = SubscribeSensor(0, &sensorUser);
+    EXPECT_EQ(ret, 0) << "SubscribeSensor ret = " << ret << endl;
+    sleep(1);
+
+    uint64_t startTime = GetCurrentMillSecTime();
+    ret = UnsubscribeSensor(0, &sensorUser);
+    uint64_t endTime = GetCurrentMillSecTime();
+    uint64_t duration = endTime - startTime;
+    EXPECT_TRUE(((duration >= 0) && (duration <= SENSOR_PERFORMANCE_TIME)));
+    HILOG_DEBUG(HILOG_MODULE_APP, "UnsubscribeSensorPerformance001 starttime: %lld, endTime: %lld, duration:%lld",
+        startTime, endTime, duration);
+    EXPECT_EQ(ret, 0) << "UnsubscribeSensor ret = " << ret << endl;
+};
+
+/**
+ * @tc.name: ActivateSensorPerformance001
+ * @tc.desc: Get sensor list performance test.
+ * @tc.type: PERF
+ * @tc.require: SR000F46AG
+ */
+HWTEST_F(SensorLiteTestPerformance, ActivateSensorPerformance001, TestSize.Level0)
+{
+    SensorUser sensorUser;
+    sensorUser.callback = SensorDataCallbackImpl;
+
+    SensorInfo *sensorInfo = (SensorInfo *)NULLPTR;
+    int32_t count = 0;
+
+    int32_t ret = GetAllSensors(&sensorInfo, &count);
+    EXPECT_EQ(ret, 0) << "GetAllSensorsTest001 ret = " << ret << endl;
+
+    uint64_t startTime = GetCurrentMillSecTime();
+    ret = ActivateSensor(0, &sensorUser);
+    uint64_t endTime = GetCurrentMillSecTime();
+    uint64_t duration = endTime - startTime;
+    EXPECT_TRUE(((duration >= 0) && (duration <= SENSOR_PERFORMANCE_TIME)));
+    HILOG_DEBUG(HILOG_MODULE_APP, "ActivateSensorPerformance001 starttime: %lld, endTime: %lld, duration:%lld",
+        startTime, endTime, duration);
+    EXPECT_EQ(ret, 0) << "ActivateSensor ret = " << ret << endl;
+    sleep(1);
+
+    ret = DeactivateSensor(0, &sensorUser);
+    EXPECT_EQ(ret, 0) << "DeactivateSensor ret = " << ret << endl;
+    sleep(1);
+};
+
+/**
+ * @tc.name: DeactivateSensorPerformance001
+ * @tc.desc: Get sensor list performance test.
+ * @tc.type: PERF
+ * @tc.require: AR000F46AJ
+ */
+HWTEST_F(SensorLiteTestPerformance, DeactivateSensorPerformance001, TestSize.Level0)
+{
+    SensorUser sensorUser;
+    sensorUser.callback = SensorDataCallbackImpl;
+
+    SensorInfo *sensorInfo = (SensorInfo *)NULLPTR;
+    int32_t count = 0;
+
+    int32_t ret = GetAllSensors(&sensorInfo, &count);
+    EXPECT_EQ(ret, 0) << "GetAllSensorsTest001 ret = " << ret << endl;
+
+    ret = ActivateSensor(0, &sensorUser);
+    EXPECT_EQ(ret, 0) << "ActivateSensor ret = " << ret << endl;
+    sleep(1);
+
+    uint64_t startTime = GetCurrentMillSecTime();
+    ret = DeactivateSensor(0, &sensorUser);
+    uint64_t endTime = GetCurrentMillSecTime();
+    uint64_t duration = endTime - startTime;
+    EXPECT_TRUE(((duration >= 0) && (duration <= SENSOR_PERFORMANCE_TIME)));
+    HILOG_DEBUG(HILOG_MODULE_APP, "DeactivateSensorPerformance001 starttime: %lld, endTime: %lld, duration:%lld",
+        startTime, endTime, duration);
+    EXPECT_EQ(ret, 0) << "DeactivateSensor ret = " << ret << endl;
+    sleep(1);
+};
+
+
+/**
+ * @tc.name: DataReportPerformanceTest001
+ * @tc.desc: Sensor data report.
+ * @tc.type: PERF
+ * @tc.require: SR000F46AN
+ */
+HWTEST_F(SensorLiteTestPerformance, DataReportPerformanceTest001, TestSize.Level0)
+{
+    HILOG_INFO(HILOG_MODULE_APP, "%s called", __func__);
+    SensorUser sensorUser;
+    sensorUser.callback = SensorDataCallbackImpl;
+
+    SensorInfo *sensorInfo = (SensorInfo *)NULLPTR;
+    int32_t count = 0;
+
+    int32_t ret = GetAllSensors(&sensorInfo, &count);
+    EXPECT_EQ(ret, 0) << "GetAllSensorsTest001 ret = " << ret << endl;
+    sleep(1);
+
+    ret = ActivateSensor(0, &sensorUser);
+    EXPECT_EQ(ret, 0) << "ActivateSensor ret = " << ret << endl;
+    sleep(1);
+
+    g_dataCount = 0;
+    ret = SubscribeSensor(0, &sensorUser);
+    EXPECT_EQ(ret, 0) << "SubscribeSensor ret = " << ret << endl;
+    sleep(5);
+    HILOG_INFO(HILOG_MODULE_APP, "%s g_dataCount: %d", __func__, g_dataCount);
+    EXPECT_LT(g_dataCount, 50);
+    EXPECT_GT(g_dataCount, 0);
+
+    ret = DeactivateSensor(0, &sensorUser);
+    EXPECT_EQ(ret, 0) << "DeactivateSensor ret = " << ret << endl;
+    sleep(1);
+
+    ret = UnsubscribeSensor(0, &sensorUser);
+    EXPECT_EQ(ret, 0) << "UnsubscribeSensor ret = " << ret << endl;
+};
+}
diff --git a/base/sensors/sensor_lite/interfaces/kits/native/test/unittest/BUILD.gn b/base/sensors/sensor_lite/interfaces/kits/native/test/unittest/BUILD.gn
new file mode 100755
index 00000000..57a96edd
--- /dev/null
+++ b/base/sensors/sensor_lite/interfaces/kits/native/test/unittest/BUILD.gn
@@ -0,0 +1,36 @@
+# Copyright (c) 2021 Huawei Device Co., Ltd.
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+import("//build/lite/config/component/lite_component.gni")
+import("//build/lite/config/test.gni")
+
+unittest("sensor_lite_test_interface") {
+  output_extension = "bin"
+  output_dir = "$root_out_dir/test/unittest/sensor"
+
+  sources = [ "src/sensor_agent_interfaces_test.cpp" ]
+
+  include_dirs = [
+    "//base/sensors/sensor_lite/interfaces/kits/native/include",
+    "//base/hiviewdfx/hilog_lite/interfaces/native/kits",
+    "//third_party/bounds_checking_function/include",
+  ]
+  deps = [
+    "//base/hiviewdfx/hilog_lite/frameworks/featured:hilog_shared",
+    "//base/sensors/sensor_lite/frameworks/src:sensor_client",
+  ]
+}
+
+group("unittest") {
+  deps = [ ":sensor_lite_test_interface" ]
+}
diff --git a/base/sensors/sensor_lite/interfaces/kits/native/test/unittest/src/sensor_agent_interfaces_test.cpp b/base/sensors/sensor_lite/interfaces/kits/native/test/unittest/src/sensor_agent_interfaces_test.cpp
new file mode 100755
index 00000000..26224fc4
--- /dev/null
+++ b/base/sensors/sensor_lite/interfaces/kits/native/test/unittest/src/sensor_agent_interfaces_test.cpp
@@ -0,0 +1,481 @@
+/*
+ * Copyright (c) 2021 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "gtest/gtest.h"
+#include "hilog/log.h"
+#include "sensor_agent.h"
+#include "sensor_agent_type.h"
+
+#undef LOG_TAG
+#define LOG_TAG "SENSOR_LITE"
+#undef SENSOR_ERROR_INVALID_PARAM
+#define SENSOR_ERROR_INVALID_PARAM (-3)
+
+using namespace std;
+using namespace testing::ext;
+
+#define NULLPTR ((void *)0)
+
+namespace OHOS {
+class SensorAgentInterfacesTest : public testing::Test {
+protected:
+    static void SetUpTestCase(void) {}
+    static void TearDownTestCase(void) {}
+};
+
+void SensorDataCallbackImpl(SensorEvent *event)
+{
+    HILOG_DEBUG(HILOG_MODULE_APP, "SensorDataCallbackImpl called");
+    if (event == NULLPTR) {
+        return;
+    }
+    float *sensorData = (float *)event->data;
+    for (int32_t i = 0; i < (int32_t)(event->dataLen / sizeof(uint8_t *)); i++) {
+        HILOG_DEBUG(HILOG_MODULE_APP, "SensorDataCallbackImpl data: %f", *(sensorData + i));
+    }
+}
+
+/**
+ * @tc.name: GetAllSensorsInterfaceTest001
+ * @tc.desc: Test the interface for obtaining the sensor list in normal scenarios.
+ * @tc.type: FUNC
+ * @tc.require: AR000F46AD
+ */
+HWTEST_F(SensorAgentInterfacesTest, GetAllSensorsInterfaceTest001, TestSize.Level0)
+{
+    HILOG_INFO(HILOG_MODULE_APP, "GetAllSensorsInterfaceTest001 called");
+    SensorInfo *sensorInfo = (SensorInfo *)NULLPTR;
+    int32_t count = 0;
+    int32_t ret = GetAllSensors(&sensorInfo, &count);
+    HILOG_INFO(HILOG_MODULE_APP, "GetAllSensorsInterfaceTest001 sensor lists count: %d", count);
+    for (int i = 0; i < count; i++) {
+        HILOG_INFO(HILOG_MODULE_APP, "%s %s %s %s %d %d %f %f %f!",
+            (sensorInfo + i)->sensorName, (sensorInfo + i)->vendorName,
+            (sensorInfo + i)->firmwareVersion, (sensorInfo + i)->hardwareVersion,
+            (sensorInfo + i)->sensorTypeId, (sensorInfo + i)->sensorId,
+            (sensorInfo + i)->maxRange, (sensorInfo + i)->precision,
+            (sensorInfo + i)->power);
+    }
+    EXPECT_EQ(ret, 0) << "GetAllSensors ret = " << ret << endl;
+};
+
+/**
+ * @tc.name: GetAllSensorsInterfaceTest002
+ * @tc.desc: Test the interface for obtaining the sensor list in abnormal scenarios.
+ * @tc.type: FUNC
+ * @tc.require: AR000F46AH
+ */
+HWTEST_F(SensorAgentInterfacesTest, GetAllSensorsInterfaceTest002, TestSize.Level0)
+{
+    HILOG_INFO(HILOG_MODULE_APP, "GetAllSensorsInterfaceTest002 called");
+    SensorInfo **sensorInfo = (SensorInfo **)NULLPTR;
+    int32_t ret = GetAllSensors(sensorInfo, (int32_t *)NULLPTR);
+    EXPECT_EQ(ret, SENSOR_ERROR_INVALID_PARAM) << "GetAllSensors ret = " << ret << endl;
+};
+
+/**
+ * @tc.name: GetAllSensorsInterfaceTest003
+ * @tc.desc: Test the interface for obtaining the sensor list in abnormal scenarios.
+ * @tc.type: FUNC
+ * @tc.require: AR000F46AH
+ */
+HWTEST_F(SensorAgentInterfacesTest, GetAllSensorsInterfaceTest003, TestSize.Level0)
+{
+    HILOG_INFO(HILOG_MODULE_APP, "GetAllSensorsInterfaceTest003 called");
+    int32_t count = 0;
+    SensorInfo **sensorInfo = (SensorInfo **)NULLPTR;
+    int32_t ret = GetAllSensors(sensorInfo, &count);
+    EXPECT_EQ(ret, SENSOR_ERROR_INVALID_PARAM) << "GetAllSensors ret = " << ret << endl;
+};
+
+/**
+ * @tc.name: GetAllSensorsInterfaceTest004
+ * @tc.desc: Test the interface for obtaining the sensor list in abnormal scenarios.
+ * @tc.type: FUNC
+ * @tc.require: AR000F46AH
+ */
+HWTEST_F(SensorAgentInterfacesTest, GetAllSensorsInterfaceTest004, TestSize.Level0)
+{
+    HILOG_INFO(HILOG_MODULE_APP, "%GetAllSensorsInterfaceTest004 called");
+    SensorInfo *sensorInfo = (SensorInfo *)NULLPTR;
+    int32_t ret = GetAllSensors(&sensorInfo, (int32_t *)NULLPTR);
+    EXPECT_EQ(ret, SENSOR_ERROR_INVALID_PARAM) << "GetAllSensors ret = " << ret << endl;
+};
+
+/**
+ * @tc.name: ActivateSensorInterfaceTest001
+ * @tc.desc: Test the enable sensor interface, the input parameter sensorid is set to -1.
+ * @tc.type: FUNC
+ * @tc.require: AR000F46AI
+ */
+HWTEST_F(SensorAgentInterfacesTest, ActivateSensorInterfaceTest001, TestSize.Level0)
+{
+    HILOG_INFO(HILOG_MODULE_APP, "ActivateSensorInterfaceTest001 called");
+    SensorUser sensorUser;
+    int32_t ret = ActivateSensor(-1, &sensorUser);
+    EXPECT_EQ(ret, SENSOR_ERROR_INVALID_PARAM) << "ActivateSensor ret = " << ret << endl;
+};
+
+/**
+ * @tc.name: ActivateSensorInterfaceTest002
+ * @tc.desc: Test the enable sensor interface, the input parameter sensorUser is set to NULL.
+ * @tc.type: FUNC
+ * @tc.require: AR000F46AI
+ */
+HWTEST_F(SensorAgentInterfacesTest, ActivateSensorInterfaceTest002, TestSize.Level0)
+{
+    HILOG_INFO(HILOG_MODULE_APP, "ActivateSensorInterfaceTest002 called");
+    SensorUser *sensorUser = (SensorUser *)NULLPTR;
+    int32_t ret = ActivateSensor(0, sensorUser);
+    EXPECT_EQ(ret, SENSOR_ERROR_INVALID_PARAM) << "ActivateSensor ret = " << ret << endl;
+};
+
+/**
+ * @tc.name: ActivateSensorInterfaceTest003
+ * @tc.desc: Test the enable sensor interface, the process is to obtain the sensor list, register, enable, disable,
+ * and deregister the sensor. The enabled sensor ID is 1.
+ * @tc.type: FUNC
+ * @tc.require: AR000F46AI
+ */
+HWTEST_F(SensorAgentInterfacesTest, ActivateSensorInterfaceTest003, TestSize.Level0)
+{
+    HILOG_INFO(HILOG_MODULE_APP, "ActivateSensorInterfaceTest003 called");
+    SensorUser sensorUser;
+    sensorUser.callback = SensorDataCallbackImpl;
+    SensorInfo *sensorInfo = (SensorInfo *)NULLPTR;
+    int32_t count = 0;
+    int32_t ret = GetAllSensors(&sensorInfo, &count);
+    EXPECT_EQ(ret, 0) << "GetAllSensors ret = " << ret << endl;
+    sleep(1);
+
+    ret = ActivateSensor(0, &sensorUser);
+    EXPECT_EQ(ret, 0) << "ActivateSensor ret = " << ret << endl;
+    sleep(3);
+
+    ret = DeactivateSensor(0, &sensorUser);
+    EXPECT_EQ(ret, 0) << "DeactivateSensor ret = " << ret << endl;
+    sleep(1);
+};
+
+/**
+ * @tc.name: DeactivateSensorInterfaceTest001
+ * @tc.desc: Disable sensor, the input parameter sensorUser is set to NULL.
+ * @tc.type: FUNC
+ * @tc.require: AR000F46AJ
+ */
+HWTEST_F(SensorAgentInterfacesTest, DeactivateSensorInterfaceTest001, TestSize.Level0)
+{
+    HILOG_INFO(HILOG_MODULE_APP, "DeactivateSensorInterfaceTest001 called");
+    SensorUser *sensorUser = (SensorUser *)NULLPTR;
+    int32_t ret = DeactivateSensor(0, sensorUser);
+    EXPECT_EQ(ret, SENSOR_ERROR_INVALID_PARAM) << "DeactivateSensor ret = " << ret << endl;
+};
+
+/**
+ * @tc.name: DeactivateSensorInterfaceTest002
+ * @tc.desc: Disable sensor, the input parameter sensor id is -1.
+ * @tc.type: FUNC
+ * @tc.require: AR000F46AJ
+ */
+HWTEST_F(SensorAgentInterfacesTest, DeactivateSensorInterfaceTest002, TestSize.Level0)
+{
+    HILOG_INFO(HILOG_MODULE_APP, "DeactivateSensorInterfaceTest002 called");
+    SensorUser sensorUser;
+    int32_t ret = DeactivateSensor(-1, &sensorUser);
+    EXPECT_EQ(ret, SENSOR_ERROR_INVALID_PARAM) << "DeactivateSensor ret = " << ret << endl;
+};
+
+/**
+ * @tc.name: SetBatchInterfaceTest001
+ * @tc.desc: Set sensor param, sensorUser is NULL.
+ * @tc.type: FUNC
+ * @tc.require: AR000F46AD
+ */
+HWTEST_F(SensorAgentInterfacesTest, SetBatchInterfaceTest001, TestSize.Level0)
+{
+    HILOG_INFO(HILOG_MODULE_APP, "SetBatchInterfaceTest001 called");
+    SensorUser *sensorUser = (SensorUser *)nullptr;
+    int32_t ret = SetBatch(0, sensorUser, 200, 3000);
+    EXPECT_EQ(ret, SENSOR_ERROR_INVALID_PARAM) << "SetBatch ret = " << ret << endl;
+};
+
+/**
+ * @tc.name: SetBatchInterfaceTest002
+ * @tc.desc: Set sensor param.
+ * @tc.type: FUNC
+ * @tc.require: AR000F46AD
+ */
+HWTEST_F(SensorAgentInterfacesTest, SetBatchInterfaceTest002, TestSize.Level0)
+{
+    HILOG_INFO(HILOG_MODULE_APP, "SetBatchInterfaceTest002 called");
+    SensorUser sensorUser;
+    int32_t ret = SetBatch(0, &sensorUser, -1, 3000);
+    EXPECT_EQ(ret, SENSOR_ERROR_INVALID_PARAM) << "SetBatch ret = " << ret << endl;
+};
+
+/**
+ * @tc.name: SetBatchInterfaceTest003
+ * @tc.desc: Set sensor param.
+ * @tc.type: FUNC
+ * @tc.require: AR000F46AF
+ */
+HWTEST_F(SensorAgentInterfacesTest, SetBatchInterfaceTest003, TestSize.Level0)
+{
+    HILOG_INFO(HILOG_MODULE_APP, "SetBatchInterfaceTest003 called");
+    SensorUser sensorUser;
+    int32_t ret = SetBatch(0, &sensorUser, 200, 3000);
+    EXPECT_EQ(ret, 0) << "SetBatch ret = " << ret << endl;
+};
+
+/**
+ * @tc.name: SetBatchInterfaceTest004
+ * @tc.desc: Set sensor param.
+ * @tc.type: FUNC
+ * @tc.require: AR000F46AF
+ */
+HWTEST_F(SensorAgentInterfacesTest, SetBatchInterfaceTest004, TestSize.Level0)
+{
+    HILOG_INFO(HILOG_MODULE_APP, "SetBatchInterfaceTest004 called");
+    SensorUser sensorUser;
+    int32_t ret = SetBatch(0, &sensorUser, 200, -1);
+    EXPECT_EQ(ret, SENSOR_ERROR_INVALID_PARAM) << "SetBatch ret = " << ret << endl;
+};
+
+/**
+ * @tc.name: SetBatchInterfaceTest005
+ * @tc.desc: Set sensor param.
+ * @tc.type: FUNC
+ * @tc.require: AR000F46AF
+ */
+HWTEST_F(SensorAgentInterfacesTest, SetBatchInterfaceTest005, TestSize.Level0)
+{
+    HILOG_INFO(HILOG_MODULE_APP, "SetBatchInterfaceTest005 called");
+    SensorUser sensorUser;
+    int32_t ret = SetBatch(-1, &sensorUser, 200, 3000);
+    EXPECT_EQ(ret, SENSOR_ERROR_INVALID_PARAM) << "SetBatch ret = " << ret << endl;
+};
+
+/**
+ * @tc.name: SubscribeSensorInterfaceTest001
+ * @tc.desc: SubscribeSensor sensor.
+ * @tc.type: FUNC
+ * @tc.require: AR000F46AL
+ */
+HWTEST_F(SensorAgentInterfacesTest, SubscribeSensorInterfaceTest001, TestSize.Level0)
+{
+    HILOG_INFO(HILOG_MODULE_APP, "SubscribeSensorInterfaceTest001 called");
+    SensorInfo *sensorInfo = (SensorInfo *)NULLPTR;
+    int32_t count = 0;
+    int32_t ret = GetAllSensors(&sensorInfo, &count);
+    EXPECT_EQ(ret, 0) << "GetAllSensors ret = " << ret << endl;
+    sleep(1);
+
+    SensorUser sensorUser;
+    sensorUser.callback = SensorDataCallbackImpl;
+    ret = SubscribeSensor(0, &sensorUser);
+    EXPECT_EQ(ret, 0) << "SubscribeSensor ret = " << ret << endl;
+
+    ret = UnsubscribeSensor(0, &sensorUser);
+    EXPECT_EQ(ret, 0) << "UnsubscribeSensor ret = " << ret << endl;
+};
+
+/**
+ * @tc.name: SubscribeSensorInterfaceTest002
+ * @tc.desc: SubscribeSensor sensor.
+ * @tc.type: FUNC
+ * @tc.require: AR000F46AL
+ */
+HWTEST_F(SensorAgentInterfacesTest, SubscribeSensorInterfaceTest002, TestSize.Level0)
+{
+    HILOG_INFO(HILOG_MODULE_APP, "SubscribeSensorInterfaceTest002 called");
+    SensorUser *sensorUser = (SensorUser *)NULLPTR;
+    int32_t ret = SubscribeSensor(0, sensorUser);
+    EXPECT_EQ(ret, SENSOR_ERROR_INVALID_PARAM) << "SubscribeSensor ret = " << ret << endl;
+};
+
+/**
+ * @tc.name: SubscribeSensorInterfaceTest003
+ * @tc.desc: SubscribeSensor sensor.
+ * @tc.type: FUNC
+ * @tc.require: AR000F46AL
+ */
+HWTEST_F(SensorAgentInterfacesTest, SubscribeSensorInterfaceTest003, TestSize.Level0)
+{
+    HILOG_INFO(HILOG_MODULE_APP, "SubscribeSensorInterfaceTest003 called");
+    SensorUser sensorUser;
+    sensorUser.callback = SensorDataCallbackImpl;
+    int32_t ret = SubscribeSensor(-1, &sensorUser);
+    EXPECT_EQ(ret, SENSOR_ERROR_INVALID_PARAM) << "SubscribeSensor ret = " << ret << endl;
+};
+
+/**
+ * @tc.name: UnSubscribeSensorInterfaceTest001
+ * @tc.desc: UnSubscribeSensor sensor.
+ * @tc.type: FUNC
+ * @tc.require: AR000F46AM
+ */
+HWTEST_F(SensorAgentInterfacesTest, UnSubscribeSensorInterfaceTest001, TestSize.Level0)
+{
+    HILOG_INFO(HILOG_MODULE_APP, "UnSubscribeSensorInterfaceTest001 called");
+    SensorUser *sensorUser = (SensorUser *)NULLPTR;
+    int32_t ret = UnsubscribeSensor(0, sensorUser);
+    EXPECT_EQ(ret, SENSOR_ERROR_INVALID_PARAM) << "UnsubscribeSensor ret = " << ret << endl;
+};
+
+/**
+ * @tc.name: UnSubscribeSensorInterfaceTest002
+ * @tc.desc: UnSubscribeSensor sensor.
+ * @tc.type: FUNC
+ * @tc.require: AR000F46AM
+ */
+HWTEST_F(SensorAgentInterfacesTest, UnSubscribeSensorInterfaceTest002, TestSize.Level0)
+{
+    HILOG_INFO(HILOG_MODULE_APP, "UnSubscribeSensorInterfaceTest002 called");
+    SensorUser sensorUser;
+    sensorUser.callback = SensorDataCallbackImpl;
+    int32_t ret = UnsubscribeSensor(-1, &sensorUser);
+    EXPECT_EQ(ret, SENSOR_ERROR_INVALID_PARAM) << "UnsubscribeSensor ret = " << ret << endl;
+};
+
+/**
+ * @tc.name: UnSubscribeSensorInterfaceTest003
+ * @tc.desc: UnSubscribeSensor sensor.
+ * @tc.type: FUNC
+ * @tc.require: SR000F46AK
+ */
+HWTEST_F(SensorAgentInterfacesTest, UnSubscribeSensorInterfaceTest003, TestSize.Level0)
+{
+    HILOG_INFO(HILOG_MODULE_APP, "DataReportInterfaceTest001 called");
+    SensorUser sensorUser;
+    sensorUser.callback = SensorDataCallbackImpl;
+    SensorInfo *sensorInfo = (SensorInfo *)NULLPTR;
+    int32_t count = 0;
+
+    int32_t ret = GetAllSensors(&sensorInfo, &count);
+    EXPECT_EQ(ret, 0) << "GetAllSensorsTest001 ret = " << ret << endl;
+    sleep(1);
+
+    ret = UnsubscribeSensor(0, &sensorUser);
+    EXPECT_EQ(ret, SENSOR_ERROR_INVALID_PARAM) << "UnsubscribeSensor ret = " << ret << endl;
+};
+
+/**
+ * @tc.name: DataReportInterfaceTest001
+ * @tc.desc: Sensor data report.
+ * @tc.type: FUNC
+ * @tc.require: AR000F46AO
+ */
+HWTEST_F(SensorAgentInterfacesTest, DataReportInterfaceTest001, TestSize.Level0)
+{
+    HILOG_INFO(HILOG_MODULE_APP, "DataReportInterfaceTest001 called");
+    SensorUser sensorUser;
+    sensorUser.callback = SensorDataCallbackImpl;
+
+    SensorInfo *sensorInfo = (SensorInfo *)NULLPTR;
+    int32_t count = 0;
+
+    int32_t ret = GetAllSensors(&sensorInfo, &count);
+    EXPECT_EQ(ret, 0) << "GetAllSensorsTest001 ret = " << ret << endl;
+    sleep(1);
+
+    ret = SubscribeSensor(0, &sensorUser);
+    EXPECT_EQ(ret, 0) << "SubscribeSensor ret = " << ret << endl;
+    sleep(1);
+
+    ret = ActivateSensor(0, &sensorUser);
+    EXPECT_EQ(ret, 0) << "ActivateSensor ret = " << ret << endl;
+    sleep(1);
+
+    ret = DeactivateSensor(0, &sensorUser);
+    EXPECT_EQ(ret, 0) << "DeactivateSensor ret = " << ret << endl;
+    sleep(1);
+
+    ret = UnsubscribeSensor(0, &sensorUser);
+    EXPECT_EQ(ret, 0) << "UnsubscribeSensor ret = " << ret << endl;
+};
+
+/**
+ * @tc.name: DataReportInterfaceTest002
+ * @tc.desc: Sensor data report.
+ * @tc.type: FUNC
+ * @tc.require: AR000F46AO
+ */
+HWTEST_F(SensorAgentInterfacesTest, DataReportInterfaceTest002, TestSize.Level0)
+{
+    HILOG_INFO(HILOG_MODULE_APP, "DataReportInterfaceTest002 called");
+    SensorUser sensorUser;
+    sensorUser.callback = SensorDataCallbackImpl;
+
+    SensorInfo *sensorInfo = (SensorInfo *)NULLPTR;
+    int32_t count = 0;
+
+    int32_t ret = GetAllSensors(&sensorInfo, &count);
+    EXPECT_EQ(ret, 0) << "GetAllSensorsTest001 ret = " << ret << endl;
+    sleep(1);
+
+    ret = ActivateSensor(0, &sensorUser);
+    EXPECT_EQ(ret, 0) << "ActivateSensor ret = " << ret << endl;
+    sleep(1);
+
+    ret = SubscribeSensor(0, &sensorUser);
+    EXPECT_EQ(ret, 0) << "SubscribeSensor ret = " << ret << endl;
+    sleep(1);
+
+    ret = DeactivateSensor(0, &sensorUser);
+    EXPECT_EQ(ret, 0) << "DeactivateSensor ret = " << ret << endl;
+    sleep(1);
+
+    ret = UnsubscribeSensor(0, &sensorUser);
+    EXPECT_EQ(ret, 0) << "UnsubscribeSensor ret = " << ret << endl;
+};
+
+/**
+ * @tc.name: DataReportInterfaceTest003
+ * @tc.desc: Sensor data report.
+ * @tc.type: FUNC
+ * @tc.require: AR000F46AO
+ */
+HWTEST_F(SensorAgentInterfacesTest, DataReportInterfaceTest003, TestSize.Level0)
+{
+    HILOG_INFO(HILOG_MODULE_APP, "DataReportInterfaceTest003 called");
+    SensorUser sensorUser;
+    sensorUser.callback = SensorDataCallbackImpl;
+
+    SensorInfo *sensorInfo = (SensorInfo *)NULLPTR;
+    int32_t count = 0;
+
+    int32_t ret = GetAllSensors(&sensorInfo, &count);
+    EXPECT_EQ(ret, 0) << "GetAllSensorsTest001 ret = " << ret << endl;
+    sleep(1);
+
+    ret = SubscribeSensor(0, &sensorUser);
+    EXPECT_EQ(ret, 0) << "SubscribeSensor ret = " << ret << endl;
+    sleep(1);
+
+    ret = ActivateSensor(0, &sensorUser);
+    EXPECT_EQ(ret, 0) << "ActivateSensor ret = " << ret << endl;
+    sleep(1);
+
+    ret = DeactivateSensor(0, &sensorUser);
+    EXPECT_EQ(ret, 0) << "DeactivateSensor ret = " << ret << endl;
+    sleep(1);
+
+    ret = UnsubscribeSensor(0, &sensorUser);
+    EXPECT_EQ(ret, 0) << "UnsubscribeSensor ret = " << ret << endl;
+
+    ret = UnsubscribeSensor(0, &sensorUser);
+    EXPECT_EQ(ret, SENSOR_ERROR_INVALID_PARAM) << "UnsubscribeSensor ret = " << ret << endl;
+};
+}
\ No newline at end of file
diff --git a/base/sensors/sensor_lite/services/BUILD.gn b/base/sensors/sensor_lite/services/BUILD.gn
new file mode 100755
index 00000000..9c95b79a
--- /dev/null
+++ b/base/sensors/sensor_lite/services/BUILD.gn
@@ -0,0 +1,44 @@
+# Copyright (c) 2021 Huawei Device Co., Ltd.
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+import("//build/lite/config/component/lite_component.gni")
+
+executable("sensor_service") {
+  sources = [
+    "./src/proc.c",
+    "./src/sensor_service.c",
+    "./src/sensor_service_impl.c",
+  ]
+  ldflags = [ "-Wl,-Map=provider_proc.map" ]
+
+  include_dirs = [
+    "./include",
+    "//third_party/bounds_checking_function/include",
+    "//kernel/liteos_a/kernel/include",
+    "//kernel/liteos_a/kernel/common",
+    "//utils/native/lite/include",
+    "//foundation/distributedschedule/samgr_lite/interfaces/kits/registry",
+    "//foundation/distributedschedule/samgr_lite/interfaces/kits/samgr",
+    "//foundation/distributedschedule/samgr_lite/interfaces/kits/communication/broadcast",
+    "//foundation/distributedschedule/samgr_lite/samgr/source",
+    "//foundation/communication/ipc_lite/frameworks/liteipc/include",
+    "//foundation/communication/ipc_lite/interfaces/kits",
+    "//drivers/peripheral/sensor/interfaces/include",
+    "//base/sensors/sensor_lite/frameworks/include",
+  ]
+
+  deps = [
+    "//drivers/peripheral/sensor/hal:hdi_sensor",
+    "//foundation/distributedschedule/samgr_lite/samgr:samgr",
+  ]
+}
diff --git a/base/sensors/sensor_lite/services/include/sensor_service.h b/base/sensors/sensor_lite/services/include/sensor_service.h
new file mode 100755
index 00000000..399ea117
--- /dev/null
+++ b/base/sensors/sensor_lite/services/include/sensor_service.h
@@ -0,0 +1,74 @@
+/*
+ * Copyright (c) 2021 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef SENSOR_SERVICE_DEF_H
+#define SENSOR_SERVICE_DEF_H
+
+#include <iproxy_server.h>
+
+#include <pthread.h>
+
+#include "feature.h"
+#include <iunknown.h>
+#include <log.h>
+#include "samgr_lite.h"
+#include "sensor_agent.h"
+#include "sensor_agent_proxy.h"
+#include "sensor_agent_type.h"
+#include "service.h"
+
+#ifdef __cplusplus
+#if __cplusplus
+extern "C" {
+#endif
+#endif
+
+#define SENSOR_SERVICE "sensor_service"
+#define SENSOR_FEATURE "sensor_feature"
+
+#define SENSOR_SERVICE_ID_GetAllSensors 0
+#define SENSOR_SERVICE_ID_ActivateSensor 1
+#define SENSOR_SERVICE_ID_DeactivateSensor 2
+#define SENSOR_SERVICE_ID_SetBatchs 3
+#define SENSOR_SERVICE_ID_SubscribeSensor 4
+#define SENSOR_SERVICE_ID_UnsubscribeSensor 5
+#define SENSOR_SERVICE_ID_SetMode 6
+#define SENSOR_SERVICE_ID_SetOption 7
+#define SENSORMGR_LISTENER_NAME_LEN 8
+
+typedef struct SensorFeatureApi {
+    INHERIT_SERVER_IPROXY;
+    int32_t (*GetAllSensors)(SensorInfo **sensorInfo, int32_t *count);
+    int32_t (*ActivateSensor)(int32_t sensorId, const SensorUser *user);
+    int32_t (*DeactivateSensor)(int32_t sensorId, const SensorUser *user);
+    int32_t (*SetBatch)(int32_t sensorId, const SensorUser *user, int64_t samplingInterval, int64_t reportInterval);
+    int32_t (*SubscribeSensor)(int32_t sensorId, const SensorUser *user);
+    int32_t (*UnsubscribeSensor)(int32_t sensorId, const SensorUser *user);
+    int32_t (*SetMode)(int32_t sensorId, const SensorUser *user, int32_t mode);
+    int32_t (*SetOption)(int32_t sensorId, const SensorUser *user, int32_t option);
+} SensorFeatureApi;
+
+typedef struct SensorService {
+    INHERIT_SERVICE;
+    INHERIT_IUNKNOWNENTRY(SensorFeatureApi);
+    Identity identity;
+} SensorService;
+
+#ifdef __cplusplus
+#if __cplusplus
+}
+#endif
+#endif
+#endif
\ No newline at end of file
diff --git a/base/sensors/sensor_lite/services/include/sensor_service_impl.h b/base/sensors/sensor_lite/services/include/sensor_service_impl.h
new file mode 100755
index 00000000..701e7129
--- /dev/null
+++ b/base/sensors/sensor_lite/services/include/sensor_service_impl.h
@@ -0,0 +1,61 @@
+/*
+ * Copyright (c) 2021 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef SENSOR_SERVICE_INTERFACE_H
+#define SENSOR_SERVICE_INTERFACE_H
+
+#include "iproxy_server.h"
+#include "liteipc_adapter.h"
+#include "sensor_if.h"
+#include "sensor_service.h"
+
+#ifdef __cplusplus
+#if __cplusplus
+extern "C" {
+#endif
+#endif
+
+#define TASK_CONFIG_STACK_SIZE 0x800
+#define TASK_CONFIG_QUEUE_SIZE 20
+
+const char *SENSOR_GetName(Service *service);
+BOOL Initialize(Service *service, Identity identity);
+BOOL MessageHandle(Service *service, Request *msg);
+TaskConfig GetTaskConfig(Service *service);
+int32_t GetAllSensorsImpl(SensorInfo **sensorInfo, int32_t *count);
+int32_t ActivateSensorImpl(int32_t sensorId, const SensorUser *user);
+int32_t DeactivateSensorImpl(int32_t sensorId, const SensorUser *user);
+int32_t SetBatchImpl(int32_t sensorId, const SensorUser *user, int64_t samplingInterval, int64_t reportInterval);
+int32_t SubscribeSensorImpl(int32_t sensorId, const SensorUser *user);
+int32_t UnsubscribeSensorImpl(int32_t sensorId, const SensorUser *user);
+int32_t SetModeImpl(int32_t sensorId, const SensorUser *user, int32_t mode);
+int32_t SetOptionImpl(int32_t sensorId, const SensorUser *user, int32_t option);
+
+typedef int32 (*InvokeFunc)(SensorFeatureApi *defaultApi, IpcIo *req, IpcIo *reply);
+int32_t GetAllSensorsInvoke(SensorFeatureApi *defaultApi, IpcIo *req, IpcIo *reply);
+int32_t ActivateSensorInvoke(SensorFeatureApi *defaultApi, IpcIo *req, IpcIo *reply);
+int32_t DeactivateSensorInvoke(SensorFeatureApi *defaultApi, IpcIo *req, IpcIo *reply);
+int32_t SetBatchInvoke(SensorFeatureApi *defaultApi, IpcIo *req, IpcIo *reply);
+int32_t SubscribeSensorInvoke(SensorFeatureApi *defaultApi, IpcIo *req, IpcIo *reply);
+int32_t UnsubscribeSensorInvoke(SensorFeatureApi *defaultApi, IpcIo *req, IpcIo *reply);
+int32_t SetModeInvoke(SensorFeatureApi *defaultApi, IpcIo *req, IpcIo *reply);
+int32_t SetOptionInvoke(SensorFeatureApi *defaultApi, IpcIo *req, IpcIo *reply);
+void SetSvcIdentity(const IpcIo *req, const IpcIo *reply);
+#ifdef __cplusplus
+#if __cplusplus
+}
+#endif
+#endif
+#endif
\ No newline at end of file
diff --git a/base/sensors/sensor_lite/services/src/proc.c b/base/sensors/sensor_lite/services/src/proc.c
new file mode 100755
index 00000000..7eceddba
--- /dev/null
+++ b/base/sensors/sensor_lite/services/src/proc.c
@@ -0,0 +1,28 @@
+/*
+ * Copyright (c) 2021 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "log.h"
+#include "samgr_lite.h"
+
+void __attribute__((weak)) OHOS_SystemInit(void)
+{
+    SAMGR_Bootstrap();
+};
+
+int main()
+{
+    OHOS_SystemInit();
+    pause();
+}
\ No newline at end of file
diff --git a/base/sensors/sensor_lite/services/src/sensor_service.c b/base/sensors/sensor_lite/services/src/sensor_service.c
new file mode 100755
index 00000000..67b679be
--- /dev/null
+++ b/base/sensors/sensor_lite/services/src/sensor_service.c
@@ -0,0 +1,179 @@
+/*
+ * Copyright (c) 2021 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+#include "sensor_service.h"
+
+#include <ohos_init.h>
+#include "feature.h"
+#include "iproxy_server.h"
+#include "samgr_lite.h"
+#include "sensor_service_impl.h"
+#include "service.h"
+
+int32_t GetAllSensorsInvoke(SensorFeatureApi *defaultApi, IpcIo *req, IpcIo *reply)
+{
+    HILOG_DEBUG(HILOG_MODULE_APP, "[SERVICE:%s]: %s begin", SENSOR_SERVICE, __func__);
+    SensorInfo *sensorInfo = NULL;
+    int32_t count = 0;
+    int32_t ret = defaultApi->GetAllSensors(&sensorInfo, &count);
+    IpcIoPushInt32(reply, SENSOR_SERVICE_ID_GetAllSensors);
+    if (ret != SENSOR_OK) {
+        HILOG_ERROR(HILOG_MODULE_APP, "[SERVICE:%s]: %s failed, ret: %d", SENSOR_SERVICE, __func__, ret);
+        IpcIoPushInt32(reply, ret);
+        return ret;
+    }
+    BuffPtr dataBuff = {
+        .buffSz = (uint32_t)(count * sizeof(SensorInfo)),
+        .buff = sensorInfo
+    };
+    IpcIoPushInt32(reply, SENSOR_OK);
+    IpcIoPushInt32(reply, count);
+    IpcIoPushDataBuff(reply, &dataBuff);
+    return SENSOR_OK;
+}
+
+int32_t ActivateSensorInvoke(SensorFeatureApi *defaultApi, IpcIo *req, IpcIo *reply)
+{
+    HILOG_DEBUG(HILOG_MODULE_APP, "[SERVICE:%s]: %s begin", SENSOR_SERVICE, __func__);
+    int32_t sensorId = IpcIoPopInt32(req);
+    SensorUser sensorUser;
+    int32_t ret = defaultApi->ActivateSensor(sensorId, &sensorUser);
+    IpcIoPushInt32(reply, SENSOR_SERVICE_ID_ActivateSensor);
+    IpcIoPushInt32(reply, ret);
+    return ret;
+}
+
+int32_t DeactivateSensorInvoke(SensorFeatureApi *defaultApi, IpcIo *req, IpcIo *reply)
+{
+    HILOG_DEBUG(HILOG_MODULE_APP, "[SERVICE:%s]: %s begin", SENSOR_SERVICE, __func__);
+    int32_t sensorId = IpcIoPopInt32(req);
+    SensorUser sensorUser;
+    int32_t ret = defaultApi->DeactivateSensor(sensorId, &sensorUser);
+    IpcIoPushInt32(reply, SENSOR_SERVICE_ID_DeactivateSensor);
+    IpcIoPushInt32(reply, ret);
+    return ret;
+}
+
+int32_t SetBatchInvoke(SensorFeatureApi *defaultApi, IpcIo *req, IpcIo *reply)
+{
+    HILOG_DEBUG(HILOG_MODULE_APP, "[SERVICE:%s]: %s begin", SENSOR_SERVICE, __func__);
+    int32_t sensorId = IpcIoPopInt32(req);
+    int64_t updateInterval = IpcIoPopInt64(req);
+    int64_t maxDelay = IpcIoPopInt64(req);
+    SensorUser sensorUser;
+    int32_t ret = defaultApi->SetBatch(sensorId, &sensorUser, updateInterval, maxDelay);
+    IpcIoPushInt32(reply, SENSOR_SERVICE_ID_SetBatchs);
+    IpcIoPushInt32(reply, ret);
+    return ret;
+}
+
+int32_t SubscribeSensorInvoke(SensorFeatureApi *defaultApi, IpcIo *req, IpcIo *reply)
+{
+    HILOG_DEBUG(HILOG_MODULE_APP, "[SERVICE:%s]: %s begin", SENSOR_SERVICE, __func__);
+    int32_t sensorId = IpcIoPopInt32(req);
+    SensorUser sensorUser;
+    int32_t ret = defaultApi->SubscribeSensor(sensorId, &sensorUser);
+    SetSvcIdentity(req, reply);
+    IpcIoPushInt32(reply, SENSOR_SERVICE_ID_SubscribeSensor);
+    IpcIoPushInt32(reply, ret);
+    return ret;
+}
+
+int32_t UnsubscribeSensorInvoke(SensorFeatureApi *defaultApi, IpcIo *req, IpcIo *reply)
+{
+    HILOG_DEBUG(HILOG_MODULE_APP, "[SERVICE:%s]: %s begin", SENSOR_SERVICE, __func__);
+    int32_t sensorId = IpcIoPopInt32(req);
+    SensorUser sensorUser;
+    int32_t ret = defaultApi->UnsubscribeSensor(sensorId, &sensorUser);
+    IpcIoPushInt32(reply, SENSOR_SERVICE_ID_UnsubscribeSensor);
+    IpcIoPushInt32(reply, ret);
+    return ret;
+}
+
+int32_t SetModeInvoke(SensorFeatureApi *defaultApi, IpcIo *req, IpcIo *reply)
+{
+    HILOG_DEBUG(HILOG_MODULE_APP, "[SERVICE:%s]: %s begin", SENSOR_SERVICE, __func__);
+    int32_t sensorId = IpcIoPopInt32(req);
+    int32_t mode = IpcIoPopInt32(req);
+    SensorUser sensorUser;
+    int32_t ret = defaultApi->SetMode(sensorId, &sensorUser, mode);
+    IpcIoPushInt32(reply, SENSOR_SERVICE_ID_SetMode);
+    IpcIoPushInt32(reply, ret);
+    return ret;
+}
+
+int32_t SetOptionInvoke(SensorFeatureApi *defaultApi, IpcIo *req, IpcIo *reply)
+{
+    HILOG_DEBUG(HILOG_MODULE_APP, "[SERVICE:%s]: %s begin", SENSOR_SERVICE, __func__);
+    int32_t sensorId = IpcIoPopInt32(req);
+    int32_t option = IpcIoPopInt32(req);
+    SensorUser sensorUser;
+    int32_t ret = defaultApi->SetOption(sensorId, &sensorUser, option);
+    IpcIoPushInt32(reply, SENSOR_SERVICE_ID_SetOption);
+    IpcIoPushInt32(reply, ret);
+    return ret;
+}
+
+static InvokeFunc g_invokeFuncList[] = {
+    GetAllSensorsInvoke,
+    ActivateSensorInvoke,
+    DeactivateSensorInvoke,
+    SetBatchInvoke,
+    SubscribeSensorInvoke,
+    UnsubscribeSensorInvoke,
+    SetModeInvoke,
+    SetOptionInvoke,
+};
+
+int32_t Invoke(IServerProxy *iProxy, int funcId, void *origin, IpcIo *req, IpcIo *reply)
+{
+    HILOG_DEBUG(HILOG_MODULE_APP, "[SERVICE:%s]: %s begin", SENSOR_SERVICE, __func__);
+    if ((iProxy == NULL) || (req == NULL) || (reply == NULL)) {
+        HILOG_ERROR(HILOG_MODULE_APP, "[SERVICE:%s]: %s iProxy or req or reply is NULL",
+            SENSOR_SERVICE, __func__);
+        return SENSOR_ERROR_INVALID_PARAM;
+    }
+    SensorFeatureApi *defaultApi = (SensorFeatureApi *)iProxy;
+    if ((funcId >= 0) && (funcId <= SENSOR_SERVICE_ID_UnsubscribeSensor)) {
+        return g_invokeFuncList[funcId](defaultApi, req, reply);
+    }
+    return SENSOR_ERROR_INVALID_PARAM;
+}
+
+static SensorService g_sensorService = {
+    .GetName = SENSOR_GetName,
+    .Initialize = Initialize,
+    .MessageHandle = MessageHandle,
+    .GetTaskConfig = GetTaskConfig,
+    SERVER_IPROXY_IMPL_BEGIN,
+    .Invoke = Invoke,
+    .GetAllSensors = GetAllSensorsImpl,
+    .ActivateSensor = ActivateSensorImpl,
+    .DeactivateSensor = DeactivateSensorImpl,
+    .SetBatch = SetBatchImpl,
+    .SubscribeSensor = SubscribeSensorImpl,
+    .UnsubscribeSensor = UnsubscribeSensorImpl,
+    .SetMode = SetModeImpl,
+    .SetOption = SetOptionImpl,
+    IPROXY_END,
+};
+
+static void Init(void)
+{
+    HILOG_DEBUG(HILOG_MODULE_APP, "[SERVICE:%s]: %s begin",
+        SENSOR_SERVICE, __func__);
+    SAMGR_GetInstance()->RegisterService((Service *)&g_sensorService);
+    SAMGR_GetInstance()->RegisterDefaultFeatureApi(SENSOR_SERVICE, GET_IUNKNOWN(g_sensorService));
+}
+SYSEX_SERVICE_INIT(Init);
\ No newline at end of file
diff --git a/base/sensors/sensor_lite/services/src/sensor_service_impl.c b/base/sensors/sensor_lite/services/src/sensor_service_impl.c
new file mode 100755
index 00000000..6452d965
--- /dev/null
+++ b/base/sensors/sensor_lite/services/src/sensor_service_impl.c
@@ -0,0 +1,295 @@
+/*
+ * Copyright (c) 2021 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "sensor_service_impl.h"
+
+#include <securec.h>
+#include <stdlib.h>
+#include <string.h>
+
+#include "liteipc_adapter.h"
+#include "sensor_service.h"
+
+static struct SensorInfos *g_sensorLists;
+static int32_t g_sensorListsLength;
+static struct SensorInterface *g_sensorDevice;
+static SvcIdentity g_svcIdentity = {
+    .handle = 0,
+    .token = 0,
+};
+
+int32_t InitSensorList()
+{
+    HILOG_DEBUG(HILOG_MODULE_APP, "[SERVICE:%s]: %s begin", SENSOR_SERVICE, __func__);
+    if (g_sensorDevice == NULL) {
+        HILOG_ERROR(HILOG_MODULE_APP, "[SERVICE:%s]: %s g_sensorDevice is NULL",
+            SENSOR_SERVICE, __func__);
+        return SENSOR_ERROR_INVALID_PARAM;
+    }
+    int32_t ret = g_sensorDevice->GetAllSensors(&g_sensorLists, &g_sensorListsLength);
+    if ((ret != 0) || (g_sensorLists == NULL)) {
+        HILOG_ERROR(HILOG_MODULE_APP, "[SERVICE:%s]: %s getAllSensors failed, ret: %d",
+            SENSOR_SERVICE, __func__, ret);
+        return SENSOR_ERROR_INVALID_PARAM;
+    }
+    return SENSOR_OK;
+}
+
+const char *SENSOR_GetName(Service *service)
+{
+    HILOG_DEBUG(HILOG_MODULE_APP, "[SERVICE:%s]: %s begin",
+        SENSOR_SERVICE, __func__);
+    return SENSOR_SERVICE;
+}
+
+static int SensorDataCallback(SensorEvent *event)
+{
+    HILOG_DEBUG(HILOG_MODULE_APP, "[SERVICE:%s]: %s begin", SENSOR_SERVICE, __func__);
+    if ((event == NULL) || (event->dataLen == 0)) {
+        HILOG_ERROR(HILOG_MODULE_APP, "[SERVICE:%s]: %s event is NULL",
+            SENSOR_SERVICE, __func__);
+        return SENSOR_ERROR_INVALID_ID;
+    }
+    IpcIo io;
+    uint8_t data[IPC_IO_DATA_MAX];
+    IpcIoInit(&io, data, IPC_IO_DATA_MAX, IPC_MAX_OBJECTS);
+    BuffPtr eventBuff = {
+        .buffSz = (uint32_t)(sizeof(SensorEvent)),
+        .buff = event
+    };
+    BuffPtr sensorDataBuff = {
+        .buffSz = (uint32_t)(event->dataLen),
+        .buff = event->data
+    };
+    IpcIoPushDataBuff(&io, &eventBuff);
+    IpcIoPushDataBuff(&io, &sensorDataBuff);
+    if (!IpcIoAvailable(&io)) {
+        HILOG_ERROR(HILOG_MODULE_APP, "%s TransmitServiceId ipc failed", __func__);
+        return SENSOR_ERROR_INVALID_PARAM;
+    }
+    IpcContext context;
+    SendRequest(&context, g_svcIdentity, 0, &io, NULL, LITEIPC_FLAG_ONEWAY, NULL);
+    return SENSOR_OK;
+}
+
+void SetSvcIdentity(const IpcIo *req, const IpcIo *reply)
+{
+    SvcIdentity *sid = IpcIoPopSvc(req);
+    if (sid == NULL) {
+        HILOG_ERROR(HILOG_MODULE_APP, "%s sid is NULL", __func__);
+        return;
+    }
+    g_svcIdentity.handle = sid->handle;
+    g_svcIdentity.token = sid->token;
+}
+
+BOOL Initialize(Service *service, Identity identity)
+{
+    HILOG_DEBUG(HILOG_MODULE_APP, "[SERVICE:%s]: %s begin", SENSOR_SERVICE, __func__);
+    g_sensorDevice = NewSensorInterfaceInstance();
+    if (g_sensorDevice == NULL) {
+        HILOG_ERROR(HILOG_MODULE_APP, "[SERVICE:%s]: %s g_sensorDevice is NULL",
+            SENSOR_SERVICE, __func__);
+    }
+    return TRUE;
+}
+
+BOOL MessageHandle(Service *service, Request *msg)
+{
+    HILOG_DEBUG(HILOG_MODULE_APP, "[SERVICE:%s]: %s begin",
+        SENSOR_SERVICE, __func__);
+    return TRUE;
+}
+
+TaskConfig GetTaskConfig(Service *service)
+{
+    HILOG_DEBUG(HILOG_MODULE_APP, "[SERVICE:%s]: %s begin", SENSOR_SERVICE, __func__);
+    TaskConfig config = {LEVEL_HIGH, PRI_BELOW_NORMAL, TASK_CONFIG_STACK_SIZE, TASK_CONFIG_QUEUE_SIZE, SHARED_TASK};
+    return config;
+}
+
+int32_t GetAllSensorsImpl(SensorInfo **sensorInfo, int32_t *count)
+{
+    HILOG_DEBUG(HILOG_MODULE_APP, "[SERVICE:%s]: %s begin", SENSOR_SERVICE, __func__);
+    if ((sensorInfo == NULL) || (count == NULL)) {
+        HILOG_ERROR(HILOG_MODULE_APP, "[SERVICE:%s]: %s sensorInfo or count is null",
+            SENSOR_SERVICE, __func__);
+        return SENSOR_ERROR_INVALID_PARAM;
+    }
+    if ((g_sensorLists == NULL) || (g_sensorListsLength <= 0)) {
+        if (InitSensorList() != 0) {
+            HILOG_ERROR(HILOG_MODULE_APP, "[SERVICE:%s]: %s initSensorList failed!",
+                SENSOR_SERVICE, __func__);
+            return SENSOR_ERROR_INVALID_PARAM;
+        }
+    }
+    *sensorInfo = (SensorInfo *)g_sensorLists;
+    *count = g_sensorListsLength;
+    return SENSOR_OK;
+}
+
+int32_t ActivateSensorImpl(int32_t sensorId, const SensorUser *user)
+{
+    HILOG_DEBUG(HILOG_MODULE_APP, "[SERVICE:%s]: %s begin",
+        SENSOR_SERVICE, __func__);
+    if ((sensorId >= SENSOR_TYPE_ID_MAX) || (sensorId < 0)) {
+        HILOG_ERROR(HILOG_MODULE_APP, "[SERVICE:%s]: %s sensorId: %d is invalid",
+            SENSOR_SERVICE, __func__, sensorId);
+        return SENSOR_ERROR_INVALID_ID;
+    }
+    if (user == NULL) {
+        HILOG_ERROR(HILOG_MODULE_APP, "[SERVICE:%s]: %s user is NULL",
+            SENSOR_SERVICE, __func__);
+        return SENSOR_ERROR_INVALID_PARAM;
+    }
+    if (g_sensorDevice == NULL) {
+        HILOG_ERROR(HILOG_MODULE_APP, "[SERVICE:%s]: %s g_sensorDevice is NULL",
+            SENSOR_SERVICE, __func__);
+        return SENSOR_ERROR_INVALID_PARAM;
+    }
+    int32_t ret = g_sensorDevice->Enable(sensorId);
+    if (ret != 0) {
+        HILOG_ERROR(HILOG_MODULE_APP, "[SERVICE:%s]: %s ActivateSensor sensor failed, ret: %d",
+            SENSOR_SERVICE, __func__, ret);
+        return ret;
+    }
+    return SENSOR_OK;
+}
+
+int32_t DeactivateSensorImpl(int32_t sensorId, const SensorUser *user)
+{
+    HILOG_DEBUG(HILOG_MODULE_APP, "[SERVICE:%s]: %s begin",
+        SENSOR_SERVICE, __func__);
+    if ((sensorId >= SENSOR_TYPE_ID_MAX) || (sensorId < 0)) {
+        HILOG_ERROR(HILOG_MODULE_APP, "[SERVICE:%s]: %s sensorId: %d is invalid",
+            SENSOR_SERVICE, __func__, sensorId);
+        return SENSOR_ERROR_INVALID_ID;
+    }
+    if (user == NULL) {
+        HILOG_ERROR(HILOG_MODULE_APP, "[SERVICE:%s]: %s user is NULL",
+            SENSOR_SERVICE, __func__);
+        return SENSOR_ERROR_INVALID_PARAM;
+    }
+    if (g_sensorDevice == NULL) {
+        HILOG_ERROR(HILOG_MODULE_APP, "[SERVICE:%s]: %s g_sensorDevice is NULL",
+            SENSOR_SERVICE, __func__);
+        return SENSOR_ERROR_INVALID_PARAM;
+    }
+    int32_t ret = g_sensorDevice->Disable(sensorId);
+    if (ret != 0) {
+        HILOG_ERROR(HILOG_MODULE_APP, "[SERVICE:%s]: %s DeactivateSensor sensor failed, ret: %d",
+            SENSOR_SERVICE, __func__, ret);
+        return ret;
+    }
+    return SENSOR_OK;
+}
+
+int32_t SetBatchImpl(int32_t sensorId, const SensorUser *user, int64_t samplingInterval, int64_t reportInterval)
+{
+    HILOG_DEBUG(HILOG_MODULE_APP, "[SERVICE:%s]: %s begin",
+        SENSOR_SERVICE, __func__);
+    if ((sensorId >= SENSOR_TYPE_ID_MAX) || (sensorId < 0)) {
+        HILOG_ERROR(HILOG_MODULE_APP, "[SERVICE:%s]: %s sensorId: %d is invalid",
+            SENSOR_SERVICE, __func__, sensorId);
+        return SENSOR_ERROR_INVALID_ID;
+    }
+    if ((samplingInterval < 0) || (reportInterval < 0)) {
+        HILOG_ERROR(HILOG_MODULE_APP,
+            "[SERVICE:%s]: %s samplingInterval: %lld or reportInterval: %lld is invalid",
+            SENSOR_SERVICE, __func__, samplingInterval, reportInterval);
+        return SENSOR_ERROR_INVALID_PARAM;
+    }
+    return SENSOR_OK;
+}
+
+int32_t SubscribeSensorImpl(int32_t sensorId, const SensorUser *user)
+{
+    HILOG_DEBUG(HILOG_MODULE_APP, "[SERVICE:%s]: %s begin",
+        SENSOR_SERVICE, __func__);
+    if ((sensorId >= SENSOR_TYPE_ID_MAX) || (sensorId < 0)) {
+        HILOG_ERROR(HILOG_MODULE_APP, "[SERVICE:%s]: %s sensorId: %d is invalid",
+            SENSOR_SERVICE, __func__, sensorId);
+        return SENSOR_ERROR_INVALID_ID;
+    }
+    if (user == NULL) {
+        HILOG_ERROR(HILOG_MODULE_APP, "[SERVICE:%s]: %s user is NULL",
+            SENSOR_SERVICE, __func__);
+        return SENSOR_ERROR_INVALID_PARAM;
+    }
+    if (g_sensorDevice == NULL) {
+        HILOG_ERROR(HILOG_MODULE_APP, "[SERVICE:%s]: %s g_sensorDevice is NULL",
+            SENSOR_SERVICE, __func__);
+        return SENSOR_ERROR_INVALID_PARAM;
+    }
+    int32_t ret = g_sensorDevice->Register(SensorDataCallback);
+    if (ret != 0) {
+        HILOG_ERROR(HILOG_MODULE_APP, "[SERVICE:%s]: %s register sensor user failed, ret: %d",
+            SENSOR_SERVICE, __func__, ret);
+        return SENSOR_ERROR_INVALID_PARAM;
+    }
+    return SENSOR_OK;
+}
+
+int32_t UnsubscribeSensorImpl(int32_t sensorId, const SensorUser *user)
+{
+    HILOG_DEBUG(HILOG_MODULE_APP, "[SERVICE:%s]: %s begin",
+        SENSOR_SERVICE, __func__);
+    if ((sensorId >= SENSOR_TYPE_ID_MAX) || (sensorId < 0)) {
+        HILOG_ERROR(HILOG_MODULE_APP, "[SERVICE:%s]: %s sensorId: %d is invalid",
+            SENSOR_SERVICE, __func__, sensorId);
+        return SENSOR_ERROR_INVALID_ID;
+    }
+    if (user == NULL) {
+        HILOG_ERROR(HILOG_MODULE_APP, "[SERVICE:%s]: %s user is NULL",
+            SENSOR_SERVICE, __func__);
+        return SENSOR_ERROR_INVALID_PARAM;
+    }
+    if (g_sensorDevice == NULL) {
+        HILOG_ERROR(HILOG_MODULE_APP, "[SERVICE:%s]: %s g_sensorDevice is NULL",
+            SENSOR_SERVICE, __func__);
+        return SENSOR_ERROR_INVALID_PARAM;
+    }
+    int32_t ret = g_sensorDevice->Unregister();
+    if (ret != 0) {
+        HILOG_ERROR(HILOG_MODULE_APP, "[SERVICE:%s]: %s unregister sensor failed, ret: %d",
+            SENSOR_SERVICE, __func__, ret);
+        return SENSOR_ERROR_INVALID_PARAM;
+    }
+    return SENSOR_OK;
+}
+
+int32_t SetModeImpl(int32_t sensorId, const SensorUser *user, int32_t mode)
+{
+    HILOG_DEBUG(HILOG_MODULE_APP, "[SERVICE:%s]: %s begin",
+        SENSOR_SERVICE, __func__);
+    if ((sensorId >= SENSOR_TYPE_ID_MAX) || (sensorId < 0)) {
+        HILOG_ERROR(HILOG_MODULE_APP, "[SERVICE:%s]: %s sensorId: %d is invalid",
+            SENSOR_SERVICE, __func__, sensorId);
+        return SENSOR_ERROR_INVALID_ID;
+    }
+    return SENSOR_OK;
+}
+
+int32_t SetOptionImpl(int32_t sensorId, const SensorUser *user, int32_t option)
+{
+    HILOG_DEBUG(HILOG_MODULE_APP, "[SERVICE:%s]: %s begin",
+        SENSOR_SERVICE, __func__);
+    if ((sensorId >= SENSOR_TYPE_ID_MAX) || (sensorId < 0)) {
+        HILOG_ERROR(HILOG_MODULE_APP, "[SERVICE:%s]: %s sensorId: %d is invalid",
+            SENSOR_SERVICE, __func__, sensorId);
+        return SENSOR_ERROR_INVALID_ID;
+    }
+    return SENSOR_OK;
+}
diff --git a/base/startup/syspara_lite/frameworks/parameter/src/parameter_common.c b/base/startup/syspara_lite/frameworks/parameter/src/parameter_common.c
index cecd601c..67cc86ea 100755
--- a/base/startup/syspara_lite/frameworks/parameter/src/parameter_common.c
+++ b/base/startup/syspara_lite/frameworks/parameter/src/parameter_common.c
@@ -23,7 +23,7 @@
 #define VERSION_ID_LEN 256
 #define PROPERTY_MAX_LENGTH 2048
 
-static char g_roBuildOs[] = {"OpenHarmony"};
+static char g_roBuildOs[] = {"openHarmony-master"};
 static char g_roBuildVerShow[] = {"OpenHarmony_release 1.1.0"};
 static char g_roSdkApiLevel[] = {"3"};
 static char g_roFirstApiLevel[] = {"1"};
